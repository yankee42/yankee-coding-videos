1
00:00:00,000 --> 00:00:03,057
Bem-vindo de volta ao "Let's build a compiler". 

2
00:00:03,050 --> 00:00:04,413
No último episódio nós

3
00:00:04,410 --> 00:00:06,968
aprendemos nossos parâmetros de funções

4
00:00:06,960 --> 00:00:09,373
mas nós ainda não tomamos conta

5
00:00:09,370 --> 00:00:12,253
de retornar alguma mensagem de erro útil 

6
00:00:12,250 --> 00:00:14,040
se o programador mais uma vez

7
00:00:14,040 --> 00:00:15,511
qualquer bobagem junto,

8
00:00:15,510 --> 00:00:18,737
como exemplo chamando uma função

9
00:00:18,730 --> 00:00:20,515
que, acima de tudo, nem está definida.

10
00:00:20,964 --> 00:00:22,973
Por isso, vamos neste episódio vamos

11
00:00:22,970 --> 00:00:25,568
nos importar com isso, para que neste caso,

12
00:00:25,560 --> 00:00:26,777
que o programador

13
00:00:26,770 --> 00:00:29,102
chamar uma função que não está definida

14
00:00:29,100 --> 00:00:31,982
uma mensagem de erro razoável é jogada.

15
00:00:32,760 --> 00:00:34,306
Primeiramente, iremos

16
00:00:34,300 --> 00:00:36,333
expandir a nossa especificação de novo,

17
00:00:36,330 --> 00:00:37,626
você já sabe como.

18
00:00:37,620 --> 00:00:39,324
Ali precisamos de algo

19
00:00:39,320 --> 00:00:40,582
como o que temos até agora para o nosso

20
00:00:40,580 --> 00:00:43,480
"variable already defined",

21
00:00:43,480 --> 00:00:44,604
por isso copio isto

22
00:00:44,600 --> 00:00:46,746
e então passamos o teste para algo.

23
00:00:46,920 --> 00:00:48,564
O teste deve agora dizer

24
00:00:48,560 --> 00:00:50,857
que sempre um

25
00:00:50,850 --> 00:00:54,084
"UndefinedFunctionException" é jogado 

26
00:00:55,235 --> 00:00:58,373
e mesmo assim, quando

27
00:00:58,370 --> 00:01:01,955
chamamos uma função, o... bem...

28
00:01:01,950 --> 00:01:02,848
você pode imaginar:

29
00:01:02,840 --> 00:01:04,284
Não está definido.

30
00:01:05,728 --> 00:01:08,817
Então precisamos, é claro, de um outro código

31
00:01:08,810 --> 00:01:11,235
e o novo código deve agora

32
00:01:11,230 --> 00:01:13,911
chama uma função indefinida.

33
00:01:17,222 --> 00:01:19,013
O erro é agora na linha um

34
00:01:19,010 --> 00:01:22,146
e na posição... 1, 2, 3, 4, 5, 6, 7, 8.

35
00:01:24,417 --> 00:01:26,786
E o próximo, é claro, ainda deveremos adaptar,

36
00:01:26,780 --> 00:01:28,115
ali pegamos então:

37
00:01:28,110 --> 00:01:32,493
"Call to undefined ... function".

38
00:01:33,170 --> 00:01:35,537
O nome da função

39
00:01:35,530 --> 00:01:38,426
é agora, naturalmente, um pouco maior que apenas "x".

40
00:01:39,333 --> 00:01:41,435
Então executamos o teste mais uma vez

41
00:01:41,430 --> 00:01:43,942
e para controlar o que ele também dá de erro

42
00:01:43,940 --> 00:01:45,711
e para que tenhamos algo a fazer

43
00:01:46,253 --> 00:01:48,782
e sim, ele diz que falta

44
00:01:48,780 --> 00:01:50,351
mas nós notamos, ali:

45
00:01:50,350 --> 00:01:54,777
"Expected exception was *Variable*AlreadyDefinedException",

46
00:01:54,770 --> 00:01:56,933
que infelizmente havíamos esquecido de adaptar.

47
00:01:56,930 --> 00:01:59,986
Então precisamos ainda escrever aqui dentro:

48
00:01:59,980 --> 00:02:02,431
"UndefinedFunctionException".

49
00:02:04,280 --> 00:02:06,653
Então colocamos ainda esta classe,

50
00:02:06,650 --> 00:02:09,071
para ficar no nosso diretório fonte

51
00:02:09,070 --> 00:02:11,177
para nossas outras exceptions

52
00:02:13,650 --> 00:02:18,235
e deixamos elas derivarem do nosso "CompileException".

53
00:02:18,973 --> 00:02:20,768
O constructor nós pegamos conosco

54
00:02:20,760 --> 00:02:22,182
e então ele pode seguir.

55
00:02:22,620 --> 00:02:24,324
O token que nós recebemos,

56
00:02:24,320 --> 00:02:26,346
que é que temos agora 

57
00:02:26,340 --> 00:02:29,711
o token que está dentro da "function name".

58
00:02:30,020 --> 00:02:32,360
Assim fica um pouco mais claro

59
00:02:32,360 --> 00:02:34,222
nomeamos o parâmetro daqui

60
00:02:34,220 --> 00:02:37,582
e então queremos notar o nome da função.

61
00:02:37,580 --> 00:02:41,364
Assim criamos aqui uma variável membro "functionName"

62
00:02:41,786 --> 00:02:45,160
e de novo nós preenchemos da mesma forma nosso constructor.

63
00:02:46,004 --> 00:02:48,462
O "functionName" está então simplesmente

64
00:02:48,460 --> 00:02:51,937
no token do texto.

65
00:02:52,733 --> 00:02:55,777
Então precisamos ainda de uma função "getMessage()",

66
00:02:55,770 --> 00:02:57,528
que é similar ao...

67
00:02:57,520 --> 00:02:58,644
o que já temos até o momento,

68
00:02:58,640 --> 00:03:00,920
por exemplo, com a "variable already defined",

69
00:03:00,920 --> 00:03:02,680
por isso roubamos ela mais uma vez

70
00:03:02,680 --> 00:03:04,391
e então ajustamos ela

71
00:03:07,671 --> 00:03:11,702
e então pegamos do teste novamente

72
00:03:11,700 --> 00:03:14,191
o texto que realmente deveria estar lá,

73
00:03:14,190 --> 00:03:16,475
logo "call to undefined function"

74
00:03:16,470 --> 00:03:18,715
e nas chaves está, é claro,

75
00:03:18,710 --> 00:03:21,866
não uma variável, mas nossa functionName.

76
00:03:21,860 --> 00:03:23,893
Então, maravilha, agora devemos jogar essa

77
00:03:23,890 --> 00:03:26,711
exception mais uma vez e o "visitFunctionCall" junto.

78
00:03:26,710 --> 00:03:28,382
Precisamos ver novamente aqui:

79
00:03:28,380 --> 00:03:31,168
Desta função, que recém encontramos,

80
00:03:31,160 --> 00:03:33,568
para que deva ser chamada:

81
00:03:33,568 --> 00:03:35,560
Ela está então verdadeiramente definida?

82
00:03:35,560 --> 00:03:37,706
Quando não for o caso:

83
00:03:38,342 --> 00:03:39,640
Então...

84
00:03:39,640 --> 00:03:41,782
jogamos o nosso

85
00:03:41,780 --> 00:03:46,204
UndefinedFunctionException recém criado novo antes

86
00:03:46,200 --> 00:03:50,764
e passamos este token com o nome da função.

87
00:03:51,595 --> 00:03:53,426
Apenas agora chegamos neste

88
00:03:53,420 --> 00:03:55,862
"funcitonIsDefined"? Como sabemos disso?

89
00:03:55,860 --> 00:03:57,915
Chamamos uma vez mais como lembrança

90
00:03:57,910 --> 00:04:00,280
tudo o que tínhamos feito com as variáveis.

91
00:04:00,280 --> 00:04:02,524
Tínhamos este mapa junto a estas variáveis

92
00:04:02,520 --> 00:04:04,964
e lá estão todas as definições de variáveis dentro

93
00:04:04,960 --> 00:04:07,422
e se temos "visitAssignment", por exemplo,

94
00:04:07,420 --> 00:04:10,826
temos esta função "requireVariableIndex" ali,

95
00:04:10,820 --> 00:04:13,333
então acessamos a tabela de variáveis,

96
00:04:13,330 --> 00:04:14,551
mostrando:

97
00:04:14,777 --> 00:04:18,075
Esta variável está dentro da tabela de variáveis?

98
00:04:18,070 --> 00:04:20,146
Se não, aqui retorna um "null"

99
00:04:20,140 --> 00:04:23,360
e podemos jogar a nossa exception de acordo.

100
00:04:23,786 --> 00:04:27,724
No "visitVarDeclaration" preenchemos a tabela de variáveis

101
00:04:27,720 --> 00:04:30,511
e depois as variáveis estão

102
00:04:30,510 --> 00:04:31,955
sempre dentro da tabela.

103
00:04:31,950 --> 00:04:32,813
Agora pensemos sobre isto:

104
00:04:32,810 --> 00:04:34,902
O que é então, se neste sistema 

105
00:04:34,900 --> 00:04:37,311
queiramos passar nossas funções?

106
00:04:37,310 --> 00:04:39,786
Assim dizemos, que nós temos tal função,

107
00:04:39,780 --> 00:04:42,195
simplesmente com algum conteúdo

108
00:04:42,466 --> 00:04:45,200
e depois chamamos esta função.

109
00:04:45,200 --> 00:04:47,404
Maravilha: Nosso visitor vai

110
00:04:47,400 --> 00:04:49,777
percorrendo o código de cima a baixo,

111
00:04:49,770 --> 00:04:51,782
isto significa que ele primeiro

112
00:04:51,780 --> 00:04:54,471
encontra a "function declaration"

113
00:04:54,470 --> 00:04:56,115
e então a chamada de função.

114
00:04:56,110 --> 00:04:58,986
Ali primeiro seria encontrada a "function declaration"

115
00:04:58,980 --> 00:05:01,333
a função seria aplicada

116
00:05:01,330 --> 00:05:03,813
mas caso nós mudemos agora a ordem

117
00:05:03,810 --> 00:05:05,453
e chamemos primeiro a função

118
00:05:05,450 --> 00:05:07,200
e declarando ela primeiro,

119
00:05:07,200 --> 00:05:10,128
então a função anterior ainda não está definida.

120
00:05:11,097 --> 00:05:12,760
Mais cedo foi dito que,

121
00:05:12,760 --> 00:05:15,177
geralmente faz-se num compilador mais simples:

122
00:05:15,170 --> 00:05:16,111
Bem, isto não irá parar,

123
00:05:16,110 --> 00:05:17,662
a função que se chama

124
00:05:17,660 --> 00:05:19,622
que deva parar antes de ser definida.

125
00:05:19,620 --> 00:05:22,706
Assim como é um exemplo no C, também o é no Pascal

126
00:05:22,700 --> 00:05:25,733
e ali ele nos fornece o assim chamado

127
00:05:25,730 --> 00:05:27,031
"Forward declarations",

128
00:05:27,030 --> 00:05:28,408
Assim quando alguém quer

129
00:05:28,400 --> 00:05:31,368
chamar uma função, vindo o que está primeiro depois,

130
00:05:31,360 --> 00:05:33,413
então precisamos antes definir:

131
00:05:33,410 --> 00:05:36,253
Esta função ainda será definida depois

132
00:05:36,250 --> 00:05:38,280
mas, assim sendo, iremos chamar

133
00:05:38,280 --> 00:05:39,920
e aqui estão os parâmetros

134
00:05:39,920 --> 00:05:40,755
e então pode-se

135
00:05:40,750 --> 00:05:42,786
antes ainda de acessar a função

136
00:05:42,780 --> 00:05:46,093
mas isso é muito parecido com o século 20,

137
00:05:46,090 --> 00:05:47,182
nós naturalmente queremos

138
00:05:47,180 --> 00:05:49,875
não mais precisar fazer algo assim.

139
00:05:50,288 --> 00:05:52,582
Para chegar aí

140
00:05:52,580 --> 00:05:55,488
para que possamos também chamar funções

141
00:05:55,480 --> 00:06:00,471
que sejam chamadas antes das nossas definições de função

142
00:06:00,470 --> 00:06:01,942
function definitions

143
00:06:02,090 --> 00:06:03,475
devemos, contudo, primeiro

144
00:06:03,470 --> 00:06:06,435
passar a nossa árvore completa

145
00:06:06,430 --> 00:06:09,417
e procurar por todas as definições de função

146
00:06:09,410 --> 00:06:10,773
para conhecermos todas as funções

147
00:06:10,770 --> 00:06:13,271
desde o começo em que elas são definidas.

148
00:06:13,270 --> 00:06:16,475
Para isso criamos um novo visitor,

149
00:06:16,470 --> 00:06:18,720
que sabe exatamente fazê-lo.

150
00:06:19,244 --> 00:06:21,822
Este visitor iremos chamar de

151
00:06:21,820 --> 00:06:23,928
"FunctionDefinitionFinder"

152
00:06:25,191 --> 00:06:28,160
e deixamos como nosso outro visitor

153
00:06:28,160 --> 00:06:30,253
do "DemoBaseVisitor".

154
00:06:32,053 --> 00:06:33,764
Ele deve agora

155
00:06:33,760 --> 00:06:35,395
retornar um Set,

156
00:06:35,390 --> 00:06:37,151
um Set com strings,

157
00:06:37,822 --> 00:06:40,222
por uma definição estrita, um set

158
00:06:40,220 --> 00:06:43,466
contendo todos os nomes de funções

159
00:06:43,460 --> 00:06:44,768
que estão definidas.

160
00:06:45,946 --> 00:06:47,933
Os nomes das funções nós pegamos

161
00:06:47,930 --> 00:06:50,497
da "FunctionDefinition".

162
00:06:51,640 --> 00:06:52,973
que têm agora

163
00:06:52,970 --> 00:06:56,240
nossos nomes de funções dentro do contexto

164
00:06:58,600 --> 00:07:01,697
e agora precisamos então apenas retornar como Set.

165
00:07:01,690 --> 00:07:03,431
Lá ele dá no correspondente Java

166
00:07:03,430 --> 00:07:05,857
"Collections.singleton()"

167
00:07:05,850 --> 00:07:09,773
e ele cria um Set com exatamente uma entrada.

168
00:07:11,155 --> 00:07:12,857
Agora podemos naturalmente ser assim,

169
00:07:12,850 --> 00:07:15,773
que nosso programa tem um par a mais 

170
00:07:15,770 --> 00:07:18,311
de definições de funções e então precisamos

171
00:07:18,310 --> 00:07:19,902
poder adicionar junto alguma coisa,

172
00:07:19,900 --> 00:07:21,635
para que implementemos novamente o

173
00:07:21,630 --> 00:07:24,080
método "aggregateResult".

174
00:07:24,653 --> 00:07:26,853
Para o começo funcionar similarmente igual

175
00:07:26,850 --> 00:07:28,253
como no nosso

176
00:07:28,250 --> 00:07:30,057
visitor principal temos novamente:

177
00:07:30,050 --> 00:07:32,848
Nós olhamos primeiramente: O aggregate é "null"?

178
00:07:32,840 --> 00:07:34,591
Se for "null",

179
00:07:34,590 --> 00:07:37,111
então damos nosso nextResult de volta,

180
00:07:37,457 --> 00:07:41,764
se o aggregate também não era "null"

181
00:07:41,764 --> 00:07:43,760
mas o nextResult é "null",

182
00:07:43,760 --> 00:07:46,168
então retornamos o aggregate

183
00:07:46,160 --> 00:07:48,026
e se não for o caso,

184
00:07:48,020 --> 00:07:50,053
então ambos não são null,

185
00:07:50,050 --> 00:07:53,160
assim tanto aggregate como o nextResult

186
00:07:53,160 --> 00:07:54,115
não são null

187
00:07:54,110 --> 00:07:57,275
e então devemos unir ambos os Sets.

188
00:07:57,270 --> 00:08:00,200
Para criarmos agora também um novo Set

189
00:08:00,200 --> 00:08:03,226
e para que executemos o combinado Set,

190
00:08:03,220 --> 00:08:05,195
assim eu o chamo de "merged"

191
00:08:05,613 --> 00:08:08,582
e criamos ali então um novo HashSet

192
00:08:08,580 --> 00:08:11,311
e passamos no constructor uma Collection

193
00:08:11,310 --> 00:08:13,795
na qual chega tudo o que está no Set,

194
00:08:13,790 --> 00:08:15,866
dizemos tudo o que vai sobre o aggregate

195
00:08:15,860 --> 00:08:17,862
dentro do nosso Set combinado e

196
00:08:17,860 --> 00:08:19,240
então nós devemos

197
00:08:19,240 --> 00:08:21,675
todas as entradas do "nextResult"

198
00:08:21,670 --> 00:08:23,306
que também cabem dentro do Set,

199
00:08:23,300 --> 00:08:25,435
para isso podemos simplesmente chamar "addAll"

200
00:08:25,430 --> 00:08:27,244
e passar nextResult.

201
00:08:27,240 --> 00:08:31,080
Então damos nosso Set combinado de volta

202
00:08:31,555 --> 00:08:33,515
e estamos prontos por aqui.

203
00:08:34,377 --> 00:08:35,977
Agora devemos, é claro,

204
00:08:35,970 --> 00:08:39,324
chamar também a nossa "FunctionDefinitionFinder",

205
00:08:39,320 --> 00:08:41,413
isto nós fazemos dentro do "Main"

206
00:08:41,410 --> 00:08:43,377
no mesmo local

207
00:08:43,370 --> 00:08:46,786
ali até agora nós também chamamos o nosso visitor.

208
00:08:47,284 --> 00:08:49,533
O pegamos de acordo

209
00:08:49,530 --> 00:08:51,675
novamente o Set

210
00:08:52,151 --> 00:08:54,088
com as strings

211
00:08:55,657 --> 00:08:58,328
produzido dentro do nosso visitor

212
00:08:58,320 --> 00:08:59,440
e mais uma vez

213
00:08:59,440 --> 00:09:01,973
deixamos nosso ParseTree coletado.

214
00:09:01,970 --> 00:09:04,395
Se o nosso Set

215
00:09:04,835 --> 00:09:06,915
não contém nenhuma função,

216
00:09:06,910 --> 00:09:08,022
precisamos manter em mente,

217
00:09:08,020 --> 00:09:10,213
que "definedFunctions" é null agora.

218
00:09:10,631 --> 00:09:13,137
No MyVisitor ainda precisamos então

219
00:09:13,130 --> 00:09:15,413
criar um constructor,

220
00:09:15,973 --> 00:09:18,617
que una toda a coleção

221
00:09:18,610 --> 00:09:21,760
de respostas de definições

222
00:09:22,204 --> 00:09:24,577
e salve de acordo

223
00:09:24,570 --> 00:09:26,715
para que depois possamos olhar:

224
00:09:27,306 --> 00:09:29,231
Para qualquer dada string:

225
00:09:29,230 --> 00:09:32,137
Nos é dada uma função com este nome.

226
00:09:33,435 --> 00:09:35,484
Com isto, não precisamos neste caso

227
00:09:35,480 --> 00:09:36,573
nos preocupar que

228
00:09:36,570 --> 00:09:38,826
"definedFunctions" possa ser null

229
00:09:38,820 --> 00:09:40,257
apenas consideramos isto aqui,

230
00:09:40,250 --> 00:09:42,048
dizemos que se for "null":

231
00:09:42,040 --> 00:09:44,151
Então as nossas "definedFunctions" devem

232
00:09:44,150 --> 00:09:46,288
simplesmente ser um "empty set",

233
00:09:47,311 --> 00:09:50,124
dando um método prático de "emptySet"

234
00:09:50,120 --> 00:09:52,777
para retornar um Set vazio eficientemente

235
00:09:52,990 --> 00:09:54,973
e se não for "null",

236
00:09:54,970 --> 00:09:56,520
então apenas pegamos o Set,

237
00:09:56,520 --> 00:09:58,146
que nos foi passado.

238
00:10:00,013 --> 00:10:02,102
Assim, podemos agora retornar novamente

239
00:10:02,100 --> 00:10:04,017
na nossa "visitFunctionCall"

240
00:10:04,010 --> 00:10:06,275
e agora temos todos os dados disponíveis

241
00:10:06,270 --> 00:10:09,062
para criar no nosso "functionIsDefined"

242
00:10:09,062 --> 00:10:11,060
com algo que funcione.

243
00:10:11,542 --> 00:10:13,120
Observamos aqui também,

244
00:10:13,120 --> 00:10:15,311
no nosso "definedFunctions":

245
00:10:15,542 --> 00:10:19,977
Se este Set não contém:

246
00:10:19,970 --> 00:10:23,355
Uma entrada com nossa "function name",

247
00:10:23,350 --> 00:10:25,413
então a nossa função não está definida

248
00:10:25,410 --> 00:10:27,555
e nós queremos jogar um erro.

249
00:10:27,826 --> 00:10:29,657
Agora podemos executar o teste mais uma vez

250
00:10:29,650 --> 00:10:31,728
e olhamos se foi simplesmente

251
00:10:31,720 --> 00:10:33,200
e o teste já passa.

252
00:10:33,200 --> 00:10:35,751
E realmente: Ele funcionou!

253
00:10:36,053 --> 00:10:38,382
O teste executou com sucesso,

254
00:10:38,380 --> 00:10:39,688
imediatamente é

255
00:10:39,680 --> 00:10:42,333
jogada uma razoável mensagem de erro

256
00:10:42,330 --> 00:10:44,782
assim que chamamos uma função,

257
00:10:44,780 --> 00:10:46,631
que não está definida.

258
00:10:47,030 --> 00:10:48,595
Neste episódio nós aprendemos

259
00:10:48,590 --> 00:10:50,875
como podemos colocar em um visitor adicional

260
00:10:50,870 --> 00:10:54,106
para obter uma lista com todas a funções definidas.

261
00:10:54,100 --> 00:10:55,435
Além disso, aprendemos

262
00:10:55,430 --> 00:10:57,373
como configuramos a lista obtida para que

263
00:10:57,370 --> 00:11:00,115
produza uma mensagem de erro com significado

264
00:11:00,110 --> 00:11:01,524
se o programador buscar

265
00:11:01,520 --> 00:11:02,888
uma chamada de função que

266
00:11:02,880 --> 00:11:04,493
ainda não havia sido definida.

267
00:11:04,490 --> 00:11:05,400
Nos próximos episódios

268
00:11:05,400 --> 00:11:06,782
seremos capazes de expandir o sistema

269
00:11:06,780 --> 00:11:09,217
ao verificar que o número de parâmetros

270
00:11:09,210 --> 00:11:10,915
na chamada de função está correto

271
00:11:10,910 --> 00:11:13,697
e que nenhuma função foi duplamente definida.

272
00:11:13,690 --> 00:11:14,715
Até lá:

273
00:11:14,710 --> 00:11:16,680
Deixe seu comentário com suas perguntas,

274
00:11:16,680 --> 00:11:18,071
problemas e pedidos.

275
00:11:18,070 --> 00:11:20,235
Curta o vídeo se você gostou dele

276
00:11:20,230 --> 00:11:21,604
e assine o meu canal

277
00:11:21,600 --> 00:11:23,977
assim você não perde nenhum episódio novo.

278
00:11:24,151 --> 00:11:25,346
Muito obrigado ao Gadarol

279
00:11:25,340 --> 00:11:27,853
que me permitiu usar seu estúdio para as gravações

280
00:11:27,850 --> 00:11:30,253
e muito obrigado a vocês pela atenção.

281
00:11:30,250 --> 00:11:32,280
Voltaremos a estar juntos em um outro:

282
00:11:32,280 --> 00:11:34,280
"Let's build a compiler".


