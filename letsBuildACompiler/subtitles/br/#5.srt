1
00:00:00,000 --> 00:00:02,780
Bem-vindo de volta ao "Let's build a compiler".

2
00:00:02,780 --> 00:00:05,590
Neste episódio nós iremos gerar código instrucional

3
00:00:05,590 --> 00:00:07,430
que podemos executar de verdade.

4
00:00:07,430 --> 00:00:09,070
Meu nome é Yankee,

5
00:00:09,070 --> 00:00:12,080
Eu desejo muita diversão e junte-se a mim!

6
00:00:12,380 --> 00:00:14,980
Todo bytecode que é gerado, claro, é entediante

7
00:00:14,980 --> 00:00:16,660
se não podemos executá-lo.

8
00:00:16,660 --> 00:00:19,060
Isso é porque eu irei mostrar a seguir

9
00:00:19,060 --> 00:00:20,660
como fazer isto de verdade.

10
00:00:20,660 --> 00:00:21,950
Para fazer isso nós precisamos de Jasmin

11
00:00:21,950 --> 00:00:25,320
que você pode baixar em jasmin.sourceforge.net.

12
00:00:25,320 --> 00:00:27,320
Vá lá e baixe

13
00:00:28,170 --> 00:00:29,890
então aqui no próximo "download"

14
00:00:29,890 --> 00:00:31,310
então pegue o arquivo zip.

15
00:00:31,310 --> 00:00:33,470
Eu já o baixei aqui.

16
00:00:33,470 --> 00:00:36,460
No arquivo zip temos o "jasmin.jar".

17
00:00:36,460 --> 00:00:39,610
Este é o único arquivo do zip que vamos precisar.

18
00:00:39,610 --> 00:00:43,850
Extraia-o em algum lugar que você não irá esquecer

19
00:00:46,170 --> 00:00:49,960
que no meu caso é o diretório "lib"

20
00:00:49,960 --> 00:00:53,090
no "compiler", próximo ao meu atlr.jar.

21
00:00:53,090 --> 00:00:56,120
E então podemos criar um arquivo exemplo

22
00:00:56,120 --> 00:00:58,080
com instruções para compilar

23
00:00:58,080 --> 00:00:59,450
e executar.

24
00:00:59,450 --> 00:01:01,670
Para isso, criarei um novo arquivo de texto

25
00:01:01,670 --> 00:01:05,150
que eu chamo de "HelloWorld.j"

26
00:01:06,690 --> 00:01:08,880
e dentro deste arquivo

27
00:01:08,880 --> 00:01:12,300
nós declaramos uma classe Java

28
00:01:14,760 --> 00:01:17,010
que é chamada de "HelloWorld"

29
00:01:17,790 --> 00:01:25,870
e que deriva do java.lang.Object

30
00:01:26,490 --> 00:01:29,830
e que tem um método

31
00:01:31,880 --> 00:01:35,500
que é público, estático, chamado main,

32
00:01:35,500 --> 00:01:38,420
que pega como argumentos um array

33
00:01:38,420 --> 00:01:39,840
do tipo objeto,

34
00:01:39,840 --> 00:01:46,210
do tipo java.lang.String,

35
00:01:46,820 --> 00:01:50,880
que na volta, não tem tipo de retorno

36
00:01:54,190 --> 00:01:58,610
com uma pilha limite de 100

37
00:01:58,610 --> 00:02:01,080
e que tem um limite para

38
00:02:01,080 --> 00:02:04,930
nossa tabela local variável de 100.

39
00:02:07,630 --> 00:02:09,800
Aqui o método termina.

40
00:02:10,880 --> 00:02:12,450
Nós podemos indentar esta parte um pouco

41
00:02:12,450 --> 00:02:14,050
assim podemos ler melhor.

42
00:02:14,730 --> 00:02:16,150
A maioria dos elementos aqui vistos

43
00:02:16,150 --> 00:02:17,470
podem ser explicados depois em mais detalhe,

44
00:02:17,470 --> 00:02:18,850
por exemplo, o exato formato

45
00:02:18,850 --> 00:02:20,810
para os argumentos,

46
00:02:20,810 --> 00:02:22,920
quais tipos nós temos a mais,

47
00:02:22,920 --> 00:02:24,150
e quais são os limites.

48
00:02:27,230 --> 00:02:29,820
Mas, agora, é suficiente para

49
00:02:29,820 --> 00:02:31,210
podemos executar algo.

50
00:02:32,260 --> 00:02:34,100
Para simplesmente imprimir

51
00:02:34,310 --> 00:02:37,170
42 no console

52
00:02:37,170 --> 00:02:39,100
nós podemos escrever isso em Java,

53
00:02:39,100 --> 00:02:40,710
como um exemplo simples aqui:

54
00:02:40,710 --> 00:02:46,160
"System.out.println(42);".

55
00:02:47,050 --> 00:02:49,620
Se nós queremos expressar isto no Jasmin,

56
00:02:49,620 --> 00:02:51,910
então primeiro precisamos que o objeto

57
00:02:51,910 --> 00:02:54,750
ficar escondido no "System.out"

58
00:02:54,750 --> 00:02:56,520
e nós precisamos colocá-lo na pilha.

59
00:02:56,520 --> 00:02:59,130
Nós fazemos isso chamando

60
00:02:59,130 --> 00:03:00,740
getstatic

61
00:03:02,150 --> 00:03:09,060
java/lang/System/out.

62
00:03:09,450 --> 00:03:13,460
"System/out" aqui é o "System.out",

63
00:03:13,460 --> 00:03:16,760
o "java/lang" usualmente não precisa ser especificado

64
00:03:16,760 --> 00:03:18,910
no Java mas este é o

65
00:03:18,910 --> 00:03:22,640
nome completo do pacote da classe "System".

66
00:03:23,140 --> 00:03:27,010
O tipo deste objeto também deve ser especificado.

67
00:03:27,010 --> 00:03:29,420
Nós fazemos isto ao escrever:

68
00:03:29,420 --> 00:03:32,300
"L" para "é um objeto" e

69
00:03:32,300 --> 00:03:35,360
então um nome de classe totalmente qualificado

70
00:03:35,610 --> 00:03:43,140
que é "java/io/PrintStream".

71
00:03:49,210 --> 00:03:51,010
Então nós precisamos de um literal,

72
00:03:51,010 --> 00:03:53,640
aqui está o 42 que nós colocamos na pilha,

73
00:03:53,640 --> 00:03:55,510
para que possamos imprimi-lo

74
00:03:56,380 --> 00:03:59,320
Para fazer isto escrevemos "ldc 42".

75
00:04:00,760 --> 00:04:04,040
E agora nós precisamos chamar o método println.

76
00:04:04,040 --> 00:04:05,180
Que simplesmente funciona desta forma:

77
00:04:05,180 --> 00:04:08,900
Usando "invokevirtual".

78
00:04:10,350 --> 00:04:13,650
E então nós infelizmente precisamos especificar o caminho inteiro novamente

79
00:04:13,650 --> 00:04:16,320
do método que nós queremos chamar.

80
00:04:16,320 --> 00:04:20,200
Isto é, java/io/PrintStream.

81
00:04:21,080 --> 00:04:24,200
O método é "println"

82
00:04:24,200 --> 00:04:27,810
nos quais os argumento levam um inteiro

83
00:04:28,500 --> 00:04:31,140
e não têm valor de retorno.

84
00:04:31,860 --> 00:04:34,070
Então precisamos um "return"

85
00:04:34,070 --> 00:04:36,470
para indicar que o método termina aqui.

86
00:04:36,470 --> 00:04:37,810
Você não precisa disto no Java

87
00:04:37,810 --> 00:04:39,370
se ele é um método void

88
00:04:39,370 --> 00:04:41,680
mas no código de instrução

89
00:04:41,680 --> 00:04:43,610
o retorno deve sempre estar presente.

90
00:04:43,930 --> 00:04:46,160
As linhas vazias não são para a legibilidade apenas.

91
00:04:46,960 --> 00:04:48,400
Então podemos compilar

92
00:04:48,400 --> 00:04:51,150
o arquivo para uma classe Java

93
00:04:51,150 --> 00:04:52,470
e executá-lo.

94
00:04:56,170 --> 00:04:58,290
Para que nós simplesmente chamemos:

95
00:04:58,290 --> 00:05:03,210
"java -jar lib/jarmin.jar",

96
00:05:03,210 --> 00:05:04,600
porque essa é a localização onde se encontra no meu sistema,

97
00:05:04,600 --> 00:05:05,580
se estiver em outra localização

98
00:05:05,580 --> 00:05:07,370
precisamos adaptar o caminho

99
00:05:07,370 --> 00:05:10,600
e então passaremos nosso arquivo HelloWorld.j como um argumento.

100
00:05:11,100 --> 00:05:14,550
Que gera um HelloWorld.class.

101
00:05:14,550 --> 00:05:16,080
Como você pode ver, nós temos aqui

102
00:05:16,080 --> 00:05:17,930
o arquivo .j e o arquivo .class

103
00:05:17,930 --> 00:05:20,690
e nós podemos executar o arquivo .class

104
00:05:20,690 --> 00:05:24,990
chamando "java HelloWorld" sem o ".class".

105
00:05:25,180 --> 00:05:28,300
Como você pode ver: Ele imprime 42.

106
00:05:29,260 --> 00:05:30,980
Então agora podemos gerar este tipo de classes

107
00:05:30,980 --> 00:05:32,980
automaticamente como nosso próximo passo?

108
00:05:32,980 --> 00:05:35,300
Para esta curta revisão

109
00:05:35,300 --> 00:05:38,000
o arquivo .j que eu criei:

110
00:05:39,420 --> 00:05:43,050
Aqui você vê que primeiro

111
00:05:43,050 --> 00:05:45,010
objetos são postos na pilha

112
00:05:45,010 --> 00:05:47,140
nos quais nós queremos chamar um método.

113
00:05:47,140 --> 00:05:49,150
Nós queremos chamar um objeto

114
00:05:49,150 --> 00:05:50,600
que veio daqui

115
00:05:50,600 --> 00:05:52,600
(amplio para que eu possa ver tudo)

116
00:05:52,970 --> 00:05:54,980
o método "println".

117
00:05:55,620 --> 00:05:58,540
Esta instrução, o "invokevirtual"

118
00:05:58,540 --> 00:06:02,470
leva tantos elementos da pilha

119
00:06:02,470 --> 00:06:04,700
quantos necessários como parâmetros

120
00:06:04,700 --> 00:06:06,830
mais um para o objeto

121
00:06:06,830 --> 00:06:08,990
do qual o método é invocado.

122
00:06:09,390 --> 00:06:11,610
Isto significa: O método aqui pega

123
00:06:11,610 --> 00:06:13,610
um parâmetro passado,

124
00:06:13,610 --> 00:06:16,200
que é removido da pilha, o 42,

125
00:06:16,200 --> 00:06:19,890
e então remove outro elemento da pilha

126
00:06:19,890 --> 00:06:23,360
que é o objeto no qual é chamado

127
00:06:23,360 --> 00:06:24,860
o método "println".

128
00:06:24,860 --> 00:06:27,580
E esse é o nosso "java/lang/System/out".

129
00:06:28,050 --> 00:06:32,080
Praticamente isso significa que para o que temos feito até agora:

130
00:06:32,080 --> 00:06:35,150
Podemos simplesmente substituir o "ldc 42"

131
00:06:35,150 --> 00:06:38,570
com as instruções que geramos

132
00:06:38,570 --> 00:06:41,120
e poderíamos então terminar com o resultado

133
00:06:41,120 --> 00:06:44,300
da nossa atual adição simples, no topo da pilha

134
00:06:44,300 --> 00:06:48,130
e podemos então apenas imprimi-lo.

135
00:06:48,130 --> 00:06:50,300
E isto é o que nós iremos fazer a seguir.

136
00:06:51,980 --> 00:06:54,360
Para isso, necessitamos adaptar o nosso compilador

137
00:06:54,360 --> 00:06:56,040
para que ele, não simplesmente,

138
00:06:56,040 --> 00:06:57,370
imprima as instruções.

139
00:06:57,370 --> 00:06:58,770
Para relembrar:

140
00:06:58,770 --> 00:07:02,110
No momento em que a saída do programa se assemelha com o que segue:

141
00:07:02,110 --> 00:07:05,140
... mas o

142
00:07:05,140 --> 00:07:08,310
esqueleto inteiro que o jasmin requer

143
00:07:08,310 --> 00:07:09,900
precisa permear nossas instruções.

144
00:07:09,900 --> 00:07:11,980
E isto aqui deve agora

145
00:07:11,980 --> 00:07:15,870
estar no arquivo em vez de "ldc 42".

146
00:07:16,290 --> 00:07:17,180
Então, o que iremos fazer?

147
00:07:17,180 --> 00:07:19,730
Nós simplesmente copiamos o arquivo inteiro

148
00:07:19,730 --> 00:07:21,510
na área de cópia do sistema

149
00:07:21,970 --> 00:07:24,710
e então criamos um pequeno método ajudante,

150
00:07:32,060 --> 00:07:35,950
que recebe nossas instruções como argumentos.

151
00:07:43,170 --> 00:07:44,990
Nós simplesmente escrevemos aqui

152
00:07:44,990 --> 00:07:50,270
"return" e colamos o arquivo jasmin inteiro,

153
00:07:50,270 --> 00:07:51,670
nosso arquivo exemplo.

154
00:07:52,410 --> 00:07:54,130
Então você deve falar:

155
00:07:54,130 --> 00:07:55,600
Ei, como você fez isso ao

156
00:07:55,600 --> 00:07:57,520
colar tudo aqui

157
00:07:57,520 --> 00:07:59,110
inclusive as novas linhas.

158
00:07:59,110 --> 00:08:00,210
Se você quer fazer isto

159
00:08:00,210 --> 00:08:03,300
então você precisa ir em "Window" -> "Preferences" no Eclipse

160
00:08:03,300 --> 00:08:05,940
e então selecionar "Java"->"Editor"->"Typing"

161
00:08:05,940 --> 00:08:09,360
e ativar "Escape text when pasting into a string literal".

162
00:08:10,830 --> 00:08:12,070
Agora nós queremos aqui

163
00:08:12,070 --> 00:08:14,260
em vez do "ldc 42"

164
00:08:14,770 --> 00:08:17,190
inserir nossas instruções

165
00:08:19,970 --> 00:08:22,710
e então nosso pequeno método ajudante está finalizado.

166
00:08:23,230 --> 00:08:27,310
E aqui nós iremos, antes de imprimir

167
00:08:27,310 --> 00:08:32,420
inserir uma chamada "createJasminFile".

168
00:08:34,970 --> 00:08:37,560
Agora eu executarei o compilador novamente

169
00:08:38,430 --> 00:08:40,060
e como você pode ver

170
00:08:41,340 --> 00:08:44,390
nós temos nossa descrição jasmin

171
00:08:44,390 --> 00:08:47,690
e aqui temos nossas instruções geradas.

172
00:08:47,690 --> 00:08:50,210
É claro, as instruções não estão totalmente corretas ainda,

173
00:08:50,210 --> 00:08:53,310
então temos que consertá-las após.

174
00:08:53,640 --> 00:08:55,870
Para isto nós iremos para o visitor

175
00:08:56,520 --> 00:08:59,040
e em vez de "addition" usamos

176
00:08:59,040 --> 00:09:02,780
"iadd" por causa que é uma instrução correta para adição.

177
00:09:03,290 --> 00:09:06,130
E em vez de apenas o número

178
00:09:06,130 --> 00:09:09,100
precisamos inserir o prefixo "ldc"

179
00:09:09,880 --> 00:09:11,050
(para a "load constant").

180
00:09:12,790 --> 00:09:15,940
Então nós executamos o negócio todo novamente

181
00:09:18,250 --> 00:09:20,710
e como você pode ver eu esqueci do "ldc" aqui.

182
00:09:20,710 --> 00:09:23,130
Ele apenas considerou aqui

183
00:09:24,450 --> 00:09:26,760
para que precisemos adicioná-lo

184
00:09:26,760 --> 00:09:29,540
neste local

185
00:09:37,880 --> 00:09:39,510
e então executamos de novo

186
00:09:40,720 --> 00:09:43,790
e agora nós temos nossa descrição jasmin completa

187
00:09:43,790 --> 00:09:45,580
que parece certa.

188
00:09:45,580 --> 00:09:49,070
Sim, a indentação não está bonita

189
00:09:49,070 --> 00:09:51,070
mas isso não necessariamente nos atrapalha.

190
00:09:51,480 --> 00:09:53,400
A seguir, nós copiamos a

191
00:09:53,400 --> 00:09:57,320
descrição de classe jasmin gerada,

192
00:09:58,050 --> 00:10:00,350
e salvamos para um arquivo texto.

193
00:10:00,350 --> 00:10:02,140
Ele simplesmente o sobrescreve

194
00:10:02,140 --> 00:10:04,860
sobre nosso exemplo HelloWorld

195
00:10:06,810 --> 00:10:09,130
então nós compilamos novamente

196
00:10:09,130 --> 00:10:11,460
para uma classe Java

197
00:10:14,900 --> 00:10:17,360
e então executamos para uma classe Java.

198
00:10:20,280 --> 00:10:21,970
O resultado é 56.

199
00:10:21,970 --> 00:10:24,970
Agora queremos checar se está realmente correto.

200
00:10:25,770 --> 00:10:29,510
Para que tenhamos uma visão sobre o código

201
00:10:29,510 --> 00:10:30,420
e ali lê-se:

202
00:10:30,420 --> 00:10:33,350
"3+42" que é 45

203
00:10:33,600 --> 00:10:37,050
mais 5

204
00:10:37,050 --> 00:10:37,960
então estamos com 50,

205
00:10:37,960 --> 00:10:40,480
mais 6 então, ficamos com 56.

206
00:10:41,020 --> 00:10:42,480
Assim sendo, está correto.

207
00:10:43,420 --> 00:10:45,340
Aqui novamente, o processo inteiro que criamos

208
00:10:45,340 --> 00:10:46,570
em uma revisão.

209
00:10:46,570 --> 00:10:49,260
Durante os próximos vídeos nós iremos afinar os ajustes ainda mais.

210
00:10:49,260 --> 00:10:51,960
Nós começamos com uma gramática,

211
00:10:51,960 --> 00:10:53,960
nossa gramática demo.

212
00:10:54,300 --> 00:10:56,590
A partir desta gramática ANTLR

213
00:10:56,590 --> 00:10:58,900
foi gerado um lexer e um parser para nós,

214
00:10:59,660 --> 00:11:02,660
então alimentamos o lexer e o parser

215
00:11:02,660 --> 00:11:05,540
com um programa de entrada

216
00:11:05,870 --> 00:11:08,920
que resultou em uma árvore de sintaxe.

217
00:11:09,420 --> 00:11:11,560
A partir dessa árvore criamos

218
00:11:11,560 --> 00:11:14,910
com a ajuda do nosso código de instrução do visitor

219
00:11:16,550 --> 00:11:18,560
Então criamos a partir do código de instrução,

220
00:11:18,560 --> 00:11:22,640
com a ajuda do jasmin, um arquivo java .class.

221
00:11:23,290 --> 00:11:27,530
E finalmente, executamos este arquivo usando uma JVM

222
00:11:27,530 --> 00:11:30,040
que finalizou com um resultado.

223
00:11:30,040 --> 00:11:31,700
Durante os próximos vídeos

224
00:11:31,700 --> 00:11:33,610
nós desenvolveremos testes

225
00:11:33,610 --> 00:11:35,870
e daremos mais controle para a linguagem

226
00:11:35,870 --> 00:11:39,300
para que possamos fazer mais coisas do que imprimir um simples número.

227
00:11:39,300 --> 00:11:41,360
Deixem suas questões e seu feedback

228
00:11:41,360 --> 00:11:43,360
na forma de comentários e curtidas

229
00:11:43,360 --> 00:11:45,410
e não esqueça de inscrever-se

230
00:11:45,410 --> 00:11:47,590
para que você nunca perca um episódio novo.

231
00:11:48,280 --> 00:11:52,310
Obrigado ao Gadarol, que permitiu usar seu estúdio para estas gravações.

232
00:11:52,400 --> 00:11:53,760
Meu nome é Yankee,

233
00:11:53,760 --> 00:11:55,220
Espero que tenham se divertido,

234
00:11:55,220 --> 00:11:57,020
obrigado pela sua atenção

235
00:11:57,020 --> 00:11:58,580
adeus e até a próxima

236
00:11:58,580 --> 00:12:01,590
para o próximo episódio de "Let's build a compiler".

