1
00:00:00,000 --> 00:00:03,070
Bem-vindo de volta ao "Let's build a compiler".

2
00:00:03,070 --> 00:00:05,100
No último episódio construímos com sucesso

3
00:00:05,100 --> 00:00:09,050
os operadores menos, mais e divisão para a nossa linguagem.

4
00:00:09,050 --> 00:00:10,640
Infelizmente, contudo, ainda há problemas,

5
00:00:10,640 --> 00:00:13,510
como nós temos associações uns com os outros.

6
00:00:13,510 --> 00:00:19,570
Por exemplo, o resultado de "2 + 3 * 3" foi 15, em vez do esperado 11.

7
00:00:19,570 --> 00:00:22,590
Neste episódio veremos por que isto está assim

8
00:00:22,590 --> 00:00:26,740
e expandiremos o nosso compilador, para que ele resolva este problema.

9
00:00:26,740 --> 00:00:30,390
Meu nome é Yankee e espero que você se divirta.

10
00:00:31,490 --> 00:00:33,840
Agora, para entendermos do que se trata o problema

11
00:00:33,840 --> 00:00:36,840
queremos mais uma vez gerar a árvore do ANTLR

12
00:00:36,840 --> 00:00:39,900
para permitir ver "2+3*3".

13
00:00:39,900 --> 00:00:41,830
Para isso vamos ao console,

14
00:00:41,830 --> 00:00:44,630
vamos no diretório do nosso parser,

15
00:00:44,630 --> 00:00:49,590
pegando novamente o comando TestRig da última vez

16
00:00:49,940 --> 00:00:59,950
e então executaremos "println(2+3*3);",

17
00:00:59,950 --> 00:01:03,760
então Ctrl+D no Linux, Ctrl+Z no Windows

18
00:01:03,760 --> 00:01:07,430
e então deixamos mostrar a árvore.

19
00:01:08,900 --> 00:01:11,100
Assim, aqui você pode ver nosso primeiro programa:

20
00:01:11,100 --> 00:01:14,530
Ele tem um "println" com uma "expression"

21
00:01:14,530 --> 00:01:20,690
e essa "expression" daqui consiste em uma multiplicação e uma adição.

22
00:01:20,690 --> 00:01:24,550
Você vê nela, que a adição continua abaixo na nossa árvore,

23
00:01:24,550 --> 00:01:26,790
se tornou prioridade.

24
00:01:26,790 --> 00:01:29,880
Isto é, quando percorremos em pós-ordem

25
00:01:29,880 --> 00:01:35,900
então teríamos 2, 3, mais, 3, vezes.

26
00:01:35,900 --> 00:01:40,080
Por azar, infelizmente isto não foi o que a gente queria.

27
00:01:40,080 --> 00:01:42,360
Nós podemos agora consertar este problema?       

28
00:01:42,360 --> 00:01:46,790
Para isso, primeiro vamos ver novamente na nossa gramática

29
00:01:46,790 --> 00:01:49,750
e pensarmos no que deveria acontecer de verdade.

30
00:01:49,750 --> 00:01:53,620
Temos aqui a expressão "2+3*3".

31
00:01:53,620 --> 00:01:58,060
e queremos que isso seja tratado como se fosse "2+9".

32
00:01:58,060 --> 00:02:04,070
Isto significa que temos primeiro o 2, então um "NUMBER"

33
00:02:04,070 --> 00:02:09,060
e então temos um mais. Ele também é aqui a regra de cima

34
00:02:09,060 --> 00:02:12,970
e então vem do lado direto a partir do cálculo do mais,

35
00:02:12,970 --> 00:02:15,500
de novo, também, com uma expressão "vezes".

36
00:02:15,500 --> 00:02:17,780
Maldição, nós infelizmente não permitimos,

37
00:02:17,780 --> 00:02:20,940
a parte direita aqui só pode no momento ser um "NUMBER".

38
00:02:20,940 --> 00:02:22,620
O que faremos então?

39
00:02:22,620 --> 00:02:26,690
Invés de "NUMBER" passamos aqui sempre junto uma "expression",

40
00:02:26,690 --> 00:02:29,080
assim a parte direita do nosso mais

41
00:02:29,080 --> 00:02:33,960
pode ser uma "expression" e um outro "vezes" também.

42
00:02:33,960 --> 00:02:37,440
Isto naturalmente não é a única coisa que mudou

43
00:02:37,440 --> 00:02:38,810
isto aqui permite um "vezes",

44
00:02:38,810 --> 00:02:42,910
se eu mudar esta parte da gramática da "expression" para a parte direita,

45
00:02:42,910 --> 00:02:45,690
então temos agora por aqui, não mais simplesmente

46
00:02:45,690 --> 00:02:47,760
apenas um Token dentro sobre o nosso rótulo "right",

47
00:02:47,760 --> 00:02:50,750
mas também outra "expression".

48
00:02:50,750 --> 00:02:52,230
Isso naturalmente continua OK,

49
00:02:52,230 --> 00:02:55,950
porque nossa parte direita também pode simplesmente ser apenas um "NUMBER",

50
00:02:55,950 --> 00:02:59,430
mas por isso devemos adaptar o nosso visitor.

51
00:02:59,430 --> 00:03:02,820
Chamamos agora para gerar na próxima vez 

52
00:03:02,820 --> 00:03:05,840
a partir do nosso diretório "grammar"

53
00:03:05,840 --> 00:03:08,670
nosso parser novo, 

54
00:03:10,930 --> 00:03:14,500
então vamos no parser dentro do eclipse com "F5",

55
00:03:15,220 --> 00:03:17,770
então abrimos nosso visitor

56
00:03:17,770 --> 00:03:19,740
e então fazemos os ajustes nele.

57
00:03:19,740 --> 00:03:23,010
Agora ele está assim, junto dos nossos métodos

58
00:03:23,010 --> 00:03:24,670
anteriores de visita que nós temos aqui,

59
00:03:24,670 --> 00:03:27,360
também com o exemplo "visitPlus"

60
00:03:27,360 --> 00:03:31,190
o "visitChildren" também pode nos retornar um "ldc".

61
00:03:31,190 --> 00:03:34,710
Porque nós temos aqui embaixo um método "visitNumber"

62
00:03:34,710 --> 00:03:37,190
e ele já nos fornece o "ldc".

63
00:03:37,190 --> 00:03:39,140
Isto é muito elegante, porque significa que

64
00:03:39,140 --> 00:03:42,350
nós não devemos mais fornecer o "ldc" aqui.

65
00:03:42,350 --> 00:03:46,980
Isto já vem do "visitChildren" aqui para nós e depois abaixo.

66
00:03:46,980 --> 00:03:50,680
Nós removemos também este "ldc" de todos os lugares

67
00:03:59,750 --> 00:04:03,350
e então executamos nosso teste mais uma vez.

68
00:04:05,880 --> 00:04:08,790
E ele tem consigo que nada se alterou:

69
00:04:08,790 --> 00:04:10,370
Todos os testes antigos ainda funcionam,

70
00:04:10,370 --> 00:04:12,680
os novos ainda continuam a não funcionar.

71
00:04:13,060 --> 00:04:14,650
Aonde eles estão?

72
00:04:15,660 --> 00:04:18,710
Vemos mais uma vez a nossa gramática:

73
00:04:18,710 --> 00:04:24,890
Nós queremos continuar agora o 2+3 para que seja avaliado

74
00:04:24,890 --> 00:04:30,400
o mais que retorna e a parte direita de multiplicação.

75
00:04:30,400 --> 00:04:35,060
Sim, rodou desengonçadamente, o ANTLR aceita o fato ao contrário:

76
00:04:35,060 --> 00:04:37,150
ANTLR começa com o fato que diz:

77
00:04:37,150 --> 00:04:40,080
Eu tenho aqui uma multiplicação primeiro

78
00:04:40,080 --> 00:04:44,460
e essa multiplicação tem o filho a esquerda "2+3"

79
00:04:44,460 --> 00:04:48,630
e então na direita, apenas o 3.

80
00:04:48,630 --> 00:04:50,570
E quando nós olhamos direito dentro da gramática,

81
00:04:50,570 --> 00:04:53,290
então vemos também: verdadeiramente, ela é ambigua,

82
00:04:53,290 --> 00:04:55,290
isso pode ser visto assim ou assim.

83
00:04:55,290 --> 00:04:58,460
Como é que o ANTLR nos leva para este caso?

84
00:04:58,460 --> 00:05:02,570
Ele sempre pega a primeira regra acima.

85
00:05:02,570 --> 00:05:06,430
A regra acima também tem maior prioridade.

86
00:05:06,430 --> 00:05:08,280
E temos conosco no momento:

87
00:05:08,280 --> 00:05:10,600
O mais tem maior prioridade.

88
00:05:10,600 --> 00:05:12,360
Isso naturalmente é estúpido,

89
00:05:12,360 --> 00:05:15,110
então nós queremos reverter isso.

90
00:05:15,110 --> 00:05:17,640
O operador de multiplicação deve

91
00:05:17,640 --> 00:05:20,190
ter prioridade mais alta do que o mais.

92
00:05:20,190 --> 00:05:23,750
Também devemos trocar ambas as regras.

93
00:05:29,700 --> 00:05:34,500
Então geramos novamente nosso novo parser,

94
00:05:36,620 --> 00:05:39,250
vamos aqui com "F5"

95
00:05:39,250 --> 00:05:42,310
e executamos os nossos testes.

96
00:05:43,830 --> 00:05:45,120
Então o que dizem os testes?

97
00:05:45,120 --> 00:05:46,770
Verdadeiramente, não funcionou,

98
00:05:46,770 --> 00:05:49,280
ele agora sugere que apenas falta mais um teste,

99
00:05:49,280 --> 00:05:53,470
o teste "8/2*4".

100
00:05:53,470 --> 00:05:55,810
Uma coisa que vocês devem ter prestado atenção,

101
00:05:55,810 --> 00:05:58,550
é que a divisão naturalmente deveria

102
00:05:58,550 --> 00:06:03,420
ter uma prioridade maior do que a subtração.

103
00:06:03,900 --> 00:06:06,430
Mas isso não é tudo.

104
00:06:06,430 --> 00:06:09,490
Porque no teste aqui abaixo, a sugestão de erro

105
00:06:09,490 --> 00:06:11,930
não retorna nenhuma subtração. 

106
00:06:11,930 --> 00:06:16,150
Isso também não pode ser um problema para o teste aqui representado.

107
00:06:16,150 --> 00:06:19,900
O verdadeiro problema para o nosso teste vem logo após,

108
00:06:19,900 --> 00:06:22,550
pois a multiplicação e divisão são

109
00:06:22,550 --> 00:06:27,230
vistos no mesmo nível do nosso ranking de operadores.

110
00:06:27,230 --> 00:06:29,100
Nós podemos agora escrever aqui:

111
00:06:29,100 --> 00:06:32,640
"Vezes ou Divisão",

112
00:06:32,640 --> 00:06:35,870
e junto aos operadores estabelecer o mesmo peso

113
00:06:35,870 --> 00:06:38,470
e verdadeiramente estaria o ANTLR neste caso

114
00:06:38,470 --> 00:06:41,640
resolvendo os operadores da esquerda para a direita

115
00:06:41,640 --> 00:06:43,220
e fazendo direito.

116
00:06:43,220 --> 00:06:46,490
Mas nós não podemos mais trabalhar tão bem com os nossos labels.

117
00:06:46,490 --> 00:06:48,810
Quando nós queremos passar adiante os labels em que trabalhamos,

118
00:06:48,810 --> 00:06:51,480
nós devemos pensar de outra forma.

119
00:06:52,470 --> 00:06:55,480
Uma forma possível para isso seria:

120
00:06:55,480 --> 00:07:01,270
Simplesmente estabelecer a divisão na frente do multiplicador na prioridade.

121
00:07:01,270 --> 00:07:03,390
Então tudo se parece assim.

122
00:07:05,090 --> 00:07:09,980
E agora nós respectivamente avaliamos a divisão antes da multiplicação

123
00:07:09,980 --> 00:07:13,300
e a subtração antes da adição.

124
00:07:13,300 --> 00:07:14,900
Isso também funcionará?

125
00:07:14,900 --> 00:07:17,540
Aqui mais uma vez um exemplo disso:

126
00:07:17,540 --> 00:07:23,130
Digamos que: nós tenhamos "2*8/4" como refrativo.

127
00:07:23,130 --> 00:07:28,020
Então independente da vontade, se quisermos calcular desta forma:

128
00:07:28,020 --> 00:07:31,160
"2*8" são 16, dividido por 4 são 4.

129
00:07:31,160 --> 00:07:35,720
Ou se digamos: "2*(8/4)"

130
00:07:35,720 --> 00:07:38,360
e calculamos primeiro o "8/4",

131
00:07:38,360 --> 00:07:43,260
porque no caso seriam "8/4" 2 e "2*2" continua sendo 4.

132
00:07:43,260 --> 00:07:46,520
Portanto permanece que o operador de multiplicação,

133
00:07:46,520 --> 00:07:51,150
em contraste com o operador de divisão, é comutativo.

134
00:07:53,580 --> 00:07:55,400
Provaremos mais uma vez que

135
00:07:55,400 --> 00:08:01,010
se com esta ordem de operadores o teste agora passa.

136
00:08:01,010 --> 00:08:04,670
Nós geramos também nosso parser novo,

137
00:08:05,950 --> 00:08:08,220
vamos aqui com "F5"

138
00:08:08,220 --> 00:08:11,570
e deixamos rodar o nosso teste.

139
00:08:14,960 --> 00:08:17,390
E Hurra, ele diz que tudo está verde,

140
00:08:17,390 --> 00:08:20,760
todos os nossos testes funcionaram.

141
00:08:20,760 --> 00:08:23,720
Apenas mais uma ver para demonstração eu agora irei

142
00:08:23,720 --> 00:08:27,610
mostrar para vocês a árvore, como ela se parece.

143
00:08:28,140 --> 00:08:31,970
Nós pegamos novamente o nosso TestRig também,

144
00:08:31,970 --> 00:08:35,780
vamos primeiro na pasta com nosso parser

145
00:08:35,780 --> 00:08:39,260
e extraímos o TestRig,

146
00:08:39,730 --> 00:08:41,660
agora dando de novo um:

147
00:08:41,660 --> 00:08:46,850
"println(2+3*3)"

148
00:08:49,130 --> 00:08:51,690
e ele nos mostra a árvore.

149
00:08:53,190 --> 00:08:54,500
Como você vê:

150
00:08:54,500 --> 00:08:57,930
Agora é o "mais" que continua no topo, o vezes continua embaixo

151
00:08:57,930 --> 00:09:01,510
e as coisas que estão mais abaixo são as que primeiro são calculadas,

152
00:09:01,510 --> 00:09:03,680
como nós resolvemos a árvore de baixo para cima,

153
00:09:03,680 --> 00:09:08,250
como calculamos "3*3" e só então "+2".

154
00:09:09,170 --> 00:09:10,800
Neste episódio aprendemos,

155
00:09:10,800 --> 00:09:13,750
como podemos escrever nossas regras de parser para cálculos,

156
00:09:13,750 --> 00:09:16,340
para ainda pelo cálculo em cadeia detectar quaisquer

157
00:09:16,340 --> 00:09:19,140
expressões complexas com os operadores a mais.

158
00:09:19,140 --> 00:09:20,810
Ainda aprendemos, que através

159
00:09:20,810 --> 00:09:22,330
com a ordem das subregras

160
00:09:22,330 --> 00:09:25,400
o ranking de operadores pode alterar a precedência.

161
00:09:25,400 --> 00:09:28,220
Quais características você gostaria de ver a seguir?

162
00:09:28,220 --> 00:09:30,210
Quais perguntas e sugestões você tem?

163
00:09:30,210 --> 00:09:32,850
Sobre quais problemas e soluções você se deparou,

164
00:09:32,850 --> 00:09:35,210
ao trabalhar com um compilador?

165
00:09:35,210 --> 00:09:37,240
Me escreva nos comentários!

166
00:09:37,240 --> 00:09:39,770
Não deixem de curtir, se vocês gostaram do vídeo

167
00:09:39,770 --> 00:09:43,750
e inscreva-se no canal, assim você não perde nenhum episódio.

168
00:09:43,750 --> 00:09:45,030
Muito obrigado ao Gadarol,

169
00:09:45,030 --> 00:09:47,850
que me permitiu fazer as gravações no seu estúdio.

170
00:09:47,850 --> 00:09:50,280
Muito obrigado a vocês pela atenção,

171
00:09:50,280 --> 00:09:52,590
adeus e até a próxima,

172
00:09:52,590 --> 00:09:56,020
para o próximo episódio de: "Let's build a compiler".

