1
00:00:00,000 --> 00:00:02,990
Bem-vindo de volta ao "Let's build a compiler".

2
00:00:02,990 --> 00:00:06,160
Neste episódio nós iremos melhorar o visitor

3
00:00:06,160 --> 00:00:09,060
do último episódio com legibilidade e utilidade.

4
00:00:09,060 --> 00:00:12,510
Meu nome é Yankee e espero que vocês curtam

5
00:00:13,470 --> 00:00:16,220
Nosso visitor está fazendo até o momento o que deveria

6
00:00:16,220 --> 00:00:18,660
mas não está fazendo de maneira legível.

7
00:00:18,660 --> 00:00:22,360
Aqui nós temos "ctx.getChildCount()==1"

8
00:00:22,360 --> 00:00:24,360
Mas o que isto pode nos dizer?

9
00:00:24,490 --> 00:00:26,810
É claro que quando eu retiro uma árvore

10
00:00:26,810 --> 00:00:27,980
então pode-se ver:

11
00:00:27,980 --> 00:00:31,990
Algumas vezes um nó de edição pode ter apenas um filho

12
00:00:32,350 --> 00:00:33,990
e algumas vezes ele tem três filhos.

13
00:00:34,290 --> 00:00:36,550
Aqui nós manipulamos o caso para um filho

14
00:00:36,550 --> 00:00:38,530
e se você tiver a árvore a sua frente, você

15
00:00:38,530 --> 00:00:40,530
pode ver qual ideia é

16
00:00:41,090 --> 00:00:43,520
mas se não for realmente fácil de entender

17
00:00:43,520 --> 00:00:46,200
e consome muito tempo para ficar explicando tudo de novo.

18
00:00:46,200 --> 00:00:48,700
Se seu visitor alcança grandes tamanhos

19
00:00:48,700 --> 00:00:51,320
e nossa linguagem tem mais e mais elementos

20
00:00:51,320 --> 00:00:53,510
então isso será bem mais difícil para nós

21
00:00:53,510 --> 00:00:56,600
mantermos em mente o que nosso código significa.

22
00:00:56,600 --> 00:00:59,430
O mesmo é verdade para context.getChild(0)

23
00:00:59,430 --> 00:01:00,990
e getChild(2).

24
00:01:01,680 --> 00:01:04,390
Para uma pessoa de fora ou após um tempo

25
00:01:04,390 --> 00:01:07,600
com o crescimento da complexidade, inclusive para nós

26
00:01:07,600 --> 00:01:10,250
isto se tornará difícil de compreender

27
00:01:10,250 --> 00:01:11,580
o que estas partes fazem

28
00:01:11,580 --> 00:01:14,960
ou qual parte da árvore acessamos.

29
00:01:15,430 --> 00:01:17,970
Isto porque vou mostrar como isso pode ser melhorado.

30
00:01:19,680 --> 00:01:21,850
Primeiro, abrimos nossa gramática

31
00:01:21,850 --> 00:01:24,210
e adicionamos labels (rótulos).

32
00:01:24,210 --> 00:01:26,050
Por exemplo, eu forneço esta sub-regra,

33
00:01:26,250 --> 00:01:28,940
ou seja, nesta parte da nossa regra,

34
00:01:28,940 --> 00:01:31,280
o label "Plus".

35
00:01:32,450 --> 00:01:34,600
e esta parte da sub-regra,

36
00:01:35,170 --> 00:01:38,160
depois eu movo o ponto e vírgula para a próxima linha

37
00:01:38,160 --> 00:01:39,540
então isto não nos atrapalha mais,

38
00:01:39,540 --> 00:01:43,320
esta sub-regra nos fornece o label "Zahl" (N.T.: Número).

39
00:01:45,700 --> 00:01:48,580
Além disso eu atribuo igualmente as menores partes dos labels

40
00:01:48,580 --> 00:01:50,770
das regras.

41
00:01:51,370 --> 00:01:54,210
Por exemplo, esta parte aqui é "links" (N.T.: esquerda),

42
00:01:54,210 --> 00:01:56,160
a parte esquerda da adição

43
00:01:56,160 --> 00:01:58,280
e esta parte "rechts" (N.T.: direita),

44
00:01:58,280 --> 00:02:00,400
a parte direita da adição.

45
00:02:00,550 --> 00:02:04,660
E a parte de baixo é... bem... meu número.

46
00:02:07,450 --> 00:02:08,960
Então eu salvo isto

47
00:02:09,340 --> 00:02:11,950
e gero

48
00:02:12,040 --> 00:02:13,050
o

49
00:02:14,400 --> 00:02:16,670
parser novamente com o ANTLR

50
00:02:17,380 --> 00:02:19,380
Agora no eclipse

51
00:02:19,380 --> 00:02:21,740
Eu preciso apertar F5 no parser

52
00:02:21,740 --> 00:02:23,740
para ele atualizar-se

53
00:02:23,740 --> 00:02:25,000
e como podemos ver, imediatamente

54
00:02:25,000 --> 00:02:27,560
nosso visitor não serve mais para

55
00:02:27,560 --> 00:02:29,970
o DemoBaseVisitor gerado pelo ANTLR,

56
00:02:29,970 --> 00:02:32,130
porque esse foi alterado por meio dos labels.

57
00:02:34,940 --> 00:02:38,740
Por último, temos o método "visitPlus"

58
00:02:38,740 --> 00:02:41,480
e o método "visitZahl".

59
00:02:43,860 --> 00:02:47,560
Esses vão ser chamados para a parte de correspondência

60
00:02:47,560 --> 00:02:50,500
na qual o "child count" um

61
00:02:50,500 --> 00:02:52,940
porque se dermos outra olhada

62
00:02:52,940 --> 00:02:55,300
aqui, isto é parte da regra

63
00:02:55,300 --> 00:02:56,980
com o "child count" um,

64
00:02:56,980 --> 00:02:58,980
esse chama a sub-regra "Zahl"

65
00:02:58,980 --> 00:03:00,980
e um com "child count" três

66
00:03:00,980 --> 00:03:03,590
chamando "visitPlus".

67
00:03:04,840 --> 00:03:06,860
Assim nós temos aqui "visitPlus",

68
00:03:07,380 --> 00:03:09,820
que é a parte daqui

69
00:03:16,310 --> 00:03:18,620
e além disso nós temos

70
00:03:18,620 --> 00:03:21,130
"visitZahl"

71
00:03:21,130 --> 00:03:23,260
e "visitZahl" é

72
00:03:23,260 --> 00:03:24,790
esta parte da regra.

73
00:03:25,180 --> 00:03:28,110
A velha regra "visitAddition" ehm...

74
00:03:28,110 --> 00:03:29,700
método, é jogado fora.

75
00:03:31,740 --> 00:03:35,720
Nós adicionamos nosso "return null"

76
00:03:40,910 --> 00:03:42,530
e vemos que o nosso visitor

77
00:03:42,530 --> 00:03:44,730
já ganhou um pouco de legibilidade.

78
00:03:45,030 --> 00:03:46,780
Mas pode ser ainda melhor.

79
00:03:46,780 --> 00:03:50,690
Porque nós continuamos tendo ctx.getchild(2).

80
00:03:51,660 --> 00:03:52,690
Em vez disso,

81
00:03:52,690 --> 00:03:54,190
nós queremos acessar a parte

82
00:03:54,190 --> 00:03:56,190
com o label "rechts".

83
00:03:56,420 --> 00:03:58,290
Como fazemos isso? Fácil:

84
00:03:58,290 --> 00:04:00,530
Entrando aqui no "rechts".

85
00:04:01,270 --> 00:04:02,770
Este é um token.

86
00:04:03,920 --> 00:04:05,520
Quando nós chamamos getText()

87
00:04:05,520 --> 00:04:08,370
neste token, então temos

88
00:04:08,370 --> 00:04:09,900
o texto do nó.

89
00:04:11,040 --> 00:04:13,670
Ele é exatamente o mesmo abaixo, exceto

90
00:04:14,100 --> 00:04:16,280
o token chamado "Zahl".

91
00:04:23,710 --> 00:04:26,690
Agora executo nosso compilador novamente

92
00:04:31,230 --> 00:04:32,250
e podemos ver:

93
00:04:32,250 --> 00:04:35,240
Eu esqueci o "visitChildren".

94
00:04:35,240 --> 00:04:36,870
É claro, isto é importante.

95
00:04:36,870 --> 00:04:39,550
porque antes de todo o "visitPlus"

96
00:04:39,550 --> 00:04:41,550
ele tem sub-nós.

97
00:04:47,010 --> 00:04:52,280
Agora de novo... E nós continuamos tendo a mesma saída

98
00:04:52,280 --> 00:04:55,660
mas agora com um visitor muito mais legível.

99
00:04:55,660 --> 00:04:57,140
Nossa atual abordagem

100
00:04:57,140 --> 00:05:00,460
para diretamente escrever no System.out tem algumas desvantagens:

101
00:05:00,460 --> 00:05:02,610
Porque o que tem sido escrito para o console

102
00:05:02,610 --> 00:05:04,430
que está escrito fora, não pode ser mais acessado.

103
00:05:04,430 --> 00:05:05,990
Exemplo: não podemos pós-processar a saída.

104
00:05:05,990 --> 00:05:08,030
E não podemos mudar de ideia

105
00:05:08,030 --> 00:05:10,680
e dizer "ei, nós não queremos que escreva no console"

106
00:05:10,680 --> 00:05:12,120
mas ao invés, para um arquivo.

107
00:05:12,120 --> 00:05:14,300
Isto é o porque nós estaremos mudando esta parte um pouco

108
00:05:14,300 --> 00:05:16,330
Nós retornamos nossos valors que foram

109
00:05:16,330 --> 00:05:19,370
gerados aqui ao invés de os imprimirmos.

110
00:05:20,980 --> 00:05:23,840
Para "visitZahl" isto é fácil, digamos:

111
00:05:24,160 --> 00:05:27,000
"return context.zahl.getText();"

112
00:05:27,000 --> 00:05:29,000
em vez do que temos agora.

113
00:05:30,680 --> 00:05:31,960
Acima nós iriamos retornar

114
00:05:31,960 --> 00:05:34,700
o valor do filho que temos

115
00:05:35,860 --> 00:05:39,470
mais uma nova linha.

116
00:05:41,880 --> 00:05:45,420
então... ah... o número direito,

117
00:05:46,090 --> 00:05:48,290
mais outra linha

118
00:05:56,010 --> 00:05:59,040
e então novamente, mais "adição".

119
00:06:01,000 --> 00:06:02,670
"return"

120
00:06:15,610 --> 00:06:17,360
Mas todo este negócio tem um problema

121
00:06:17,360 --> 00:06:19,450
Fora o método "visitChildren"

122
00:06:19,450 --> 00:06:21,610
que atravessa múltiplos nós,

123
00:06:21,610 --> 00:06:23,900
mas podemos apenas retornar uma string apenas

124
00:06:23,900 --> 00:06:24,680
e não dá de saber

125
00:06:24,680 --> 00:06:27,700
como concatenar duas strings.

126
00:06:27,700 --> 00:06:29,830
Além disso, nós temos um número maior de nós

127
00:06:29,830 --> 00:06:32,720
que não tem nenhum método de visita

128
00:06:32,720 --> 00:06:34,850
e estes sempre têm simplesmente

129
00:06:34,850 --> 00:06:37,740
"null" como retorno padrão.

130
00:06:37,740 --> 00:06:39,330
Nós devemos ensinar o ANTLR

131
00:06:39,330 --> 00:06:40,660
ou mais precisamente o

132
00:06:40,660 --> 00:06:43,080
nosso visitor gerado pelo ANTLR

133
00:06:43,080 --> 00:06:45,530
como concatenar estes valores.

134
00:06:46,300 --> 00:06:47,450
Nós faremos isto por

135
00:06:47,450 --> 00:06:50,130
sobrescrever o método aggregateResult.

136
00:06:51,530 --> 00:06:53,540
Neste método nós sempre pegamos

137
00:06:53,540 --> 00:06:55,210
um resultado existente

138
00:06:55,210 --> 00:06:58,100
e outro resultado que deve ser anexado.

139
00:06:58,100 --> 00:07:00,100
E ambos podem possivelmente ser "null".

140
00:07:00,100 --> 00:07:01,640
Durante a primeira chamada

141
00:07:01,640 --> 00:07:03,040
"aggregate" é null

142
00:07:03,040 --> 00:07:05,590
e apenas "nextResult" tem valor,

143
00:07:05,590 --> 00:07:08,650
porque nós devemos

144
00:07:08,650 --> 00:07:10,730
anexar algo em nada.

145
00:07:10,730 --> 00:07:13,660
E se ambos são conjuntos,

146
00:07:13,660 --> 00:07:15,000
então nós temos dois itens

147
00:07:15,000 --> 00:07:17,600
que queremos concatenar.

148
00:07:17,600 --> 00:07:19,810
Para simplificar:

149
00:07:20,190 --> 00:07:21,320
Nós observamos:

150
00:07:21,320 --> 00:07:23,940
"aggregate" é null?

151
00:07:27,660 --> 00:07:31,760
Então nós retornamos "nextResult".

152
00:07:34,400 --> 00:07:37,750
Se "nextResult" é null,

153
00:07:43,170 --> 00:07:46,430
então nós retornamos "aggregate".

154
00:07:46,430 --> 00:07:50,160
E de outra forma, obviamente, ambos não são null

155
00:07:50,160 --> 00:07:54,220
e nós retornamos aggregate

156
00:07:54,220 --> 00:08:00,030
mais nova linha mais "nextResult".

157
00:08:02,290 --> 00:08:03,520
Agora nós precisamos

158
00:08:03,520 --> 00:08:05,170
imprimir tudo em algum lugar.

159
00:08:05,170 --> 00:08:07,170
Para que naveguemos à nossa classe Main

160
00:08:07,170 --> 00:08:10,550
e este método de visita nos retorne agora o resultado agregado

161
00:08:10,550 --> 00:08:13,420
de todas as nossas chamadas

162
00:08:14,980 --> 00:08:17,300
e essas são o que nós imprimimos.

163
00:08:21,050 --> 00:08:23,620
Como você pode ver: O resultado não mudou,

164
00:08:23,620 --> 00:08:26,450
assim, continua funcionando.

165
00:08:26,450 --> 00:08:28,110
Agora temos nosso visitor

166
00:08:28,110 --> 00:08:30,110
mais legível usando labels

167
00:08:30,110 --> 00:08:33,080
e mais útil com a ajuda de valores retornados.

168
00:08:33,080 --> 00:08:34,800
Nos próximos vídeos nós iremos fazer código de instrução de verdade

169
00:08:34,800 --> 00:08:37,060
executar as instruções gerais

170
00:08:37,060 --> 00:08:39,170
e muito mais.

171
00:08:39,220 --> 00:08:40,360
Não deixe de curtir!

172
00:08:40,360 --> 00:08:43,430
Escreva comentários, notas e perguntas.

173
00:08:43,430 --> 00:08:45,510
Inscreva-se no meu canal para ficar informado

174
00:08:45,510 --> 00:08:48,740
dos futuros novos episódios.

175
00:08:48,740 --> 00:08:50,200
Obrigado a Gadarol

176
00:08:50,200 --> 00:08:53,120
que nos permitiu usar seu estúdio para estas gravações.

177
00:08:53,120 --> 00:08:54,790
Eu espero que tenha se divertido,

178
00:08:54,790 --> 00:08:56,680
adeus e vejo vocês da próxima vez.

179
00:08:56,680 --> 00:08:58,530
Sintonize de novo, quando nós retornarmos com o:

180
00:08:58,530 --> 00:09:00,530
"Let's build a compiler".

