1
00:00:00,000 --> 00:00:02,610
Bem-vindo de volta ao "Let's build a compiler".

2
00:00:02,610 --> 00:00:06,790
Neste episódio eu mostrarei como usar o visitor gerado pelo ANTLR 

3
00:00:06,790 --> 00:00:09,740
combinado com seu próprio código para processar sua árvore sintática.

4
00:00:09,740 --> 00:00:13,500
Primeiro nós queremos adicionar nosso analisador de gramática no Eclipse,

5
00:00:13,500 --> 00:00:16,440
para que possamos codificar de maneira mais confortável depois.

6
00:00:16,440 --> 00:00:20,130
Baixe o Eclipse em eclipse.org,

7
00:00:20,130 --> 00:00:22,150
vá em "Download Eclipse" logo ali

8
00:00:22,150 --> 00:00:26,560
e é ali que eu escolho "Eclipse Standard".

9
00:00:26,560 --> 00:00:28,670
Eu já baixei ele

10
00:00:28,670 --> 00:00:30,960
e também iniciei

11
00:00:30,960 --> 00:00:33,690
Agora nós temos aqui um "Package Explorer"

12
00:00:33,690 --> 00:00:37,580
e aqui fazemos: Botão direito -> "New" -> "Java Project"

13
00:00:37,580 --> 00:00:40,440
e criamos um novo projeto. Vou chamá-lo...

14
00:00:40,440 --> 00:00:44,120
...Parser já que conterá o analisador de gramática.

15
00:00:44,120 --> 00:00:46,120
então clique em "Terminar"

16
00:00:46,120 --> 00:00:49,590
e nós criamos uma pasta

17
00:00:49,590 --> 00:00:53,120
contendo nossa gramática

18
00:00:53,120 --> 00:00:57,470
e nós criamos uma pasta

19
00:00:57,470 --> 00:01:00,990
onde nós iremos gravar nosso jar ANTLR.

20
00:01:00,990 --> 00:01:03,380
Agora nós iremos adicionar esses ao projeto

21
00:01:03,380 --> 00:01:05,670
usando "Import" aqui.

22
00:01:07,210 --> 00:01:10,940
No meu sistema o jar é gravado no compiler/lib

23
00:01:11,820 --> 00:01:17,480
e nós pegamos a gramática do nosso diretório de gramática

24
00:01:17,480 --> 00:01:21,990
que é compiler/Demo.g4 no meu sistema.

25
00:01:23,900 --> 00:01:28,080
E agora nós podemos continuar com a geração do parser.

26
00:01:28,080 --> 00:01:30,510
Para fazer isso nós trocamos para o terminal

27
00:01:31,020 --> 00:01:35,510
e vamos para o diretório do local de trabalho do Eclipse.

28
00:01:35,510 --> 00:01:38,060
No meu sistema ele é apenas "workspace".

29
00:01:38,060 --> 00:01:40,850
Nele há um diretório com nosso projeto

30
00:01:40,850 --> 00:01:44,190
"Parser" e no diretório está a pasta "grammar"

31
00:01:44,190 --> 00:01:46,270
que recém criamos

32
00:01:46,270 --> 00:01:49,640
e é ali que nossa gramática pode ser encontrada.

33
00:01:50,020 --> 00:01:52,260
Agora podemos iniciar o ANTLR de novo

34
00:01:52,260 --> 00:01:54,750
e fazê-lo criar o nosso parser

35
00:01:54,750 --> 00:02:01,700
ao chamar java -jar ../lib e então antlr.jar.

36
00:02:01,850 --> 00:02:04,450
Então vamos checar nas opções o que precisamos:

37
00:02:04,450 --> 00:02:07,080
Quero este tempo para o nosso parser

38
00:02:07,080 --> 00:02:10,240
não seja apenas gravado no pacote padrão Java,

39
00:02:10,240 --> 00:02:12,620
mas num pacote nomeado explicitamente.

40
00:02:12,620 --> 00:02:15,480
É por isso que temos a opção "-package"

41
00:02:15,480 --> 00:02:19,040
que cria um pacote de comando

42
00:02:19,040 --> 00:02:21,410
dentro do cabeçalho do arquivo Java

43
00:02:22,700 --> 00:02:24,090
Assim eu o especifico agora

44
00:02:24,090 --> 00:02:25,690
e eu escolho como um pacote

45
00:02:25,690 --> 00:02:34,010
de.letsbuildacompiler.parser (N.T.: de= Alemanha; assim como br=Brasil)

46
00:02:36,470 --> 00:02:39,140
Então eu também seleciono um "output-dir"

47
00:02:39,140 --> 00:02:41,880
que é aonde os nossos arquivos Java serão gravados.

48
00:02:42,140 --> 00:02:44,810
Isto começa com ../src,

49
00:02:44,810 --> 00:02:47,790
no Eclipse é este diretório aqui

50
00:02:48,600 --> 00:02:51,080
e então também o caminho

51
00:02:51,080 --> 00:02:54,760
incluindo o pacote, porque o ANTLR não o faz automaticamente.

52
00:02:54,760 --> 00:03:03,270
Assim "de/letsbuildacompiler/parser" 

53
00:03:04,920 --> 00:03:08,400
Então nós não precisamos de um listener por enquanto.

54
00:03:09,460 --> 00:03:11,000
Assim nós o desabilitamos.

55
00:03:11,000 --> 00:03:15,160
Mas eu quero mostrar o que você pode fazer com um visitor

56
00:03:15,160 --> 00:03:17,960
e para isso eu ligo a opção "-visitor",

57
00:03:18,530 --> 00:03:20,370
e agora, muito importante:

58
00:03:20,370 --> 00:03:22,640
suprir o nome da gramática.

59
00:03:24,050 --> 00:03:25,870
Então nós executamos tudo

60
00:03:26,690 --> 00:03:28,930
e agora quando no eclipse

61
00:03:28,930 --> 00:03:30,610
pressionamos "F5"

62
00:03:31,100 --> 00:03:36,310
e vemos no diretório "src" nosso visitor gerado e parser.

63
00:03:37,360 --> 00:03:40,000
Enquanto está fazendo isso, podemos descobrir que no momento,

64
00:03:40,780 --> 00:03:44,080
o org.antlr-Package acima, não pode ser encontrado.

65
00:03:44,080 --> 00:03:47,110
Isto porque nós não configuramos nosso caminho de construção ainda.

66
00:03:47,660 --> 00:03:50,320
Assim nós iremos aqui com um clique do botão direito do mouse

67
00:03:50,680 --> 00:03:52,050
no projetor parser,

68
00:03:52,050 --> 00:03:54,780
então "Build Path" -> "Configure Build Path..."

69
00:03:55,300 --> 00:03:57,310
e então a aba "Libraries",

70
00:03:57,950 --> 00:03:59,530
e nós vamos em "Add JARs..."

71
00:04:00,030 --> 00:04:03,380
e adicionamos no "lib" nosso antlr.jar.

72
00:04:05,870 --> 00:04:09,270
Agora o Eclipse pode encontrar tudo o que precisa,

73
00:04:09,270 --> 00:04:10,990
pode compilar esses arquivos

74
00:04:11,240 --> 00:04:12,680
e todo mundo está feliz.

75
00:04:15,320 --> 00:04:17,430
Como anunciado anteriormente eu quero mostrar a seguir

76
00:04:17,430 --> 00:04:19,600
quais coisas legais podemos fazer com o visitor.

77
00:04:20,130 --> 00:04:22,490
Para fazer isso nós criamos um novo projeto,

78
00:04:23,510 --> 00:04:25,640
o projeto eu chamo de "Compiler".

79
00:04:29,380 --> 00:04:31,620
Na aba "Projects" do projeto

80
00:04:31,620 --> 00:04:33,550
nós adicionamos a dependência para o nosso parser

81
00:04:33,550 --> 00:04:36,150
porque o compilador usa o nosso parser.

82
00:04:38,760 --> 00:04:40,270
E então nós criamos aqui

83
00:04:40,270 --> 00:04:42,470
no nosso novo projeto criado

84
00:04:42,470 --> 00:04:44,200
uma nova classe

85
00:04:44,200 --> 00:04:52,060
no pacote "de.letsbuildacompiler.parser",

86
00:04:52,370 --> 00:04:55,350
ehm... não... aqui nós usamos "Compiler"

87
00:04:58,220 --> 00:05:02,110
e chamamos a classe "MyVisitor".

88
00:05:06,780 --> 00:05:09,760
Esta classe deriva da gerada

89
00:05:09,760 --> 00:05:11,760
"DemoBaseVisitor".

90
00:05:16,500 --> 00:05:17,700
Esta classe recebe o tipo.

91
00:05:17,700 --> 00:05:19,860
No começo o tipo não é importante,

92
00:05:19,860 --> 00:05:21,610
mas depois isto será muito importante.

93
00:05:21,610 --> 00:05:24,150
Por hora, configuro o tipo para "String".

94
00:05:24,650 --> 00:05:27,400
Agora você já pode ver um erro aqui:

95
00:05:27,400 --> 00:05:29,320
"The hierarchy is inconsistent".

96
00:05:29,320 --> 00:05:31,660
Quando eu salvo agora outro erro surge

97
00:05:32,010 --> 00:05:34,230
lê-se, para melhor ajudar

98
00:05:34,230 --> 00:05:37,760
"The AbstractParseTreeVisitor cannot be resolved".

99
00:05:38,080 --> 00:05:41,360
Isso é porque no projeto do nosso parser

100
00:05:42,010 --> 00:05:44,670
não colocamos no caminho de construção

101
00:05:44,670 --> 00:05:47,360
que o jar ANTLR deveria suprir

102
00:05:47,360 --> 00:05:48,900
para dependência nos projetos.

103
00:05:49,280 --> 00:05:51,460
Nós fazemos isso para "Java Buil Path"

104
00:05:51,460 --> 00:05:54,810
e então "Order and Export" para o antlr.jar

105
00:05:54,810 --> 00:05:56,980
Nós configuramos o checkbox aqui para "export".

106
00:05:56,980 --> 00:05:58,770
Clicamos em "OK"

107
00:05:58,770 --> 00:06:00,770
e todo mundo está feliz.

108
00:06:01,660 --> 00:06:03,960
Se pressionarmos Ctrl+espaço agora

109
00:06:03,960 --> 00:06:06,520
podemos ver algumas propostas do que fazer.

110
00:06:06,520 --> 00:06:08,400
Que fundamentalmente são métodos de substituição.

111
00:06:08,400 --> 00:06:10,880
Agora eu inicio o tipo "visit"

112
00:06:11,840 --> 00:06:15,380
e é ali onde encontramos o método que nos interessa

113
00:06:15,380 --> 00:06:18,170
chamado de método "visitAddition".

114
00:06:19,000 --> 00:06:20,780
Este é chamado exatamente como uma regra

115
00:06:20,780 --> 00:06:23,360
"addition" na nossa gramática.

116
00:06:25,320 --> 00:06:28,810
Em vez dessa implementação padrão

117
00:06:29,090 --> 00:06:31,090
podemos fazer algo diferente agora.

118
00:06:32,090 --> 00:06:35,010
Como lembrança eu vou te mostrar

119
00:06:35,010 --> 00:06:38,020
como a árvore parece e o que nós podemos fazer aqui.

120
00:06:46,950 --> 00:06:48,640
Aqui: a árvore.

121
00:06:49,720 --> 00:06:54,230
e o nó de contexto "AdditionContext"

122
00:06:54,230 --> 00:06:57,610
é agora um nó na árvore.

123
00:06:58,680 --> 00:07:02,890
Queremos percorrer estes nós na pós-ordem

124
00:07:02,890 --> 00:07:05,300
e precisamos levar a diferenciação em conta

125
00:07:05,300 --> 00:07:09,150
Ou seja: o nó pode ser um filho

126
00:07:09,150 --> 00:07:11,230
como aquele embaixo, com o 3

127
00:07:11,230 --> 00:07:13,430
ou ele pode ter três crianças, sendo

128
00:07:13,430 --> 00:07:16,830
outra adição, um mais e um número.

129
00:07:17,750 --> 00:07:19,850
Nós precisamos distinguir estes agora.

130
00:07:19,890 --> 00:07:23,150
Fazemos isso ao simplesmente olhar:

131
00:07:23,780 --> 00:07:30,220
se... contexto... ponto... get child count

132
00:07:30,220 --> 00:07:32,220
é igual igual... um

133
00:07:35,520 --> 00:07:38,800
(Aliás, se você está se perguntando sobre meus erros de ortografia

134
00:07:38,800 --> 00:07:41,710
isto é porque meu primeiro microfone

135
00:07:41,710 --> 00:07:43,960
está entre mim e meu teclado

136
00:07:43,960 --> 00:07:45,880
e eu não posso ver o meu teclado e mais

137
00:07:45,880 --> 00:07:48,300
este é um teclado que não estou familiarizado

138
00:07:48,300 --> 00:07:52,020
porque como mencionei anteriormente estou no estúdio do Gadarol).

139
00:07:55,310 --> 00:07:58,060
Agora eu apenas dou como saída o número

140
00:07:58,060 --> 00:07:59,990
se existe um número

141
00:07:59,990 --> 00:08:02,640
e acesso este ao

142
00:08:02,640 --> 00:08:09,340
chamar context.getChild(0).

143
00:08:10,100 --> 00:08:13,270
Para comparação veja o seguinte na árvore:

144
00:08:13,920 --> 00:08:16,940
Se nós estamos aqui até o menor nó que tem apenas um único filho

145
00:08:16,940 --> 00:08:20,310
onde nós temos a árvore aqui então isto é o nosso primeiro filho

146
00:08:20,750 --> 00:08:23,000
e a numeração inicia com zero

147
00:08:23,000 --> 00:08:25,920
e então nós usamos getChild(0) aqui

148
00:08:25,920 --> 00:08:28,840
para acessar a árvore aqui de baixo.

149
00:08:30,770 --> 00:08:33,770
Se o nó não tem exatamente um filho

150
00:08:33,770 --> 00:08:35,840
então ele tem três nós.

151
00:08:36,840 --> 00:08:40,400
Neste caso eu quero dar como saída o número

152
00:08:40,400 --> 00:08:42,780
que está na direita. Que é agora

153
00:08:42,780 --> 00:08:45,640
o nó número 3, no entanto

154
00:08:45,640 --> 00:08:49,080
como o índice é baseado no 0, é o nó 2.

155
00:08:50,350 --> 00:08:53,830
e além disso

156
00:08:53,830 --> 00:08:57,000
nós damos como saída o que agora segue na adição

157
00:09:04,580 --> 00:09:07,030
Bom? Não? Algo faltando?

158
00:09:07,480 --> 00:09:10,340
Sim: um retorno.

159
00:09:10,340 --> 00:09:12,420
Agora eu apenas uso "return null".

160
00:09:12,420 --> 00:09:15,090
Como já informado, isto será alterado depois

161
00:09:15,090 --> 00:09:16,750
e isto ficará interessante

162
00:09:16,750 --> 00:09:19,890
mas por enquanto não precisamos disso.

163
00:09:20,440 --> 00:09:24,130
O que mais está faltando? Nós precisamos percorrer nossos nós filhos.

164
00:09:24,130 --> 00:09:27,120
E desde que eu disse que nós precisamos fazer por pós-ordem,

165
00:09:27,120 --> 00:09:29,580
significando que nós processamos o nós filhos primeiro

166
00:09:29,580 --> 00:09:32,850
e apenas após que olhamos para o nó raiz,

167
00:09:32,850 --> 00:09:36,230
nós precisamos fazer o que anteriormente geramos saídas aqui.

168
00:09:36,870 --> 00:09:38,920
Para nossa conveniência o ANTLR

169
00:09:38,920 --> 00:09:42,400
gerou um método visitChildren para nós

170
00:09:42,400 --> 00:09:44,780
no qual nós simplesmente passamos nosso contexto aqui

171
00:09:44,780 --> 00:09:47,340
e este diz: vá para todos os filhos

172
00:09:47,340 --> 00:09:50,690
e chame o método de correspondência de visita.

173
00:09:51,790 --> 00:09:54,500
Então precisamos também uma classe main.

174
00:09:58,020 --> 00:10:00,010
Eu chamo-a de "Main".

175
00:10:00,010 --> 00:10:04,080
Ela leva um método "public static main"

176
00:10:08,370 --> 00:10:10,680
e aqui nós estamos indo para chamar o ANTLR,

177
00:10:10,680 --> 00:10:13,540
gerar a árvore e então

178
00:10:14,240 --> 00:10:16,620
alimentar o nosso visitor com a árvore.

179
00:10:16,620 --> 00:10:18,770
Funciona da seguinte forma:

180
00:10:18,770 --> 00:10:22,210
Inicialmente, nós precisamos de uma Input Stream ANTLR

181
00:10:26,940 --> 00:10:32,870
e podemos usar como entrada um ANTLRFileStream

182
00:10:32,870 --> 00:10:37,180
e ler a partir do arquivo code.demo.

183
00:10:37,180 --> 00:10:42,060
Para isto, o arquivo code.demo deve existir aqui,

184
00:10:42,060 --> 00:10:46,580
de acordo, eu o importo ao nosso projeto

185
00:10:49,640 --> 00:10:52,730
e isto aqui retorna uma IOException.

186
00:10:52,730 --> 00:10:54,920
Para este tutorial nós não precisamos

187
00:10:54,920 --> 00:10:58,480
lidar com todas as exceções

188
00:10:58,480 --> 00:11:02,300
Isto porque eu apenas adicionei "throws Exception" para o nosso método Main.

189
00:11:02,300 --> 00:11:04,600
No caso de um Error isto significa

190
00:11:04,600 --> 00:11:08,300
que nosso programa irá apenas imprimir um erro e sair

191
00:11:08,300 --> 00:11:10,830
mas para este projeto isto está OK.

192
00:11:11,780 --> 00:11:14,390
Então, nós precisamos criar nosso lexer (analisador léxico)

193
00:11:14,390 --> 00:11:16,390
O lexer foi gerado aqui

194
00:11:16,390 --> 00:11:18,170
e é chamado DemoLexer.

195
00:11:18,550 --> 00:11:21,720
Este é chamado apenas para nossa gramática

196
00:11:21,720 --> 00:11:23,210
no caso da gramática é chamado "Demo"

197
00:11:23,210 --> 00:11:25,820
Isto é porque o lexer também é chamado de DemoLexer.

198
00:11:34,930 --> 00:11:39,500
E agora alimentamos o lexer com a nossa entrada.

199
00:11:40,740 --> 00:11:43,160
Do lexer sai um...

200
00:11:43,970 --> 00:11:45,650
...CommonTokenStream.

201
00:11:45,950 --> 00:11:48,680
Você deve estar atento que o ANTLR

202
00:11:48,680 --> 00:11:51,680
muitas das vezes, oferece duas dessas classes

203
00:11:51,680 --> 00:11:53,090
para você. Também aqui:

204
00:11:53,090 --> 00:11:54,620
CommonTokenStream existe duas vezes

205
00:11:54,620 --> 00:11:56,140
e a diferença está aqui:

206
00:11:56,140 --> 00:11:59,040
Uma vez com "v4" e outra sem "v4".

207
00:11:59,690 --> 00:12:02,740
No caso duas classes são oferecidas,

208
00:12:02,740 --> 00:12:06,070
então você sempre pode escolher pela versão "v4".

209
00:12:07,620 --> 00:12:09,970
Se você fizer algum erro aqui

210
00:12:09,970 --> 00:12:12,380
então você terá erros muitos estranhos

211
00:12:12,380 --> 00:12:15,730
com "invalid argument" ou "wrong type"

212
00:12:15,730 --> 00:12:18,740
e pode levar um tempo até você se dar conta

213
00:12:18,740 --> 00:12:20,910
o problema na verdade seria

214
00:12:20,910 --> 00:12:22,570
porque este é o pacote errado

215
00:12:22,570 --> 00:12:23,770
e você pode ver em cima

216
00:12:23,770 --> 00:12:25,770
apenas nas importações

217
00:12:25,770 --> 00:12:28,610
que o "v4" está faltando.

218
00:12:35,720 --> 00:12:37,750
Assim nosso TokenSource

219
00:12:37,750 --> 00:12:41,240
que é onde conseguimos nossos tokens do nosso lexer.

220
00:12:43,500 --> 00:12:47,380
com esses Tokens nós iremos alimentar o nosso parser

221
00:12:58,630 --> 00:13:03,500
e agora podemos usar tudo isso para gerar nosso ParseTree.

222
00:13:09,620 --> 00:13:11,760
Mais precisamente, chamamos o método

223
00:13:11,760 --> 00:13:14,220
com o nome da regra

224
00:13:14,220 --> 00:13:16,940
que o parser deveria usar para iniciar a análise.

225
00:13:16,940 --> 00:13:20,330
No momento, temos apenas uma regra

226
00:13:20,330 --> 00:13:22,330
Assim nós a chamamos.

227
00:13:26,630 --> 00:13:30,020
E então instanciamos

228
00:13:30,020 --> 00:13:34,230
nosso Visitor que criamos previamente, o "MyVisitor"

229
00:13:34,230 --> 00:13:39,360
e chamamos passagem de visita no ParseTree.

230
00:13:42,820 --> 00:13:46,880
Então eu salvo e executo.

231
00:13:51,230 --> 00:13:52,750
Como podemos ver temos:

232
00:13:52,750 --> 00:13:56,850
3, 42, adição, 5, adição, 6, adição.

233
00:13:57,090 --> 00:14:01,080
Se nós olharmos juntos na saída da árvore

234
00:14:01,930 --> 00:14:05,680
vemos aqui, o 3 está aqui, então o 42

235
00:14:05,680 --> 00:14:08,310
a adição, então o 5,

236
00:14:08,310 --> 00:14:12,010
de novo a adição, o 6 e de novo adição

237
00:14:12,760 --> 00:14:15,620
Hurrah, porque estas são exatamente as instruções

238
00:14:15,620 --> 00:14:18,410
que precisamos depois para

239
00:14:18,410 --> 00:14:22,240
executar o código no nosso processador.

240
00:14:22,240 --> 00:14:25,070
Ao menos, já está na ordem correta.

241
00:14:25,070 --> 00:14:27,550
Escrevemos nosso primeiro visitor

242
00:14:27,550 --> 00:14:31,360
e é apenas um pequeno passo para um código de instrução real.

243
00:14:31,360 --> 00:14:34,360
Durante os próximos vídeos eu mostrarei como usar labels (rótulos)

244
00:14:34,360 --> 00:14:36,790
para melhorar a leitura do nosso visitor,

245
00:14:36,790 --> 00:14:39,100
como nós podemos gerar código de instrução de verdade.

246
00:14:39,100 --> 00:14:40,440
e muito mais.

247
00:14:40,440 --> 00:14:43,190
Aprecio as curtidas, comentários e inscrições.

248
00:14:43,190 --> 00:14:45,500
Muito obrigado a Gadarol que forneceu

249
00:14:45,500 --> 00:14:47,270
seu estúdio para estas gravações.

250
00:14:47,270 --> 00:14:48,630
Espero que tenham se divertido bastante

251
00:14:48,630 --> 00:14:50,460
Adeus e vejo vocês na próxima

252
00:14:50,460 --> 00:14:54,210
Sintonizem novamente para o próximo episódio de "Let's build a compiler".

