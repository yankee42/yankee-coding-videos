1
00:00:00,000 --> 00:00:02,991
Bem-vindo de volta ao "Let's build a compiler".

2
00:00:02,990 --> 00:00:05,226
No último episódio trouxemos variáveis

3
00:00:05,220 --> 00:00:06,444
para a nossa linguagem

4
00:00:06,440 --> 00:00:09,586
e aos poucos fechamos a complexidade do nosso compilador

5
00:00:09,586 --> 00:00:11,580
e erros são difíceis de se encontrar.

6
00:00:11,822 --> 00:00:14,591
Depois neste episódio nós trabalharemos com

7
00:00:14,590 --> 00:00:18,173
como nosso visitor possa gerar mensagens de erro.

8
00:00:19,982 --> 00:00:22,160
Aqui infelizmente não temos nenhum erro permitido:

9
00:00:22,160 --> 00:00:25,973
O "Files.newOutputStream" cria uma nova OutputStream,

10
00:00:25,970 --> 00:00:29,088
então escrevemos nosso arquivo de classe nesse OutputStream 

11
00:00:29,080 --> 00:00:30,644
mas o OutputStream depois

12
00:00:30,640 --> 00:00:31,955
nunca mais iria fechar.

13
00:00:32,173 --> 00:00:34,213
No Linux mais uma vez não temos este o problema,

14
00:00:34,210 --> 00:00:37,875
não falha tanto assim, o OutputStrem geralmente ainda existe

15
00:00:37,870 --> 00:00:40,288
mas no Windows este tempDir aqui depois

16
00:00:40,280 --> 00:00:41,355
não pode ser deletado,

17
00:00:41,350 --> 00:00:44,084
porque no TempDir ainda existe um arquivo,

18
00:00:44,080 --> 00:00:45,168
ele está aberto.

19
00:00:45,160 --> 00:00:47,066
Como dito, todavia, no Linux funciona,

20
00:00:47,060 --> 00:00:48,928
e alguém pode abrir os arquivos deletados

21
00:00:48,920 --> 00:00:50,560
no Windows isso não é possível

22
00:00:50,560 --> 00:00:53,542
e por isso nó devemos agora novamente corrigir isto.

23
00:00:53,662 --> 00:00:55,204
Faremos simplesmente dentro do 

24
00:00:55,200 --> 00:00:59,328
OutputStream, primeiro retiramos uma variável

25
00:01:01,320 --> 00:01:03,111
e então nós iremos aqui

26
00:01:03,110 --> 00:01:05,831
usar um bloco try-with-resources.

27
00:01:15,866 --> 00:01:18,640
Aqui nós sabemos agora que o Java

28
00:01:18,640 --> 00:01:21,368
no fim dos blocos "try" no OutputStream,

29
00:01:21,360 --> 00:01:23,488
cria fechamentos automáticos

30
00:01:23,480 --> 00:01:27,106
e mesmo se ocorrer uma exception aqui.

31
00:01:27,200 --> 00:01:30,071
Provamos mais uma vez se os testes ainda realmente o fazem

32
00:01:30,644 --> 00:01:34,226
e sim: não é o caso, tudo continua maravilhoso.

33
00:01:34,631 --> 00:01:36,795
Então queremos começar a trabalhar com

34
00:01:36,790 --> 00:01:38,755
as mensagens de erro certas para 

35
00:01:38,750 --> 00:01:40,324
quando alguma vez através do trabalho ter.

36
00:01:40,320 --> 00:01:42,875
Por isso daqui em diante nós personalizaremos

37
00:01:42,870 --> 00:01:44,946
primeiro nossa especificação.

38
00:01:45,568 --> 00:01:49,431
Nós produzimos aqui após o nosso teste anterior 

39
00:01:51,430 --> 00:01:53,711
um novo teste,

40
00:01:55,297 --> 00:01:57,288
e dizemos então:

41
00:01:57,622 --> 00:02:15,071
"compilingCodeThrowsUndeclaredVariableException_ifVariableIsUndefined"

42
00:02:17,866 --> 00:02:20,626
E então iremos similarmente

43
00:02:22,031 --> 00:02:26,653
como Output anterior compilando a nossa String,

44
00:02:27,017 --> 00:02:29,457
todavia não nos fornece nenhum Output

45
00:02:29,450 --> 00:02:31,466
do nosso programa para avaliação,

46
00:02:31,460 --> 00:02:34,640
mas é dada apenas um "compileAndRun".

47
00:02:36,333 --> 00:02:39,457
como código devemos agora executar algo,

48
00:02:39,450 --> 00:02:44,048
era referenciada de acordo com uma "undeclared variable".

49
00:02:44,604 --> 00:02:46,644
Nós também pegamos aqui um exemplo simples:

50
00:02:46,640 --> 00:02:48,328
"println(x)"

51
00:02:48,320 --> 00:02:49,982
e depois

52
00:02:49,980 --> 00:02:52,071
nós devemos, naturalmente, checar ainda

53
00:02:52,070 --> 00:02:55,044
se agora é um erro exatamente esperado:

54
00:02:55,040 --> 00:02:58,395
Isto significa que escrevemos na nossa anotação de teste:

55
00:02:58,390 --> 00:03:01,280
"expectedExceptions"

56
00:03:02,200 --> 00:03:04,537
e nós dizemos que esperamos uma

57
00:03:04,530 --> 00:03:09,337
"UndeclaredVariableException".

58
00:03:12,440 --> 00:03:14,666
E então nós documentamos aqui:

59
00:03:14,660 --> 00:03:24,133
"evaluation performed by expected exception".

60
00:03:26,724 --> 00:03:28,848
Essa exceção não nos fornece nada até agora,

61
00:03:28,840 --> 00:03:31,231
isso significa que nós precisamos deixar ali,

62
00:03:32,035 --> 00:03:35,128
para que não acontece no nosso pacote de teste,

63
00:03:35,120 --> 00:03:37,524
mas é novamente normal no pacote "source"

64
00:03:37,520 --> 00:03:40,293
e então criamos aqui mesmo

65
00:03:40,290 --> 00:03:43,657
um pacote "exceptions".

66
00:03:47,160 --> 00:03:49,680
Para que então possa agora naturalmente passar por uma exceção,

67
00:03:49,680 --> 00:03:53,755
apenas rodando nosso "throws declaration" nele novamente. 

68
00:03:55,626 --> 00:03:58,622
Com isso, nosso teste é expandido de acordo, 

69
00:03:58,622 --> 00:04:00,620
então rodamos ele mais uma vez

70
00:04:03,430 --> 00:04:04,515
e vemos agora por aqui:

71
00:04:04,510 --> 00:04:07,288
Hurraa, um teste deu mensagem de erro,

72
00:04:07,280 --> 00:04:08,840
no nosso novo

73
00:04:08,840 --> 00:04:12,524
"expected exception was UndeclaredVariableException"

74
00:04:12,520 --> 00:04:15,280
mas no lugar dele nós temos

75
00:04:15,280 --> 00:04:18,986
um "jasError" com "Bad argument" retornado.

76
00:04:20,528 --> 00:04:21,857
Agora nós queremos implementar isso,

77
00:04:21,850 --> 00:04:24,911
para que o UndeclaredVariableException também seja lançado.

78
00:04:24,910 --> 00:04:26,591
Para isso vamos no nosso visitor,

79
00:04:26,590 --> 00:04:30,071
o último tropeço sobre isso por não ter variável ali

80
00:04:30,070 --> 00:04:33,151
e também no nosso caso

81
00:04:33,150 --> 00:04:35,057
uma variável que buscaremos,

82
00:04:35,050 --> 00:04:38,493
que também está junta do "visitVariable"

83
00:04:38,490 --> 00:04:40,093
e ali pode ser,

84
00:04:40,090 --> 00:04:43,186
que este "variables.get" não retorna nada mesmo

85
00:04:43,180 --> 00:04:46,120
porque da mesma forma a nossa variável não foi definida.

86
00:04:46,120 --> 00:04:47,826
Ali dizemos que então,

87
00:04:47,820 --> 00:04:49,453
o que temos aqui

88
00:04:49,450 --> 00:04:52,586
também vem por primeiro na variável

89
00:04:54,671 --> 00:04:56,595
e então adiante nos é mostrado:

90
00:04:56,590 --> 00:05:00,977
Caso "varIndex", então nos retorna que temos "null", 

91
00:05:01,546 --> 00:05:04,768
então a variável não está definida

92
00:05:04,760 --> 00:05:07,368
e dizemos no local:

93
00:05:07,360 --> 00:05:11,928
"throw new UndeclaredVariableException".

94
00:05:14,297 --> 00:05:17,760
Agora a exceção ainda é uma "caught exception",

95
00:05:17,760 --> 00:05:22,528
isto significa que devemos adicioná-la ao nosso visitor,

96
00:05:22,520 --> 00:05:25,124
na nossa throws declaration, 

97
00:05:25,120 --> 00:05:27,306
que nós não o podemos fazer,

98
00:05:27,300 --> 00:05:29,675
porque para um método de sobrescrita

99
00:05:29,670 --> 00:05:30,928
de uma superclasse,

100
00:05:30,920 --> 00:05:33,680
aqui nós não podemos simplesmente mudar de assinatura

101
00:05:33,680 --> 00:05:35,164
e adicionar um throws,

102
00:05:35,160 --> 00:05:36,422
isso significa que nós precisamos aqui

103
00:05:36,420 --> 00:05:39,906
ainda emendar para algum "RuntimeException",

104
00:05:39,900 --> 00:05:42,004
e simplesmente escrever nele

105
00:05:42,000 --> 00:05:45,600
"extends RuntimeException" aqui.

106
00:05:46,000 --> 00:05:48,973
Então, então executar nosso teste de novo

107
00:05:51,000 --> 00:05:54,275
e como ele diz: Huraa, ele funcionou!

108
00:05:54,270 --> 00:05:58,955
Agora chegamos a um "UndeclaredVariableException"

109
00:05:58,950 --> 00:06:01,915
quando nós acessamos uma variável pelo println,

110
00:06:01,915 --> 00:06:03,910
que ela não está definida.

111
00:06:03,910 --> 00:06:07,391
Infelizmente nos diz que a mensagem de erro até agora não se alterou, tal como:

112
00:06:07,390 --> 00:06:10,862
"Ei, eu encontrei uma 'undeclared variable'".

113
00:06:10,860 --> 00:06:14,102
Ainda não diz como foi o erro,

114
00:06:14,100 --> 00:06:15,960
qual variável não está declarada,

115
00:06:15,960 --> 00:06:19,328
ou como se chama e em que posição ele ocorreu. 

116
00:06:19,320 --> 00:06:24,466
Para isso, nós voltamos a nossa especificação,

117
00:06:24,460 --> 00:06:27,497
e iremos continuá-lo e especificá-lo,

118
00:06:27,490 --> 00:06:29,902
para que ele gentilmente também deva parar.

119
00:06:29,900 --> 00:06:32,848
Isto significa que nós damos aqui ainda adicionalmente no:

120
00:06:32,840 --> 00:06:35,533
"expectedExceptionsMessageRegexp",

121
00:06:35,530 --> 00:06:37,644
que ele agora é uma expressão regular,

122
00:06:37,640 --> 00:06:40,986
que ele deva passar nessa "message" da nossa exceção.

123
00:06:40,980 --> 00:06:42,800
Ali ele deve agora também ter dentro:

124
00:06:42,800 --> 00:06:45,226
O número das linhas, que está aqui...

125
00:06:45,220 --> 00:06:47,720
nós temos apenas uma linha, a linha número um,

126
00:06:47,720 --> 00:06:49,360
então o número de colunas,

127
00:06:49,360 --> 00:06:50,377
e veremos por vez aqui,

128
00:06:50,370 --> 00:06:53,324
1, 2, 3, 4, 5, 6, 7, 8,

129
00:06:53,320 --> 00:06:55,853
pertence ainda a coluna número 8

130
00:06:55,850 --> 00:06:58,404
do erro que aparece

131
00:06:58,400 --> 00:07:04,982
e aí está uma "undeclared variable" 

132
00:07:05,662 --> 00:07:08,004
e é chamada de "x",

133
00:07:09,351 --> 00:07:11,204
Então salvamos isto,

134
00:07:11,413 --> 00:07:13,497
deixamos nosso teste rodar novamente...

135
00:07:15,490 --> 00:07:18,448
Costumeiramente: o teste dá como mensagem de erro:

136
00:07:18,440 --> 00:07:22,248
"The exception was thrown but with the wrong message".

137
00:07:23,031 --> 00:07:24,715
Vamos remediar isto agora,

138
00:07:24,710 --> 00:07:28,906
para extender nossa "UndeclaredVariableException",

139
00:07:28,900 --> 00:07:32,008
o que ela deve que saber é:

140
00:07:32,000 --> 00:07:34,853
Em qual linha está o problema ocorrido,

141
00:07:35,786 --> 00:07:36,951
ela deve saber:

142
00:07:36,950 --> 00:07:40,928
Em qual "column" ocorreu o problema

143
00:07:46,942 --> 00:07:48,768
e ela deve saber:

144
00:07:48,760 --> 00:07:52,697
Como se chama a variável que é "undeclared"? 

145
00:07:57,622 --> 00:08:02,777
Então queremos implementar um método "getMessage"

146
00:08:03,622 --> 00:08:06,684
e deve agora retornar

147
00:08:07,128 --> 00:08:13,880
invés do simples "line" um dois pontos,

148
00:08:14,062 --> 00:08:16,275
e a "column",

149
00:08:17,320 --> 00:08:24,266
então "undeclared variable"

150
00:08:25,973 --> 00:08:29,546
e então o nome da variável.

151
00:08:34,088 --> 00:08:38,560
Agora nós precisamos iniciar todas as variáveis de cima,

152
00:08:38,906 --> 00:08:42,080
para criar um constructor

153
00:08:44,275 --> 00:08:46,608
e com esse constructor podemos agora simplesmente

154
00:08:46,600 --> 00:08:50,231
entregar o token com nosso nome de variável.

155
00:08:53,355 --> 00:08:56,888
Então ali vem todas as informações importantes para nós

156
00:08:56,880 --> 00:09:00,395
e ocupando nossa variável aqui em cima.

157
00:09:01,013 --> 00:09:06,724
A linha nos fornece como saída "varNameToken.getLine()",

158
00:09:08,862 --> 00:09:17,137
a "column" nos fornece como saída "varNameToken.getCharPositionInLine()"

159
00:09:18,244 --> 00:09:26,666
e o "varName" nos fornece como saída "varNameToken.getText()".

160
00:09:27,311 --> 00:09:30,706
Então vamos de novo no nosso visitor

161
00:09:30,700 --> 00:09:32,502
e já vemos que ele reclama aqui,

162
00:09:32,500 --> 00:09:34,768
porque nós não entregamos o token agora

163
00:09:34,760 --> 00:09:39,560
e nosso token que é "ctx.varName".

164
00:09:41,142 --> 00:09:43,586
Deixamos nosso teste rodar novamente...

165
00:09:46,448 --> 00:09:49,266
... e vemos agora então, que funcionou corretamente.

166
00:09:49,260 --> 00:09:53,128
Nossa mensagem de erro não contém mais apenas a informação,

167
00:09:53,120 --> 00:09:56,808
que em algum lugar ocorreu uma "undeclared variable",

168
00:09:56,800 --> 00:09:59,288
mas também exatamente qual variável

169
00:09:59,280 --> 00:10:03,257
e em qual posição no nosso código fonte.

170
00:10:03,746 --> 00:10:06,173
Assim então mostramos mais uma vez se tudo passou.

171
00:10:06,170 --> 00:10:08,884
Para isso vamos na nossa gramática:

172
00:10:08,880 --> 00:10:11,008
Nós temos até o momento no "expression"

173
00:10:11,000 --> 00:10:13,671
varName=identifier, também se uma variável

174
00:10:13,670 --> 00:10:15,311
é de acesso a leitura

175
00:10:15,310 --> 00:10:18,151
e a variável não existe, para que interceptemos,

176
00:10:18,150 --> 00:10:21,351
então nós lançamos um ordenador de erros.

177
00:10:21,350 --> 00:10:24,942
Para quando termos um "varDeclaration" tenhamos um "varName",

178
00:10:24,940 --> 00:10:28,035
então é bom que a variável não existe,

179
00:10:28,030 --> 00:10:30,377
então não precisamos lançar nenhum erro,

180
00:10:30,370 --> 00:10:33,560
mas então temos que ainda aqui o caso do "assignment".

181
00:10:33,560 --> 00:10:36,582
Ali iremos então também lançar um erro,

182
00:10:36,580 --> 00:10:39,791
quando aqui não existe o "varName".

183
00:10:40,235 --> 00:10:42,813
Também iremos novamente no nosso teste,

184
00:10:42,810 --> 00:10:45,080
Copiar o nosso caso de teste

185
00:10:48,880 --> 00:10:51,346
e então precisamos naturalmente o renomear.

186
00:10:51,340 --> 00:10:53,271
Agora devemos ter consistência natural na chamada,

187
00:10:53,270 --> 00:11:00,471
também mudei no "ifReadingUndefinedVariable".

188
00:11:01,591 --> 00:11:06,702
E o teste aqui em baixo corresponde ao "ifWritingUndefinedVariable".

189
00:11:08,471 --> 00:11:10,951
Então precisamos de um novo exemplo de código,

190
00:11:10,950 --> 00:11:14,551
eu suponho agora um simples "x=5"

191
00:11:15,315 --> 00:11:21,200
e então continua sendo uma variável indefinida na linha 1

192
00:11:21,200 --> 00:11:24,462
mas na posição 0, na posição de início.

193
00:11:26,142 --> 00:11:27,524
Salvamos isso,

194
00:11:27,524 --> 00:11:29,520
executamos nosso teste de novo

195
00:11:30,924 --> 00:11:34,120
e como você vê: o teste retorna erro,

196
00:11:34,120 --> 00:11:36,333
também maravilhoso, podemos trabalhar com isso

197
00:11:36,330 --> 00:11:38,640
assim que nós consertamos o teste de novo.

198
00:11:38,640 --> 00:11:40,777
Vamos para o nosso visitor

199
00:11:40,770 --> 00:11:42,991
e então vemos aqui,

200
00:11:42,990 --> 00:11:47,444
que o "visitAssignment" tem exatamente consigo o mesmo construtor.

201
00:11:47,440 --> 00:11:52,422
Nós alcançamos aqui também com "variables.get" sobre o nome da variável.

202
00:11:52,420 --> 00:11:54,888
E quando então não existe,

203
00:11:54,880 --> 00:11:58,271
então é preciso que imediatamente jogue o mesmo erro.

204
00:11:58,270 --> 00:12:00,177
Para que este código não seja duplicado 

205
00:12:00,170 --> 00:12:02,862
e aqui exatamente de novo as mesmas linhas

206
00:12:02,860 --> 00:12:06,986
como aqui podemos escrever inserindo um pequeno método de ajuda.

207
00:12:07,568 --> 00:12:09,995
Digo agora simplesmente também:

208
00:12:13,608 --> 00:12:17,804
"requireVariableIndex".

209
00:12:17,800 --> 00:12:20,195
E então gostaríamos,

210
00:12:20,190 --> 00:12:24,791
a partir do nome da variável token, do índice correspondente.

211
00:12:24,790 --> 00:12:26,991
Entregando também um token aqui

212
00:12:33,875 --> 00:12:38,577
e então vem todo o código fonte daqui...

213
00:12:39,573 --> 00:12:41,377
...depois aqui...

214
00:12:42,084 --> 00:12:47,120
e no fim podemos retornar o "varIndex".

215
00:12:47,120 --> 00:12:49,960
Isso significa a nossa varName, mais algo,

216
00:12:49,960 --> 00:12:51,742
não está contida em um contexto no momento

217
00:12:51,740 --> 00:12:54,546
mas nós temos ela como "varNameToken"

218
00:12:54,540 --> 00:12:56,386
e aqui igualmente

219
00:12:56,380 --> 00:12:58,991
e este método já está pronto.

220
00:12:58,990 --> 00:13:00,186
Agora nós vamos

221
00:13:00,180 --> 00:13:05,008
invés de "varIndex" chamar "requireVariableIndex"

222
00:13:05,000 --> 00:13:09,653
e nosso nó "ctx.varName" passou.

223
00:13:10,311 --> 00:13:11,835
Agora o mesmo se aplica aqui:

224
00:13:11,830 --> 00:13:14,551
invés de diretamente acessar o mapa de variáveis

225
00:13:14,550 --> 00:13:18,186
aqui no nosso caso chamamos de "requireVariableIndex"

226
00:13:18,180 --> 00:13:25,382
e pegamos do "ctx", o token varName.

227
00:13:27,204 --> 00:13:29,853
Então executamos nosso teste mais um vez

228
00:13:31,413 --> 00:13:33,902
e Huraa, funcionou,

229
00:13:33,900 --> 00:13:35,884
o nosso novo teste também o faz,

230
00:13:35,880 --> 00:13:39,826
por isso, lê e escreve

231
00:13:39,820 --> 00:13:42,951
jogando agora uma "UndeclaredVariableException"

232
00:13:42,950 --> 00:13:45,404
com uma razoável mensagem.                 

233
00:13:46,080 --> 00:13:47,631
Neste episódio nós aprendemos

234
00:13:47,630 --> 00:13:49,906
como estabelecer exceptions no visitor

235
00:13:49,900 --> 00:13:51,897
úteis para mensagens de erro quando alcançadas

236
00:13:51,890 --> 00:13:54,706
sobre variáveis não existentes para produção.

237
00:13:54,700 --> 00:13:57,240
sobre um token nós podemos pegar as informações

238
00:13:57,240 --> 00:14:00,817
em qual número e coluna do erro está contido

239
00:14:00,810 --> 00:14:02,191
e através do tipo da exceção

240
00:14:02,190 --> 00:14:05,044
podemos ainda dizer exatamente qual problema apresenta.

241
00:14:05,040 --> 00:14:07,017
Com isso temos uma fundação sólida

242
00:14:07,017 --> 00:14:09,010
para controle de erros.

243
00:14:09,010 --> 00:14:11,288
No próximo episódio nós iremos generalizar

244
00:14:11,280 --> 00:14:14,182
esta fundação e aplicá-la sobre outros erros.

245
00:14:14,180 --> 00:14:17,173
Como por exemplo quando uma variável é duplamente declarada.

246
00:14:17,484 --> 00:14:19,480
Quais problemas e soluções

247
00:14:19,480 --> 00:14:22,542
vocês encontraram no desenvolvimento de seus compiladores?

248
00:14:22,540 --> 00:14:24,240
Você tem alguma dúvida ou sugestão?

249
00:14:24,240 --> 00:14:26,151
Me escreva nos comentários!

250
00:14:26,150 --> 00:14:27,857
Não deixem de curtir 

251
00:14:27,850 --> 00:14:29,208
se vocês gostaram do vídeo

252
00:14:29,200 --> 00:14:31,973
e inscreva-se, para não perder nenhum episódio.

253
00:14:32,231 --> 00:14:33,662
Muito obrigado ao Gadarol,

254
00:14:33,660 --> 00:14:36,213
que me permitiu utilizar o seu estúdio para as gravações

255
00:14:36,210 --> 00:14:38,680
e muito obrigado a vocês pela atenção.

256
00:14:38,680 --> 00:14:41,577
Meu nome é Yankee, eu espero que vocês tenham se divertido,

257
00:14:41,570 --> 00:14:43,951
e até a próxima, com mais um episódio de:

258
00:14:43,951 --> 00:14:45,950
"Let's build a compiler".

