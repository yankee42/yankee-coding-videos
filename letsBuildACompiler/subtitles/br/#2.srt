1
00:00:00,000 --> 00:00:03,170
Bem-vindo à segunda parte do "Let's build a compiler".

2
00:00:03,170 --> 00:00:07,370
Nesta parte eu irei lhes mostrar como contar números quaisquer, com aceitação de operadores.

3
00:00:07,370 --> 00:00:10,900
e como escrever cadeias de caracteres na gramática do ANTLR.

4
00:00:10,900 --> 00:00:14,620
Até agora o nosso parser está reconhecivelmente muito chato.

5
00:00:14,620 --> 00:00:18,390
Tudo o que o nosso parser pode, por parsing, é fazer a conta "3+2",

6
00:00:18,390 --> 00:00:21,340
mais nada. Ele nem pode fazer "1+1" ainda.

7
00:00:21,340 --> 00:00:24,000
Mhh. Isto ainda é realmente muito simples.

8
00:00:24,000 --> 00:00:26,590
Nós também queremos expandir logo o nosso parser,

9
00:00:26,590 --> 00:00:29,660
para que ele aceite qualquer número.

10
00:00:29,660 --> 00:00:33,650
Nós abriremos novamente a nossa gramática

11
00:00:34,300 --> 00:00:39,010
e iremos pela primeira vez trabalhar com regras léxicas.

12
00:00:39,010 --> 00:00:42,390
Nós temos aqui, por enquanto, regras léxicas implícitas,

13
00:00:42,390 --> 00:00:44,220
que são estas três aqui,

14
00:00:44,220 --> 00:00:50,090
três regras léxicas implícitas, que podemos também descrever, como poderemos dizer, assim:

15
00:00:50,090 --> 00:00:57,960
Três é um 3, e um mais é um +

16
00:00:57,960 --> 00:01:02,730
e isto logo, naturalmente, é o mesmo com o dois, como você pode imaginar.

17
00:01:05,510 --> 00:01:08,550
E então podemos aqui em cima escrever:

18
00:01:08,550 --> 00:01:13,820
Três mais dois.

19
00:01:14,500 --> 00:01:17,020
O que esta regra léxica faz?

20
00:01:17,020 --> 00:01:20,940
Por primeiro, ela deixa um lexer sobre o nosso código fonte de entrada

21
00:01:20,940 --> 00:01:23,240
e apenas então o parser.

22
00:01:23,240 --> 00:01:26,290
Como é que vemos o que o lexer nos dá como saída?

23
00:01:26,290 --> 00:01:30,010
Continuando, também podemos ver aqui nosso TestRig a mão,

24
00:01:30,010 --> 00:01:35,960
ele tem, próximo das opções, aquelas que até agora vimos

25
00:01:35,960 --> 00:01:40,920
e também a opção "-tokens". A opção "-tokens"

26
00:01:40,920 --> 00:01:45,350
nos fornece tokens, aqueles que o lexer gerou para nós.

27
00:01:47,720 --> 00:01:52,960
Isto significa que o comando que procuro novamente, HACH aqui está,

28
00:01:53,160 --> 00:01:56,310
não, nós não escrevemos nenhum disparate lá atrás

29
00:01:56,310 --> 00:02:02,230
e... desta vez com a opção "-tokens".

30
00:02:02,230 --> 00:02:04,650
Aqui ele diz agora que havia saído junto,

31
00:02:04,650 --> 00:02:12,360
nós temos quatro Tokens, uma vez sendo... o três, o mais, o dois e o EOF.

32
00:02:12,360 --> 00:02:17,180
No momento, os nossos tokens são, coincidentemente, exatamente um caractere longos,

33
00:02:17,180 --> 00:02:19,000
mas isto não necessariamente precisa ser assim, como

34
00:02:19,000 --> 00:02:21,530
quando nós tínhamos de exemplo o número 42,

35
00:02:21,530 --> 00:02:23,470
tínhamos nosso número com dois dígitos

36
00:02:23,470 --> 00:02:27,100
e nós queremos então pegá-los para que fiquem em um token juntos.

37
00:02:27,100 --> 00:02:31,110
Como humanos, quando nós digitamos, o fazemos de forma automática,

38
00:02:31,110 --> 00:02:33,570
quando nós lemos um número, consideramos a maioria deles

39
00:02:33,570 --> 00:02:38,090
não como se tivessem dígitos separados, mas como um número que nos serve unido

40
00:02:38,090 --> 00:02:40,280
e isto é o que o lexer faz para nós:

41
00:02:40,280 --> 00:02:44,340
Ele mais ou menos, resumidamente, mostra mais caracteres como saída

42
00:02:44,540 --> 00:02:48,050
para que apenas um token seja chamado junto.

43
00:02:48,050 --> 00:02:51,020
Por último temos ainda aqui um token EOF,

44
00:02:51,020 --> 00:02:52,910
que é chamado de "End Of File",

45
00:02:52,910 --> 00:02:55,560
para simplesmente nos dar apenas esta... a mensagem

46
00:02:55,560 --> 00:02:58,090
para o nosso compilador, de que o fim do arquivo chegou,

47
00:02:58,090 --> 00:03:02,550
isto na realidade não é, verdadeiramente, uma aviso do nosso arquivo.

48
00:03:04,690 --> 00:03:07,300
Agora ehm...

49
00:03:07,300 --> 00:03:11,780
queremos, no entanto, aceitar qualquer número, isto eu chamo

50
00:03:11,780 --> 00:03:16,970
ao fixar um regra léxica "ZAHL" (N.T.: número) e aqui posso agora simplesmente falar,

51
00:03:16,970 --> 00:03:19,680
entre colchetes de zero até nove

52
00:03:19,680 --> 00:03:22,750
estas são expressões regulares, se você conhece expressões regulares,

53
00:03:22,750 --> 00:03:27,540
então você já pode lê-lo, senão, não é muito complicado,

54
00:03:28,590 --> 00:03:31,080
os entre colchetes na realidade, simplesmente chamam:

55
00:03:31,080 --> 00:03:35,920
Um caractere qualquer dentro deste alcance, que eu aqui forneci.

56
00:03:35,920 --> 00:03:37,910
Eu também coloco a adição mais uma vez para fins de esclarecimento.

57
00:03:37,910 --> 00:03:40,040
Zero até nove é chamado agora nessa localização

58
00:03:40,040 --> 00:03:44,420
ou 0, 1, 2, 3 e assim por diante até 9. Um deles.

59
00:03:44,550 --> 00:03:49,210
Agora eu ainda irei naturalmente quantificá-los, porque eu também quero poder aceitar o 42

60
00:03:49,210 --> 00:03:51,620
e não apenas os números 0 até 9

61
00:03:51,620 --> 00:03:55,160
e para quantificar nós devemos jogar o "mais" junto.

62
00:03:55,160 --> 00:03:58,320
Se eu escrever um "mais" atrás, isto significa:

63
00:03:58,320 --> 00:04:02,090
pelo menos uma vez, mas quantas vezes desejar.

64
00:04:03,100 --> 00:04:07,010
Então nós precisamos também cuidar da nossa regra aqui em cima

65
00:04:07,010 --> 00:04:09,710
e nós escrevemos então "ZAHL" (N.T.: número),

66
00:04:09,710 --> 00:04:13,140
este "mais" eu primeiro deixo de novo como já estava,

67
00:04:13,140 --> 00:04:16,420
mais um número adiante.

68
00:04:19,240 --> 00:04:22,590
Agora nós devemos novamente passar pelo nosso processo

69
00:04:22,590 --> 00:04:25,320
e mais uma vez executar o ANTLR,

70
00:04:25,320 --> 00:04:27,190
que eu ainda tenho aqui em algum lugar.

71
00:04:35,460 --> 00:04:37,750
É isso aí.

72
00:04:47,660 --> 00:04:52,060
Então nós devemos novamente compilar os novos arquivos

73
00:04:56,350 --> 00:05:00,970
e agora podemos novamente deixar construir a nossa árvore.

74
00:05:06,420 --> 00:05:10,640
E então deixar mostrar a nova árvore

75
00:05:10,640 --> 00:05:13,750
E, oh milagre, não se alterou,

76
00:05:13,750 --> 00:05:17,620
porque eu também tenho nosso código fonte, então o nosso parser não se alterou.

77
00:05:17,620 --> 00:05:19,850
Não faz diferença, faremos isso da próxima

78
00:05:19,850 --> 00:05:23,270
e provamos verdadeiramente que agora também funciona com qualquer expressão.

79
00:05:23,270 --> 00:05:29,900
Também abrimos nosso arquivo "code.demo"

80
00:05:29,900 --> 00:05:37,490
e escrevemos aqui agora em vez de "3+2", "3+42".

81
00:05:39,980 --> 00:05:47,720
fechamos isto e deixamos nosso TestRig rodar novamente

82
00:05:48,390 --> 00:05:50,790
Sim, isto funcionou direitinho.

83
00:05:56,940 --> 00:06:01,210
E então ele nos mostra... deixa mostrar a árvore

84
00:06:01,210 --> 00:06:03,480
e como você pode ver, ela se alterou,

85
00:06:03,480 --> 00:06:06,440
nossa árvore agora também contém o 42

86
00:06:06,440 --> 00:06:09,980
e nosso parser pode agora, com qualquer adição,

87
00:06:09,980 --> 00:06:12,850
perceber dois números

88
00:06:12,850 --> 00:06:16,420
A seguir nós queremos também suportar cadeias de expressões.

89
00:06:16,420 --> 00:06:19,970
Também após isso, no nosso código de exemplo

90
00:06:19,970 --> 00:06:24,660
adicionamos ainda atrás disso em diante, "+5+6", e assim temos nossas cadeias de expressões.

91
00:06:24,660 --> 00:06:29,780
O que acontece se nós fizermos estes cálculos sobre nosso atual parser, deixando-o livre?

92
00:06:33,320 --> 00:06:35,410
Nós geramos a árvore,

93
00:06:35,410 --> 00:06:37,630
nos é mostrada a árvore

94
00:06:37,630 --> 00:06:40,860
e seguramos: ela não se alterou.

95
00:06:40,860 --> 00:06:45,530
Como pode isso? Por que foi que o "+5+6" foi ignorado?

96
00:06:45,530 --> 00:06:48,030
Mostramos por que na gramática:

97
00:06:55,420 --> 00:06:59,250
Aqui você pode ver nossa regra do parser "addition",

98
00:06:59,250 --> 00:07:01,800
iniciando apenas através de uma pesquisa de números,

99
00:07:01,800 --> 00:07:04,180
então um "mais" e então mais um número.

100
00:07:04,180 --> 00:07:06,020
E então simplesmente para.

101
00:07:06,020 --> 00:07:09,200
Independente do que ainda vier, será ignorado.

102
00:07:09,200 --> 00:07:12,070
Isto nós queremos mudar de agora em diante,

103
00:07:12,340 --> 00:07:14,700
aqui temos muitas possibilidades a mais.

104
00:07:14,700 --> 00:07:18,710
A opção mais óbvia é simplesmente mudar iterativamente.

105
00:07:18,710 --> 00:07:21,040
Isto significa que criaremos aqui um grupo

106
00:07:21,040 --> 00:07:24,910
e diremos, tal parte pode arbitrariamente ocorrer frequentemente

107
00:07:25,180 --> 00:07:30,910
Passado isso, agora é possível número, mais número, mais número, mais número

108
00:07:31,830 --> 00:07:35,270
tão frequentemente quanto ele deva ocorrer.

109
00:07:35,270 --> 00:07:39,600
Testaremos por vez com a gramática o que se passa com a nossa árvore.

110
00:07:40,220 --> 00:07:45,630
Eu crio primeiro o novo parser,

111
00:07:46,160 --> 00:07:49,400
compilo as coisas

112
00:07:50,670 --> 00:07:54,720
e então geramos a árvore,

113
00:07:54,940 --> 00:07:56,990
nos é mostrada a árvore

114
00:07:57,520 --> 00:07:59,980
e verdadeiramente, funcionou:

115
00:07:59,980 --> 00:08:03,410
Na nossa árvore consta agora ainda "+5+6".

116
00:08:03,590 --> 00:08:05,620
No entanto, infelizmente,

117
00:08:05,620 --> 00:08:09,490
nós não podemos mais acessar o sistema a partir do que foi inicialmente

118
00:08:09,490 --> 00:08:14,130
aplicado, para agora percorrermos por meio da árvore em pós-ordem

119
00:08:14,130 --> 00:08:17,320
e nossas instruções para o processador parem.

120
00:08:17,320 --> 00:08:19,130
Se nós percorrermos aqui em pós-ordem,

121
00:08:19,130 --> 00:08:23,110
então teríamos o significado (e também o sinal de mais ignorado juntamente),

122
00:08:23,110 --> 00:08:28,130
no qual chegamos por 3, 42, 5, 4 e então "addition"

123
00:08:28,130 --> 00:08:32,720
e que são, definitivamente, muito poucas instruções de adição.

124
00:08:32,720 --> 00:08:36,220
Também é melhor do que se nós pensarmos de uma forma diferente,

125
00:08:36,220 --> 00:08:38,460
assim o nosso sistema pode manter-se.

126
00:08:39,490 --> 00:08:44,100
Agora vamos fazer é nossa regra recursiva para construção.

127
00:08:44,100 --> 00:08:47,160
Para isso abrimos novamente a nossa gramática

128
00:08:47,840 --> 00:08:52,180
e removemos nossa definição iterativa

129
00:08:52,180 --> 00:08:55,410
e substituímos ela por meio de uma definição recursiva.

130
00:08:55,410 --> 00:08:57,380
Isso funciona de maneira simples:

131
00:08:57,380 --> 00:09:00,260
Nós escrevemos aqui em vez de "Zahl", "addition"

132
00:09:00,260 --> 00:09:05,930
e agora o parser pode cada vez, se ele avaliar uma regra de adição aqui

133
00:09:05,930 --> 00:09:10,850
não apenas esperar um número no local, mas novamente uma adição.

134
00:09:10,850 --> 00:09:15,650
No entanto, esta recurção no momento ainda não tem fim. Nós precisamos também de uma condição de término.

135
00:09:15,650 --> 00:09:20,860
Para tanto, damos aqui uma alternativa aonde nós escrevemos um "oder"(ou) abaixo,

136
00:09:20,860 --> 00:09:26,060
você não precisa também escrever uma nova linha, como eu gerei, mas

137
00:09:26,060 --> 00:09:31,420
isto é o que foi convencionado, por assim dizer, para alguém ler ao fim de forma ainda ordenada

138
00:09:31,420 --> 00:09:33,890
E escrevemos aqui mais uma vez ali "ZAHL" (N.T.: número).

139
00:09:33,890 --> 00:09:39,290
Agora pode-se também atribuir uma adição para uma adição,

140
00:09:39,290 --> 00:09:42,400
uma vez que apenas um número é mais um número adiante.

141
00:09:42,400 --> 00:09:46,390
Ou a adição pode ser estabelecida como uma adição,

142
00:09:46,390 --> 00:09:49,530
a proximidade que uma adição é,

143
00:09:49,530 --> 00:09:52,170
ela então facilmente é um primeiro número

144
00:09:52,170 --> 00:09:56,050
e então a recursão segue novamente de volta

145
00:09:56,050 --> 00:09:59,910
e pode novamente chegar mais um número e, mais uma vez, mais um número

146
00:09:59,910 --> 00:10:02,580
e então nós alcançamos novamente o topo.

147
00:10:02,580 --> 00:10:06,770
Veremos agora, como isso parece na nossa árvore.

148
00:10:08,010 --> 00:10:12,840
Eu também coloco a seguir o parser de novo,

149
00:10:12,840 --> 00:10:17,100
então compilamos o parser

150
00:10:17,820 --> 00:10:21,300
e geramos a árvore,

151
00:10:21,970 --> 00:10:24,660
é mostrada a árvore,

152
00:10:26,090 --> 00:10:30,980
Agora você pode ver aqui uma definição recursiva da nossa árvore,

153
00:10:31,310 --> 00:10:35,810
O lado esquerdo da nossa árvore tem sempre cada "addition",

154
00:10:35,810 --> 00:10:38,790
você pode nos calcular o início

155
00:10:38,790 --> 00:10:43,750
na diagonal aqui lida abaixo, a saber "3+42+5+6"

156
00:10:43,750 --> 00:10:47,150
e nós podemos com o nosso compilador depois simplesmente

157
00:10:47,150 --> 00:10:49,720
gerar nossas instruções nesta árvore

158
00:10:49,720 --> 00:10:53,090
Infelizmente, não posso lhes poupar neste momento certa confusão,

159
00:10:53,090 --> 00:10:57,020
por esta parte aqui da árvore representar um caso especial,

160
00:10:57,020 --> 00:11:00,890
porque ela tem apenas um filho e através daqui em diante no nosso compilador

161
00:11:00,890 --> 00:11:04,300
nenhuma instrução de adição é gerada.

162
00:11:04,300 --> 00:11:07,450
Isto, porém, mais tarde no compilador não daria problema algum,

163
00:11:07,450 --> 00:11:11,040
por infelizmente, ter sido a única no momento que pode falar

164
00:11:11,040 --> 00:11:13,480
para o resto funcionar muito bem.

165
00:11:13,480 --> 00:11:16,790
Se nós percorrermos agora pela esquerda,

166
00:11:16,790 --> 00:11:20,700
sempre primeiro pelo lado esquerdo, então o lado direito, e então a raiz

167
00:11:20,700 --> 00:11:25,480
e, neste caso especial, apenas levado em conta a partir do 3,

168
00:11:25,480 --> 00:11:32,840
então nós temos 3, 42, adiciona, 5, adiciona, 6, adiciona.

169
00:11:32,840 --> 00:11:37,020
E com isso, chegamos com as instruções corretas

170
00:11:37,020 --> 00:11:40,790
com todo esse cálculo daqui passando por execução.

171
00:11:40,790 --> 00:11:44,240
Este foi o segundo capítulo de "Let's build a compiler".

172
00:11:44,240 --> 00:11:47,470
Nos próximos episódios nós continuaremos a executar operações,

173
00:11:47,470 --> 00:11:52,490
inclusive a ordem de precedência de operadores, executando a demostração do código e muito mais.

174
00:11:52,490 --> 00:11:55,770
Mais uma vez você encontra na descrição do vídeo um link-afiliado

175
00:11:55,770 --> 00:11:58,680
para o livro "The definitve ANTLR4-Reference",

176
00:11:58,680 --> 00:12:01,400
através dele eu ganho uma percentagem se você comprar o livro

177
00:12:01,400 --> 00:12:03,250
ou ainda comprar uma geladeira.

178
00:12:03,250 --> 00:12:07,220
Obrigado ao Gadarol, que nos permitiu usar o seu estúdio para as gravações.

179
00:12:07,220 --> 00:12:10,760
e agradeço a vocês pela atenção, espero que tenha sido divertido

180
00:12:10,760 --> 00:12:14,250
não deixe de assistir o próximo "Let's build a compiler"

181
00:12:14,250 --> 00:12:18,470
Meu nome é Yankee, adeus e até mais ver. Até a próxima.

