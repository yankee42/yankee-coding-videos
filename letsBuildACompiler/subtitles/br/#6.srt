1
00:00:00,000 --> 00:00:03,270
Bem-vindo de volta ao "Let's Build a compiler",

2
00:00:03,270 --> 00:00:04,580
neste episódio iremos

3
00:00:04,580 --> 00:00:07,300
escrever testes automatizados para o nosso compilador.

4
00:00:07,300 --> 00:00:08,490
Construiremos o setup

5
00:00:08,490 --> 00:00:10,360
pode parecer difícil a primeira vista,

6
00:00:10,360 --> 00:00:11,730
mas vale a pena.

7
00:00:11,730 --> 00:00:13,010
Porque com cada mudança,

8
00:00:13,010 --> 00:00:15,050
que realizamos nos nosso compilador

9
00:00:15,050 --> 00:00:17,360
podemos provar como que num toque de um botão,

10
00:00:17,360 --> 00:00:19,470
se tudo que implementamos anteriormente

11
00:00:19,470 --> 00:00:20,510
ainda funciona.

12
00:00:20,940 --> 00:00:22,100
Meu nome é Yankee

13
00:00:22,100 --> 00:00:24,360
e eu desejo que vocês se divirtam.

14
00:00:25,190 --> 00:00:28,040
Primeiro, vamos construir um ambiente de testes.

15
00:00:28,040 --> 00:00:30,320
Para isso eu usaria o TestNG,

16
00:00:30,320 --> 00:00:33,510
você pode também, naturalmente, se estiver acostumado,

17
00:00:33,510 --> 00:00:35,460
utilizar outro framework de testes,

18
00:00:35,460 --> 00:00:38,030
como, por exemplo, JUnit.

19
00:00:38,300 --> 00:00:40,590
Para colocar o TestNG no Eclipse

20
00:00:40,590 --> 00:00:42,880
você vai para o testng.org,

21
00:00:42,880 --> 00:00:44,690
baixe-o aqui no "Download",

22
00:00:44,690 --> 00:00:46,230
então faça uma cópia para si

23
00:00:46,230 --> 00:00:47,830
do endereço daqui,

24
00:00:47,830 --> 00:00:49,860
penso que você tenha o Eclipse aberto

25
00:00:49,860 --> 00:00:53,930
em sua mais recente, aqui é a versão 3.4.

26
00:00:54,380 --> 00:00:56,790
Então vá no seu Eclipse

27
00:00:56,790 --> 00:00:59,440
"Help"->"Install New Software...",

28
00:00:59,850 --> 00:01:02,760
cole o endereço aqui dentro,

29
00:01:02,760 --> 00:01:03,960
pressione o enter,

30
00:01:03,960 --> 00:01:06,810
então venha aqui debaixo do "TestNG"

31
00:01:06,810 --> 00:01:08,830
como uma versão candidata,

32
00:01:08,830 --> 00:01:10,620
clique aqui em avançar, no próximo,

33
00:01:10,620 --> 00:01:11,740
você então deixa executar,

34
00:01:11,740 --> 00:01:13,450
Eu já tenho feito para vocês

35
00:01:13,450 --> 00:01:15,450
para você não se aborrecer com isso

36
00:01:15,450 --> 00:01:17,450
e então podemos prosseguir.

37
00:01:17,450 --> 00:01:19,180
Então iremos primeiro agora

38
00:01:19,180 --> 00:01:21,290
no nosso projeto de compilador

39
00:01:21,290 --> 00:01:25,490
deixar um... nove... diretórios fonte

40
00:01:25,490 --> 00:01:26,600
para os nossos testes,

41
00:01:26,600 --> 00:01:28,600
então chamaremos "test" também

42
00:01:29,600 --> 00:01:31,650
neste aquivo "test"

43
00:01:31,650 --> 00:01:34,300
iremos criar uma nova classe TestNG,

44
00:01:34,300 --> 00:01:36,370
então iremos simplesmente no "New"->"Other",

45
00:01:36,370 --> 00:01:38,370
então "TestNG class",

46
00:01:39,060 --> 00:01:41,610
no nosso "test folder",

47
00:01:43,140 --> 00:01:51,950
no pacote "de.letsbuildacompiler.compiler".

48
00:01:51,950 --> 00:01:54,800
Então chamamos o teste de "CompilerTest"

49
00:01:56,750 --> 00:01:58,670
e então vamos no finish,

50
00:01:59,000 --> 00:02:02,450
deixamos corrigir... esse parágrafo

51
00:02:02,450 --> 00:02:04,470
e então o Eclipse ainda reclama,

52
00:02:04,470 --> 00:02:06,600
que não encontrou o "org.testng",

53
00:02:06,600 --> 00:02:08,710
mas se eu simplesmente apenas clicar com o mouse,

54
00:02:08,710 --> 00:02:10,540
então aqui ele encontra pelo Quick-fixes

55
00:02:10,540 --> 00:02:13,270
na primeira opção "Add TestNG library",

56
00:02:13,270 --> 00:02:14,720
então clicamos em cima

57
00:02:15,190 --> 00:02:17,010
e logo o Eclipse está contente.

58
00:02:17,010 --> 00:02:19,640
Então iremos gerar automaticamente

59
00:02:19,640 --> 00:02:22,380
os métodos de teste renomeando-os com os, muito informativos,

60
00:02:22,380 --> 00:02:23,530
nomes "f"

61
00:02:24,630 --> 00:02:26,460
e de fato, queremos nesse método

62
00:02:26,460 --> 00:02:29,490
testar agora se a Output faz sentido

63
00:02:29,490 --> 00:02:32,320
a partir do saída que recebemos,

64
00:02:32,320 --> 00:02:34,080
quais nós compilamos

65
00:02:34,080 --> 00:02:36,190
e então o que deixamos executando.

66
00:02:36,640 --> 00:02:39,200
Por isso também chamamos nosso método de teste

67
00:02:39,200 --> 00:02:41,310
de acordo

68
00:02:42,100 --> 00:02:52,060
"runningCode_outputsExpectedText".

69
00:02:52,790 --> 00:02:54,610
Ele trabalha com dois parâmetros,

70
00:02:54,610 --> 00:02:56,130
que é o código

71
00:02:57,370 --> 00:03:01,360
e o "expectedText".

72
00:03:07,610 --> 00:03:10,960
Os métodos de teste... dividem-se

73
00:03:10,960 --> 00:03:13,000
em uma "Execution",

74
00:03:13,820 --> 00:03:17,190
se tornando o Output de verdade,

75
00:03:17,190 --> 00:03:19,190
o "actualOutput"

76
00:03:29,560 --> 00:03:31,770
e depois nós iremos rever

77
00:03:31,770 --> 00:03:35,360
se o resultado também é igual ao que esperamos.

78
00:03:39,920 --> 00:03:42,580
Podemos fazer isto com uma Assertion,

79
00:03:42,580 --> 00:03:46,110
Para isso, chamamos "Assert.assertEquals"

80
00:03:54,970 --> 00:03:58,450
e simplesmente, assim rápido, já está pronto o nosso método de teste.

81
00:04:00,030 --> 00:04:01,490
A seguir, queremos o código

82
00:04:01,490 --> 00:04:03,100
no nosso método "compileAndRun",

83
00:04:03,100 --> 00:04:05,890
para que possa criar o nosso compilador.

84
00:04:05,890 --> 00:04:07,550
Para o nosso código poder compilar,

85
00:04:07,550 --> 00:04:09,050
precisamos do jar do Jasmin.

86
00:04:09,050 --> 00:04:11,340
Também o levamos para dentro do nosso projeto,

87
00:04:11,340 --> 00:04:13,150
criando aqui novamente um novo diretório,

88
00:04:13,150 --> 00:04:16,330
no qual chamamos o "lib" em antigo endereço,

89
00:04:18,420 --> 00:04:20,040
vamos aqui para o "Import",

90
00:04:20,040 --> 00:04:23,000
retiramos do "File System"

91
00:04:23,390 --> 00:04:26,280
nosso jar do Jasmin,

92
00:04:27,240 --> 00:04:28,600
então precisamos do "Build Path"

93
00:04:28,600 --> 00:04:30,600
que serva conforme

94
00:04:33,020 --> 00:04:36,640
e adicionar o jar,

95
00:04:36,640 --> 00:04:38,710
o "jasmin.jar"

96
00:04:40,260 --> 00:04:41,560
e então podemos continuar

97
00:04:41,560 --> 00:04:43,630
com o método "compileAndRun".

98
00:04:43,630 --> 00:04:45,490
Nós vamos aqui com o cursor em cima,

99
00:04:45,490 --> 00:04:47,100
clicamos Ctrl+1

100
00:04:47,100 --> 00:04:49,730
e iremos em "create method"

101
00:04:49,730 --> 00:04:51,040
e enter.

102
00:04:51,040 --> 00:04:52,300
Então já chegamos aqui em

103
00:04:52,300 --> 00:04:54,130
um esqueleto para gerar o nosso método

104
00:04:54,130 --> 00:04:55,830
com a assinatura correta

105
00:04:55,830 --> 00:04:57,430
e podemos continuar.

106
00:04:57,430 --> 00:04:59,470
Primeiro, queremos agora, com o código,

107
00:04:59,470 --> 00:05:02,690
transferido aqui, seja compilado.

108
00:05:02,690 --> 00:05:04,480
Vamos fazer isso na

109
00:05:04,480 --> 00:05:07,540
criação de um "ClassFile"

110
00:05:15,400 --> 00:05:17,610
e dentro dessa "ClassFile"

111
00:05:17,610 --> 00:05:19,610
inserimos o nosso código.

112
00:05:20,990 --> 00:05:25,240
Para isso, chamamos o método "readJasmin",

113
00:05:25,240 --> 00:05:28,970
transferindo um StringReader com nosso Code,

114
00:05:29,550 --> 00:05:31,340
o nome não nos interessa aqui,

115
00:05:31,340 --> 00:05:34,410
então simplesmente passamos uma String vazia

116
00:05:34,410 --> 00:05:36,990
e "numberLines" eu explicarei posteriormente

117
00:05:36,990 --> 00:05:38,310
para o que serve,

118
00:05:38,310 --> 00:05:40,410
agora faremos a Flag daqui simplesmente receber "false",

119
00:05:40,410 --> 00:05:41,980
porque não a precisamos.

120
00:05:41,980 --> 00:05:44,550
Já temos nossa classe compilada.

121
00:05:44,550 --> 00:05:46,480
Agora necessitamos que esse "classFile"

122
00:05:46,480 --> 00:05:48,510
tenha apenas o que estiver na "in-memory" no momento,

123
00:05:48,510 --> 00:05:50,510
e ainda escreva em um arquivo.

124
00:05:50,510 --> 00:05:53,360
Para isso, primeiro criamos uma

125
00:05:53,490 --> 00:05:55,460
variável com um arquivo

126
00:05:55,460 --> 00:05:57,460
para que possamos trabalhar,

127
00:05:59,450 --> 00:06:01,200
agora o chamamos simplesmente de "tempDir",

128
00:06:01,200 --> 00:06:03,530
porque a intenção é de ser um diretório temporário,

129
00:06:03,530 --> 00:06:04,590
que sempre estaremos alterando

130
00:06:04,590 --> 00:06:06,390
novamente até que possamos deletar

131
00:06:08,850 --> 00:06:11,300
e então queremos escrever

132
00:06:11,300 --> 00:06:13,300
dentro de nossos arquivos

133
00:06:18,210 --> 00:06:20,430
para ficar no

134
00:06:21,030 --> 00:06:23,350
"tempdir", e como nome,

135
00:06:23,550 --> 00:06:24,810
o nome da classe,

136
00:06:24,810 --> 00:06:26,140
então conseguimos retirar

137
00:06:26,140 --> 00:06:29,980
chamando classFile.getClassName(),

138
00:06:30,160 --> 00:06:33,980
mais o fim ".class".

139
00:06:36,560 --> 00:06:38,440
e então nós vamos

140
00:06:38,440 --> 00:06:43,470
chamar "classFile.write",

141
00:06:43,470 --> 00:06:45,830
tendo ele agora um OutputStream

142
00:06:45,830 --> 00:06:49,050
e deve referir nosso "outputPath",

143
00:06:49,050 --> 00:06:50,420
então vamos agora atrás dele para chamar

144
00:06:50,420 --> 00:06:52,990
o nosso "Files.newOutputStream",

145
00:06:53,380 --> 00:06:55,660
passando o nosso OutputPath

146
00:06:55,660 --> 00:06:58,110
e não passamos nenhuma "Options".

147
00:06:59,350 --> 00:07:00,650
Agora apenas precisamos

148
00:07:00,650 --> 00:07:02,490
a classe, que aqui nós geramos

149
00:07:02,490 --> 00:07:04,030
para executar

150
00:07:04,560 --> 00:07:05,730
e o resultado

151
00:07:05,730 --> 00:07:08,100
retornado junto da saída.

152
00:07:14,310 --> 00:07:15,320
Nós iremos da mesma maneira

153
00:07:15,320 --> 00:07:17,950
criar o método "runJavaClass"

154
00:07:17,950 --> 00:07:21,600
que deve simplesmente executar no tempDir

155
00:07:21,780 --> 00:07:24,340
a classe com o nome,

156
00:07:25,050 --> 00:07:29,780
com "classFile.getClassName()".

157
00:07:30,510 --> 00:07:33,830
Além isso, aqui ainda temos um par de falhas

158
00:07:34,100 --> 00:07:36,510
porque nós não temos nos importado com Exceptions,

159
00:07:36,510 --> 00:07:37,740
que eu ainda escreverei

160
00:07:37,740 --> 00:07:39,710
em um "throws Exception"

161
00:07:39,710 --> 00:07:41,160
acima no método,

162
00:07:41,160 --> 00:07:42,940
e quando uma Exception é lançada,

163
00:07:42,940 --> 00:07:43,910
então nós não precisamos

164
00:07:43,910 --> 00:07:45,520
interceptar junto de um teste,

165
00:07:45,520 --> 00:07:48,030
o teste deve então simplesmente falhar.

166
00:07:48,250 --> 00:07:49,590
E então criamos para nós

167
00:07:49,590 --> 00:07:52,010
naturalmente, mais um método "runJavaClass".

168
00:07:52,420 --> 00:07:55,100
Novamente com um Ctrl+1 -> "create method"

169
00:07:57,820 --> 00:08:00,410
e já estamos de novo com um passinho a frente.

170
00:08:01,110 --> 00:08:03,180
Para isso, posso iniciar

171
00:08:03,180 --> 00:08:05,460
um novo processo Java separado,

172
00:08:05,460 --> 00:08:08,450
apenas por certeza, com tudo estando separado

173
00:08:09,070 --> 00:08:11,600
e para que possamos fazer nele a

174
00:08:11,600 --> 00:08:18,380
chamada de "Runtime.getRuntime().exec()"

175
00:08:18,380 --> 00:08:21,420
e agora passamos aqui um Array

176
00:08:21,420 --> 00:08:24,160
com o nosso comando.

177
00:08:27,170 --> 00:08:30,980
Nós criamos também uma nova Stringarray

178
00:08:33,540 --> 00:08:35,430
e consta nela nosso comando,

179
00:08:35,430 --> 00:08:37,530
que seria "java",

180
00:08:38,020 --> 00:08:42,460
então pegamos o Classpath explicitamente fornecido,

181
00:08:42,460 --> 00:08:46,150
porque o Classpath é nosso

182
00:08:46,150 --> 00:08:48,470
arquivo, onde nossa classe é encontrada

183
00:08:48,470 --> 00:08:50,230
porque designo aqui, mais uma vez

184
00:08:50,230 --> 00:08:52,230
no "dir" simplesmente

185
00:08:53,860 --> 00:08:55,070
e naturalmente precisamos

186
00:08:55,070 --> 00:08:57,770
apenas da representação da String,

187
00:08:58,310 --> 00:09:00,040
e então pegamos de novo dele

188
00:09:00,040 --> 00:09:02,310
passando o "className".

189
00:09:03,540 --> 00:09:05,760
Nesta chamada de método

190
00:09:05,760 --> 00:09:08,050
nós recebemos agora um processo,

191
00:09:08,050 --> 00:09:10,270
então salvamos dentro de uma variável

192
00:09:10,270 --> 00:09:14,770
eu marco simplesmente e pressiono Alt+Shift+L,

193
00:09:15,900 --> 00:09:18,450
então damos um nome para a variável

194
00:09:18,890 --> 00:09:20,700
e aqui então temos nosso processo.

195
00:09:20,700 --> 00:09:23,200
Ele joga naturalmente mais uma vez Exceptions,

196
00:09:23,200 --> 00:09:25,680
por isso, adiciono aqui um genérico

197
00:09:25,680 --> 00:09:28,120
"throws Exception"

198
00:09:31,770 --> 00:09:34,020
e agora podemos

199
00:09:34,550 --> 00:09:36,370
pegar o InputStream,

200
00:09:36,370 --> 00:09:39,250
a partir desse processo, que por sua vez, é um OutputStream

201
00:09:53,370 --> 00:09:55,280
e agora podemos

202
00:09:55,280 --> 00:09:58,240
completar a leitura do InputStream

203
00:09:58,240 --> 00:10:01,670
e retornar como String o resultado conjunto.

204
00:10:02,210 --> 00:10:05,270
Para isso, pego agora através de um pequeno truque,

205
00:10:05,270 --> 00:10:07,560
enquanto o código é de outra forma

206
00:10:07,560 --> 00:10:08,960
muito comprido e feio,

207
00:10:08,960 --> 00:10:10,770
agora também não é absolutamente o mais bonito,

208
00:10:10,770 --> 00:10:12,020
do que alguém poderia imaginar,

209
00:10:12,020 --> 00:10:14,450
mas é ao menos curto e rapidamente declarado:

210
00:10:14,790 --> 00:10:17,550
Eu crio um novo Scanner,

211
00:10:18,880 --> 00:10:22,060
que pode ler a partir do InputStream

212
00:10:22,420 --> 00:10:27,950
e deve com o "useDelimiter(\\A)",

213
00:10:27,950 --> 00:10:31,620
que significa "por favor, leia até o fim do arquivo"

214
00:10:31,780 --> 00:10:33,770
e então simplesmente o próximo

215
00:10:33,770 --> 00:10:36,410
e deixe ao menos algum resultado.

216
00:10:37,070 --> 00:10:39,250
Daí, por isso, escrevemos ainda "return" aqui

217
00:10:40,710 --> 00:10:42,950
e já está pronto este método.

218
00:10:43,170 --> 00:10:44,420
O que ainda temos para fazer?

219
00:10:44,420 --> 00:10:47,030
Nós devemos na frente de cada um dos teste

220
00:10:47,030 --> 00:10:49,030
colocar aqui o "tempDir",

221
00:10:49,870 --> 00:10:53,500
para que eu crie simplesmente um

222
00:10:53,500 --> 00:10:55,500
método público

223
00:10:57,850 --> 00:10:59,870
"createTempDir"

224
00:11:02,450 --> 00:11:06,370
e vamos aplicar em um diretório temporário

225
00:11:06,370 --> 00:11:09,900
e na nossa variável "tempDir" o caminho para salvar.

226
00:11:15,150 --> 00:11:17,360
Como prefixo podemos chamar eles de algo,

227
00:11:17,360 --> 00:11:19,900
eu chamarei aqui de "CompilerTest"

228
00:11:20,920 --> 00:11:23,320
e não precisamos passar nenhum atributo.

229
00:11:24,060 --> 00:11:26,130
Jogamos agora de novo para uma Exception,

230
00:11:26,130 --> 00:11:27,610
simplesmente colocamos

231
00:11:27,610 --> 00:11:29,690
na assinatura do método

232
00:11:29,690 --> 00:11:32,070
e então escrevemos nele aqui:

233
00:11:32,070 --> 00:11:34,400
"@BeforeMethod" para o  TestNG dizer:

234
00:11:34,400 --> 00:11:37,350
Ele deve fazer esta parte individualmente em cada teste.

235
00:11:37,350 --> 00:11:39,750
Então queremos naturalmente depois de cada teste

236
00:11:39,750 --> 00:11:41,250
novamente deletar o diretório,

237
00:11:41,250 --> 00:11:44,520
por isso, coloco aqui ainda mais um método

238
00:11:45,560 --> 00:11:47,980
"deleteTempDir".

239
00:11:52,060 --> 00:11:53,950
E algo simples como

240
00:11:53,950 --> 00:11:57,200
um diretório recursivo no Java a ser deletado

241
00:11:57,200 --> 00:11:58,700
é metade a se saber,

242
00:11:58,700 --> 00:12:01,490
assim vocês podem ficar um longo período na internet para ficar inteligentes,

243
00:12:01,490 --> 00:12:03,160
com tudo o que alguém pode considerar,

244
00:12:03,160 --> 00:12:04,680
eu agora, neste caso, não tenho

245
00:12:04,680 --> 00:12:07,180
nenhum conhecimento disso, mas

246
00:12:07,180 --> 00:12:11,000
chamo uma possibilidade simples e de solução curta

247
00:12:14,690 --> 00:12:18,180
e construo uma função "deleteRecursive",

248
00:12:18,450 --> 00:12:21,120
que nós no nosso "tempDir" como

249
00:12:21,120 --> 00:12:24,440
podemos passar o antigo "File"

250
00:12:26,200 --> 00:12:28,740
e o método pode então

251
00:12:28,740 --> 00:12:31,420
depois chamar cada método de teste.

252
00:12:32,810 --> 00:12:36,020
Agora devemos naturalmente implementar ainda

253
00:12:36,270 --> 00:12:38,020
o "deleteRecursive",

254
00:12:39,810 --> 00:12:42,140
funcionando assim, para que vejamos

255
00:12:42,140 --> 00:12:44,370
se "file" é um "directory"

256
00:12:46,520 --> 00:12:48,510
e se for o caso,

257
00:12:48,510 --> 00:12:52,710
então iteramos os "Directory"s sobre os filhos

258
00:13:03,790 --> 00:13:08,830
e dizemos aqui logo após "deleteRecursive"

259
00:13:08,830 --> 00:13:12,330
e então "file", então "child"

260
00:13:17,020 --> 00:13:19,000
e no fim do método

261
00:13:19,000 --> 00:13:21,090
nós mesmos deletamos o arquivo.

262
00:13:21,090 --> 00:13:23,750
E depois olhamos se funcionou:

263
00:13:26,230 --> 00:13:28,200
Porque se não foi o caso,

264
00:13:28,200 --> 00:13:30,420
então temos algum problema

265
00:13:31,590 --> 00:13:34,890
e nós apenas jogamos "Error" então.

266
00:13:52,090 --> 00:13:53,670
Assim. Pronto.

267
00:13:54,000 --> 00:13:57,390
Assim vemos então novamente o nosso método teste:

268
00:13:57,390 --> 00:13:59,420
Aqui ainda está jogada uma Exception,

269
00:13:59,420 --> 00:14:01,450
que nos conduz de novo simplesmente à frente

270
00:14:01,450 --> 00:14:03,550
com "throws Exception",

271
00:14:03,550 --> 00:14:05,240
se uma Exception for lançada,

272
00:14:05,240 --> 00:14:07,750
ela deve falhar nosso teste

273
00:14:07,750 --> 00:14:09,790
e agora precisamos ainda definir

274
00:14:09,790 --> 00:14:13,320
aonde o código e o texto esperado chegam.

275
00:14:13,320 --> 00:14:16,160
Para isso, criamos um "DataProvider".

276
00:14:16,660 --> 00:14:18,260
Funciona de maneira completamente simples:

277
00:14:18,260 --> 00:14:20,610
Nós criamos um método público,

278
00:14:20,610 --> 00:14:24,230
que fornece de retorno um objeto array de duas dimensões

279
00:14:24,230 --> 00:14:25,720
e chamamos:

280
00:14:25,720 --> 00:14:31,200
provide_code_expectedText()

281
00:14:35,680 --> 00:14:39,730
Ele simplesmente nos dá de retorno um valor fixo,

282
00:14:39,730 --> 00:14:42,680
no forma de um objeto array,

283
00:14:50,610 --> 00:14:52,200
e aqui dentro está colocado:

284
00:14:53,010 --> 00:14:55,740
Sempre um código e um resultado esperado.

285
00:14:55,740 --> 00:14:57,800
Como exemplo, temos agora como código aqui:

286
00:14:57,800 --> 00:15:01,300
"1+2", isto é um cálculo simples,

287
00:15:01,300 --> 00:15:03,700
que deve então ter o resultado

288
00:15:03,700 --> 00:15:05,570
de 3 e um quebra de linha,

289
00:15:05,570 --> 00:15:07,810
porque ele usa "println"

290
00:15:08,280 --> 00:15:10,130
de saída

291
00:15:12,840 --> 00:15:14,300
e nós devemos ainda

292
00:15:14,300 --> 00:15:17,250
pegar algum exemplo mais complexo,

293
00:15:17,250 --> 00:15:20,260
onde também ocorra um número com múltiplos dígitos,

294
00:15:20,260 --> 00:15:22,380
como nós iremos adicioná-los depois,

295
00:15:22,380 --> 00:15:24,570
como exemplo ainda, mais 42

296
00:15:24,570 --> 00:15:26,550
e então são 42 mais 3

297
00:15:26,550 --> 00:15:30,240
e isso deve dar na saída 45.

298
00:15:30,940 --> 00:15:32,740
Então precisamos aqui em cima no Test

299
00:15:32,740 --> 00:15:33,720
agora ainda fornecer,

300
00:15:33,720 --> 00:15:37,200
o que o DataProvider deve usar,

301
00:15:37,200 --> 00:15:40,670
para escrevermos então o nome deste método aqui dentro.

302
00:15:43,440 --> 00:15:44,990
Então salvamos isto,

303
00:15:46,240 --> 00:15:49,020
e vamos marcar este método daqui

304
00:15:49,020 --> 00:15:51,020
e novamente como "DataProvider".

305
00:15:51,630 --> 00:15:54,360
Então, agora damos a ele algo totalmente importante,

306
00:15:54,360 --> 00:15:55,870
o que podemos ver acima

307
00:15:55,870 --> 00:15:58,280
(confira você também, não apenas eu ;-)):

308
00:15:58,640 --> 00:16:01,220
E, mesmo, temos aqui naturalmente a expressão

309
00:16:01,220 --> 00:16:03,860
na nossa linguagem, aquela que o compilador quer

310
00:16:03,860 --> 00:16:06,090
e eu escrevo aqui embaixo dentro

311
00:16:06,090 --> 00:16:07,480
do jasmin,

312
00:16:07,480 --> 00:16:09,260
junto não existe nenhum código jasmin,

313
00:16:09,260 --> 00:16:11,060
nós devemos primeiro, naturalmente, no nosso Compiler

314
00:16:11,060 --> 00:16:12,840
deixar executá-lo, com isso

315
00:16:12,840 --> 00:16:14,910
retiramos os código jasmin gerado.

316
00:16:15,630 --> 00:16:17,700
Com ele nós chegamos agora

317
00:16:17,700 --> 00:16:19,680
a refatorar pela primeira vez

318
00:16:19,680 --> 00:16:21,910
um pouco a nossa classe Main daqui de cima,

319
00:16:21,910 --> 00:16:25,050
porque assim ela ainda utiliza algo não prático.

320
00:16:25,050 --> 00:16:29,620
Em vez de simplesmente adicionar o método main,

321
00:16:29,620 --> 00:16:33,750
aqui eu agora adiciono um método compile

322
00:16:36,930 --> 00:16:41,000
e ele se torna diretametne um ANTLRInputStream

323
00:16:45,360 --> 00:16:47,340
e isto, na verdade, não tem nenhum método void,

324
00:16:47,340 --> 00:16:49,140
mas ele nos retorna uma string,

325
00:16:49,140 --> 00:16:52,250
assim sendo, depois com o nosso código jasmin

326
00:16:52,780 --> 00:16:56,930
e vamos terceirizar aqui em baixo com todas

327
00:16:56,930 --> 00:17:00,220
estas partes grandes no método compile

328
00:17:02,130 --> 00:17:04,510
e iremos então daqui em diante

329
00:17:06,020 --> 00:17:09,030
não colocar nenhum "System.out" em uso,

330
00:17:09,030 --> 00:17:11,830
mas um "return"

331
00:17:14,450 --> 00:17:18,620
e aqui iremos colocar novamente o "System.out" agora

332
00:17:21,490 --> 00:17:25,950
e "compile" e então o nosso "input".

333
00:17:30,020 --> 00:17:33,910
Aqui nós construiremos as inovações

334
00:17:33,910 --> 00:17:35,920
daqui no nosso Test ainda,

335
00:17:36,440 --> 00:17:39,270
para isso vamos compilar

336
00:17:39,740 --> 00:17:41,440
o code mais uma vez

337
00:17:43,500 --> 00:17:45,230
e aqui chamamos agora

338
00:17:45,230 --> 00:17:47,050
da nossa classe Main

339
00:17:47,050 --> 00:17:49,510
o método "compile"

340
00:17:50,080 --> 00:17:51,750
e ela vira

341
00:17:52,550 --> 00:17:57,840
um InputStream, com nosso code como Input.

342
00:17:58,970 --> 00:18:01,770
Agora executamos o Test

343
00:18:02,030 --> 00:18:04,290
e vocês estão curiosos em saber, como eu

344
00:18:04,290 --> 00:18:06,290
o que sai junto?

345
00:18:08,930 --> 00:18:11,250
Como vocês veem, nós temos aqui um Report de saída

346
00:18:11,250 --> 00:18:15,110
e consta nele: "Total tests run: 2, Failures: 0".

347
00:18:15,740 --> 00:18:18,610
Junto, deve ter, supostamente, servido.

348
00:18:18,610 --> 00:18:20,650
Aqui queremos mudar outra vez

349
00:18:20,650 --> 00:18:22,670
no caso de nosso Code ser verdadeiramente

350
00:18:22,670 --> 00:18:25,600
correto durante os testes executados

351
00:18:25,600 --> 00:18:27,040
e iremos escrever agora nesta vez

352
00:18:27,040 --> 00:18:31,930
em vez de "45, "46", e executamos então os testes novamente.

353
00:18:34,410 --> 00:18:37,620
Agora vemos aqui: "Failures: 1"

354
00:18:38,900 --> 00:18:41,630
e aqui vemos agora um "AssertionError":

355
00:18:41,630 --> 00:18:45,380
"expected 46, but found 45".

356
00:18:46,050 --> 00:18:48,440
Os primeiros testes a se escrevem foram sem esforço,

357
00:18:48,440 --> 00:18:51,880
os testes a serem executados posteriormente são, por isso, uma brincadeira.

358
00:18:51,880 --> 00:18:53,980
E isto deve mais uma vez nos ajudar bastante,

359
00:18:53,980 --> 00:18:55,820
porque nós poderemos para cada nova funcionalidade,

360
00:18:55,820 --> 00:18:57,910
construir dentro no nosso compilador

361
00:18:57,910 --> 00:19:00,790
um novo Teste para ser executado e visto com apenas um clique.

362
00:19:00,790 --> 00:19:02,720
ambas, na nossa nova funcionalidade,

363
00:19:02,720 --> 00:19:06,160
assim como, também, todas as funcionalidades anteriores ainda continuam a funcionar.

364
00:19:06,160 --> 00:19:07,590
Nos próximos Vídeos

365
00:19:07,590 --> 00:19:09,670
faremos nossa linguagem mais poderosa

366
00:19:09,670 --> 00:19:12,480
ao poder dar como saída mais do que apenas um número.

367
00:19:12,810 --> 00:19:14,220
Muito obrigado ao Gadarol,

368
00:19:14,220 --> 00:19:17,380
que me permitiu usar seu estúdio para as gravações.

369
00:19:17,650 --> 00:19:19,650
Muito obrigado a vocês pela atenção,

370
00:19:19,650 --> 00:19:21,280
eu espero que vocês tenham curtido,

371
00:19:21,280 --> 00:19:23,500
curtam, comentem e inscrevam-se no canal

372
00:19:23,500 --> 00:19:25,850
e nos vemos novamente, para um novo episódio de:

373
00:19:25,850 --> 00:19:27,850
"Let's build a compiler".

