1
00:00:00,000 --> 00:00:02,902
Bem-vindo de volta ao "Let's build a compiler".

2
00:00:02,900 --> 00:00:04,360
No último episódio nós trabalhamos com

3
00:00:04,360 --> 00:00:06,933
uma mensagem de erro contendo significado

4
00:00:06,930 --> 00:00:09,257
para quando o programador chamasse uma função

5
00:00:09,250 --> 00:00:10,813
que ainda não estava definida.

6
00:00:11,066 --> 00:00:12,533
Neste episódio queremos adicionar

7
00:00:12,530 --> 00:00:14,604
uma mensagem de erro propícia para

8
00:00:14,600 --> 00:00:15,537
quando o programador

9
00:00:15,530 --> 00:00:18,008
definiu duas vezes a mesma função.

10
00:00:18,706 --> 00:00:20,840
Isto acontece quando nós

11
00:00:20,840 --> 00:00:22,497
temos duas funções,

12
00:00:22,490 --> 00:00:24,715
com exatamente o mesmo nome

13
00:00:24,710 --> 00:00:27,191
mas com uma lista de parâmetros diferente?

14
00:00:27,982 --> 00:00:29,693
No Java algo assim é permitido

15
00:00:29,690 --> 00:00:32,857
e de acordo com o bytecode do Java

16
00:00:34,208 --> 00:00:36,208
mas o que isto tem a ver com nossa linguagem?

17
00:00:36,200 --> 00:00:38,493
Queremos que nossa linguagem também permita?

18
00:00:38,490 --> 00:00:41,551
E em que condição então que ele atualiza?

19
00:00:41,551 --> 00:00:43,550
Por isso construímos um exemplo aqui

20
00:00:43,550 --> 00:00:45,200
e para testar de verdade

21
00:00:45,200 --> 00:00:46,817
e eu diria: Sim,

22
00:00:46,810 --> 00:00:49,142
Nós queremos poder... porque...

23
00:00:49,140 --> 00:00:50,328
nós podemos prover.

24
00:00:50,715 --> 00:00:53,111
Então copiamos este teste

25
00:00:53,110 --> 00:00:55,768
para dentro do nosso CompilerTest,

26
00:00:55,760 --> 00:00:59,022
criamos aqui um novo caso de teste

27
00:00:59,453 --> 00:01:02,964
e precisamos primeiro agora de um null

28
00:01:02,960 --> 00:01:06,017
e então o 42 como saídas.

29
00:01:08,475 --> 00:01:10,560
Então executamos o teste mais uma vez

30
00:01:10,560 --> 00:01:11,706
e observamos

31
00:01:11,700 --> 00:01:13,640
se verdadeiramente funcionou.

32
00:01:13,640 --> 00:01:15,417
E sim, este é o caso,

33
00:01:15,410 --> 00:01:16,955
assim, temos a prova aqui:

34
00:01:16,950 --> 00:01:18,991
podemos ter duas funções, realmente,

35
00:01:18,990 --> 00:01:20,586
no nosso código fonte

36
00:01:20,580 --> 00:01:23,244
que apenas se diferenciam pelos parâmetros

37
00:01:23,240 --> 00:01:24,960
e não pelo nome.

38
00:01:25,410 --> 00:01:29,137
Agora chegamos especificamente no tema deste episódio.

39
00:01:29,130 --> 00:01:32,302
Ou seja: Nós queremos que quando uma função

40
00:01:32,300 --> 00:01:33,960
for definida duplamente,

41
00:01:33,960 --> 00:01:36,804
então é jogada uma exceção sobre isso.

42
00:01:36,906 --> 00:01:38,884
Portanto, criamos aqui um novo teste para nós

43
00:01:38,880 --> 00:01:40,702
e no teste diz

44
00:01:40,700 --> 00:01:44,097
que deve jogar FunctionAlreadyDefinedException

45
00:01:44,090 --> 00:01:48,666
então quando a função foi duplicamente declarada.

46
00:01:49,577 --> 00:01:52,302
Então precisamos inserir um código

47
00:01:52,300 --> 00:01:55,155
que também contenha duas funções

48
00:01:55,150 --> 00:01:57,053
que são simplesmente duplicadas.

49
00:01:57,050 --> 00:01:58,937
Assim criamos aqui uma função

50
00:01:58,930 --> 00:02:02,942
e o copia e cola para facilitar a vida,

51
00:02:02,940 --> 00:02:04,386
executamos a segunda função

52
00:02:04,380 --> 00:02:06,946
na próxima linha à frente.

53
00:02:07,995 --> 00:02:11,093
Agora o erro está na segunda linha

54
00:02:11,090 --> 00:02:13,293
na posição quatro

55
00:02:13,290 --> 00:02:15,355
e, claro, nós chegamos a mais uma 

56
00:02:15,350 --> 00:02:17,777
outra mensagem de erro, que é:

57
00:02:17,770 --> 00:02:20,151
"function already defined".

58
00:02:22,111 --> 00:02:25,315
A função que já existe se chama "x"

59
00:02:25,310 --> 00:02:28,573
e então copiamos aqui mais uma vez a mensagem de erro

60
00:02:28,570 --> 00:02:30,333
porque podemos precisar da mesma logo 

61
00:02:30,330 --> 00:02:32,760
quando implementarmos nossa exception.

62
00:02:32,760 --> 00:02:34,115
Exatamente como faremos agora.

63
00:02:34,110 --> 00:02:36,653
No nosso código fonte, naturalmente,

64
00:02:37,168 --> 00:02:39,924
e com nossas outras exceções

65
00:02:39,920 --> 00:02:43,720
e esta exception é herdada da CompileException.

66
00:02:49,133 --> 00:02:51,217
Então damos ao nosso token,

67
00:02:51,210 --> 00:02:54,168
uma outra variável "token"

68
00:02:54,160 --> 00:02:56,222
como nome específico

69
00:02:58,924 --> 00:03:02,368
e notamos na nossa exception

70
00:03:02,360 --> 00:03:04,440
também o nome da função.

71
00:03:04,440 --> 00:03:06,608
Então acessamos o token,

72
00:03:06,600 --> 00:03:08,706
e adicionamos agora, ainda no constructor

73
00:03:08,700 --> 00:03:12,053
que esta variável será preenchida.

74
00:03:12,257 --> 00:03:14,035
Então precisamos naturalmente assim como normalmente

75
00:03:14,030 --> 00:03:16,160
do nosso método "getMessage",

76
00:03:16,160 --> 00:03:19,084
assim, roubamos mais uma vez como modelo

77
00:03:19,080 --> 00:03:21,320
um dos nossos anteriores

78
00:03:21,320 --> 00:03:23,217
e inserimos de acordo,

79
00:03:23,210 --> 00:03:26,257
pegamos do meu histórico da clipboard

80
00:03:26,250 --> 00:03:28,151
mais uma vez uma mensagem de erro

81
00:03:28,150 --> 00:03:30,000
que realmente nós queremos

82
00:03:30,328 --> 00:03:33,773
e criamos aqui o "varName" pela "functionName".

83
00:03:34,671 --> 00:03:38,035
Estamos prontos com a implementação da exceção.

84
00:03:38,346 --> 00:03:40,573
Então podemos salvar, fechar

85
00:03:40,570 --> 00:03:43,222
e executar o nosso teste uma vez.

86
00:03:44,071 --> 00:03:47,457
Como vemos: O teste retornou uma mensagem de erro,

87
00:03:47,450 --> 00:03:49,066
como esperado,

88
00:03:49,060 --> 00:03:51,577
com outros valores: Nós temos trabalho.

89
00:03:52,760 --> 00:03:55,720
Dentro das definições de função iremos,

90
00:03:55,720 --> 00:03:57,848
pelo FunctionDefinitionFinder,

91
00:03:57,840 --> 00:04:01,222
precisamos aqui, neste local, dar um significativa

92
00:04:01,220 --> 00:04:04,208
checagem sobre uma função para saber se ela já está definida.

93
00:04:04,200 --> 00:04:05,333
Contudo, nós infelizmente temos

94
00:04:05,330 --> 00:04:07,568
neste método "visitFunctionDefinition"

95
00:04:07,560 --> 00:04:09,680
não sobre a informação 

96
00:04:09,680 --> 00:04:12,688
de quais funções já foram definidas anteriormente,

97
00:04:12,680 --> 00:04:15,462
ao invés, nós temos apenas um nome de função,

98
00:04:15,460 --> 00:04:18,244
que é o nome de função da função que 

99
00:04:18,240 --> 00:04:21,017
está, no momento, com o nosso visitor gerado.

100
00:04:21,010 --> 00:04:22,564
E como primeiro no "aggregateResult"

101
00:04:22,560 --> 00:04:25,284
iremos adicionar todos métodos juntos.

102
00:04:25,608 --> 00:04:27,173
Como podemos deixar agora o problema,

103
00:04:27,170 --> 00:04:30,173
para que nós possamos reconhecer caso uma função está duplicada?

104
00:04:30,170 --> 00:04:32,195
Ali temos, claramente, muitas possibilidades:

105
00:04:32,190 --> 00:04:35,560
Nós podemos passar "aggregateResult" por exemplo,

106
00:04:35,560 --> 00:04:39,120
nós podemos aqui em cima no... hm...

107
00:04:39,120 --> 00:04:43,666
...colocar no visitor uma nova variável privada com um Set

108
00:04:43,660 --> 00:04:45,386
aonde sempre assinamos

109
00:04:45,380 --> 00:04:48,497
o que já foi definido então definido como função.

110
00:04:48,490 --> 00:04:50,688
Isto, no entanto, é uma parte posterior:

111
00:04:50,680 --> 00:04:53,657
Porque com isto o nosso FunctionDefinitionFinder

112
00:04:53,650 --> 00:04:56,057
recebe um status.

113
00:04:56,050 --> 00:04:59,400
Isto significa que o nosso FunctionDefinitionFinder irá perceber:

114
00:04:59,400 --> 00:05:01,533
As seguintes funções já estão definidas

115
00:05:01,530 --> 00:05:03,475
e isso não será para fazer apenas uma chamada

116
00:05:03,470 --> 00:05:05,231
mas também para mais chamadas.

117
00:05:05,230 --> 00:05:07,671
Isto significa que quando dizemos ao usuário:

118
00:05:07,670 --> 00:05:10,773
Assim como ao usuário desta classe, nós dizemos:

119
00:05:10,770 --> 00:05:12,862
"new FunctionDefinitionFinder"

120
00:05:12,860 --> 00:05:16,053
e ele salva isto em uma variável e então

121
00:05:16,050 --> 00:05:18,333
ele chama o método "visit" mais vezes,

122
00:05:18,330 --> 00:05:21,155
então iremos obter os "definedFunctions" 

123
00:05:21,150 --> 00:05:23,715
para o nosso método "visit".

124
00:05:23,710 --> 00:05:25,582
Nós devemos então dizer ao usuário:

125
00:05:25,580 --> 00:05:26,728
Se ele não quiser,

126
00:05:26,720 --> 00:05:31,226
que a "clearen" da definedFunctions de antes deve estar explícita. 

127
00:05:31,220 --> 00:05:34,444
Isto é custoso e também facilmente pode ser esquecido,

128
00:05:34,440 --> 00:05:35,751
por isso, vamos agora

129
00:05:35,750 --> 00:05:37,915
pegar depois um outro método.

130
00:05:37,910 --> 00:05:40,137
Dizemos assim, que nosso "FunctionDefinitionFinder"

131
00:05:40,130 --> 00:05:43,608
simplesmente não herdou mais nada do DemoBaseVisitor,

132
00:05:43,600 --> 00:05:46,204
a definedFunctions que novamente rejeitamos, 

133
00:05:46,200 --> 00:05:46,933
jogaremos fora

134
00:05:46,930 --> 00:05:49,284
e colocaremos um novo método static,

135
00:05:49,280 --> 00:05:53,986
que deve retornar um conjunto com todos os nossos nomes de função.

136
00:05:54,848 --> 00:05:59,497
Pegamos nossa ParseTree agora neste método passado 

137
00:05:59,490 --> 00:06:01,688
e com isso temos a nossa estrutura 

138
00:06:01,680 --> 00:06:04,093
de uma função "stateless"

139
00:06:04,090 --> 00:06:08,142
e ela deve apenas extrair as funções.

140
00:06:08,140 --> 00:06:09,182
Como podemos fazer isto?

141
00:06:09,180 --> 00:06:12,048
Ela pode por aqui criar uma nova classe

142
00:06:12,040 --> 00:06:14,062
que derive da DemoBaseVisitor.

143
00:06:14,060 --> 00:06:16,226
O valor de retorno não nos interessa aqui,

144
00:06:16,220 --> 00:06:18,351
por isso chamo aqui de "Void"

145
00:06:18,350 --> 00:06:20,715
e então esta classe anônima

146
00:06:20,710 --> 00:06:24,822
sobrescreve o método "visitFunctionDefiniton".

147
00:06:26,093 --> 00:06:28,600
O que o conjunto deve dar de saída,

148
00:06:28,600 --> 00:06:31,008
colocaremos como variável local 

149
00:06:31,008 --> 00:06:33,000
dentro da "findFunctions".

150
00:06:33,000 --> 00:06:36,755
E então deixamos este visitor livre da nossa Tree.

151
00:06:36,750 --> 00:06:38,422
Agora temos também um pedaço do código

152
00:06:38,420 --> 00:06:41,782
que chama novamente para cada "functionDefinition"

153
00:06:41,780 --> 00:06:43,324
mas não conseguimos acessá-lo de fora,

154
00:06:43,320 --> 00:06:45,400
assim o usuário não pode mais agora

155
00:06:45,400 --> 00:06:48,191
chamar cinco vezes, uma atrás da outra, o "visit",

156
00:06:48,190 --> 00:06:51,217
porque ele pode apenas chamar "findFunctions"

157
00:06:51,210 --> 00:06:53,786
e "findFunctions" irá toda vez novamente

158
00:06:53,780 --> 00:06:56,737
criar uma nova DemoBaseVisitor 
 
159
00:06:56,740 --> 00:07:01,742
e, por isso, que esta variante agora garante ser stateless

160
00:07:01,740 --> 00:07:04,817
e ela deve causar menos confusão para o usuário.

161
00:07:05,755 --> 00:07:08,946
As "definedFunctions" nós apenas criamos aqui

162
00:07:08,940 --> 00:07:13,004
dentro de uma variável local "definedFunctions"

163
00:07:13,982 --> 00:07:16,311
e sobre esta variável nós podemos agora

164
00:07:16,310 --> 00:07:18,862
acessar nossa classe anônima por dentro

165
00:07:18,860 --> 00:07:21,791
e também preencheremos esta.

166
00:07:21,790 --> 00:07:23,337
Iremos fazer isto da mesma maneira

167
00:07:23,330 --> 00:07:24,995
que nós fizemos ali embaixo,

168
00:07:24,990 --> 00:07:27,951
por isso, copiamos o código.

169
00:07:27,950 --> 00:07:29,893
Então não precisamos mais de todo o outro código,

170
00:07:29,890 --> 00:07:32,804
também não precisamos mais do "aggregateResult".

171
00:07:33,650 --> 00:07:36,844
Nosso FunctionDefinitionFinder será assim substancialmente 

172
00:07:36,840 --> 00:07:39,262
mais leve, por apenas não retornar

173
00:07:39,260 --> 00:07:42,040
o resultado em uma Collection,

174
00:07:42,040 --> 00:07:45,213
mas ainda dentro da definedFunctions

175
00:07:45,210 --> 00:07:47,635
adicionamos o nome da função atual.

176
00:07:47,630 --> 00:07:49,573
Como valor de retorno aceitamos "null",

177
00:07:49,570 --> 00:07:51,337
porque ele não nos interessa.

178
00:07:51,330 --> 00:07:54,213
Com isso, para que possamos acessar a variável "definedFunctions"

179
00:07:54,210 --> 00:07:56,613
dentro de uma classe anônima

180
00:07:56,610 --> 00:07:58,377
devemos tê-la definido como "final",

181
00:07:58,370 --> 00:08:00,031
então fazemos isto também.

182
00:08:00,030 --> 00:08:02,022
E no fim queremos, naturalmente,

183
00:08:02,020 --> 00:08:04,537
retornar ainda a nossa "definedFunction".

184
00:08:08,311 --> 00:08:11,897
Então, com isso nossa FunctionDefinitionFinder está razoável

185
00:08:11,890 --> 00:08:15,057
ficou menor, mas faz aproximadamente a mesma coisa,

186
00:08:15,050 --> 00:08:16,951
a API mudou um pouco,

187
00:08:16,950 --> 00:08:20,560
Por isso precisamos agora, ajustar na classe Main ainda,

188
00:08:20,560 --> 00:08:22,173
e dizer aqui "findFunctions"

189
00:08:22,170 --> 00:08:25,542
invés de uma nos instância a se criar e dizendo "visit"

190
00:08:25,875 --> 00:08:29,217
e apesar de tudo, o comportamento deve ser o mesmo.

191
00:08:29,210 --> 00:08:30,346
O colocamos aqui com certeza

192
00:08:30,340 --> 00:08:32,244
para executar no teste

193
00:08:34,706 --> 00:08:36,395
e dizemos afirmativamente:

194
00:08:36,390 --> 00:08:38,288
O... novo...

195
00:08:38,280 --> 00:08:40,088
O novo teste continua não funcionando,

196
00:08:40,080 --> 00:08:41,942
mas todos os testes antigos ainda funcionam,

197
00:08:41,940 --> 00:08:44,071
assim nós não estragamos nada.

198
00:08:44,555 --> 00:08:48,328
Agora não deve ser um grande problema para nós

199
00:08:48,320 --> 00:08:50,448
satisfazer também o novo teste

200
00:08:50,702 --> 00:08:53,546
e nós consideramos agora

201
00:08:53,540 --> 00:08:55,071
na "definedFunctions":

202
00:08:55,070 --> 00:08:57,697
Que exista em uma função

203
00:08:57,690 --> 00:09:00,240
com o nome que nós a recém encontramos.

204
00:09:00,871 --> 00:09:03,773
Se assim: Então é um erro

205
00:09:03,770 --> 00:09:05,906
e nós jogamos a nossa

206
00:09:05,900 --> 00:09:09,342
nova FunctionAlreadyDefinedException inserida.

207
00:09:10,675 --> 00:09:12,302
Assim, salvamos e olhamos

208
00:09:12,300 --> 00:09:13,951
se ela já está feita,

209
00:09:13,950 --> 00:09:16,533
executamos nosso teste outra vez

210
00:09:17,217 --> 00:09:20,360
e: Não, não está feito!

211
00:09:20,360 --> 00:09:22,742
Assim sim, nosso novo teste funcionou:

212
00:09:22,740 --> 00:09:24,595
Agora ele joga uma exceção,

213
00:09:24,590 --> 00:09:27,097
Mas infelizmente, o teste para saber se

214
00:09:27,090 --> 00:09:28,311
funcionou com o mesmo nome

215
00:09:28,310 --> 00:09:31,231
mas com parâmetros diferentes não funciona mais.

216
00:09:31,230 --> 00:09:33,377
É triste que tenhamos estragado algo,

217
00:09:33,370 --> 00:09:34,946
precisamos pensar em algo diferente

218
00:09:34,940 --> 00:09:37,586
se queremos pegar esta funcionalidade.

219
00:09:37,580 --> 00:09:38,635
Isto significa agora,

220
00:09:38,630 --> 00:09:41,004
que aqui na nossa função não é mais apenas 

221
00:09:41,000 --> 00:09:43,635
definida através do nome da função,

222
00:09:43,630 --> 00:09:46,862
além disso, ainda por meio da assinatura.

223
00:09:46,860 --> 00:09:49,568
Aqui no método contains checamos

224
00:09:49,560 --> 00:09:53,124
se nós já definimos um método com um nome,

225
00:09:53,120 --> 00:09:54,915
mas isto não é o suficiente,

226
00:09:54,910 --> 00:09:58,471
nós também precisamos checar se os parâmetros combinam.

227
00:09:58,808 --> 00:10:00,484
Para fazer isto de maneira mais fácil,

228
00:10:00,480 --> 00:10:03,800
porque um Set não fornece estas opções tão facilmente

229
00:10:03,800 --> 00:10:06,408
criamos agora uma nova classe "FunctionList"

230
00:10:06,400 --> 00:10:10,697
que tenha os métodos que precisamos

231
00:10:11,106 --> 00:10:13,902
Nós temos um método que checa:

232
00:10:13,900 --> 00:10:15,577
se uma função foi definida 

233
00:10:15,570 --> 00:10:17,920
com um nome de função distinto

234
00:10:17,920 --> 00:10:20,973
e um número específico de parâmetros

235
00:10:21,284 --> 00:10:24,075
e, naturalmente, precisamos que esta lista possa dizer:

236
00:10:24,070 --> 00:10:26,306
Defina agora, por favor, uma função

237
00:10:26,300 --> 00:10:28,631
com o seguinte nome de função

238
00:10:28,630 --> 00:10:30,875
e seguido do número de parâmetros.

239
00:10:39,257 --> 00:10:41,368
Agora nós precisamos do contador de parâmetros,

240
00:10:41,360 --> 00:10:43,706
nó pegamos nosso contexto,

241
00:10:43,700 --> 00:10:45,484
que nós já temos

242
00:10:45,480 --> 00:10:47,435
e agora podemos

243
00:10:47,430 --> 00:10:50,413
olhar na nossa lista "definedFunctions":

244
00:10:50,410 --> 00:10:53,666
Essa função já foi alguma vez definida?

245
00:10:53,660 --> 00:10:55,351
E se não, então nós definimos ela

246
00:10:55,350 --> 00:10:57,662
senão será jogado um erro.

247
00:10:58,093 --> 00:11:01,422
Vem, é claro, na nossa FunctionDefinitionFinder

248
00:11:01,420 --> 00:11:03,280
um outro valor de retorno,

249
00:11:03,280 --> 00:11:04,640
por isso devemos também

250
00:11:04,640 --> 00:11:06,933
ajustar novamente nossa classe Main,

251
00:11:06,930 --> 00:11:08,493
assim como o visitor

252
00:11:08,490 --> 00:11:11,844
então também precisamos trabalhar agora com a FunctionList.

253
00:11:15,715 --> 00:11:18,471
Não chega mais nenhum valor "null"

254
00:11:18,470 --> 00:11:21,657
como saída do nosso FunctionDefinitionFinder

255
00:11:21,650 --> 00:11:24,631
por isso podemos agora dizer tranquilamente aqui:

256
00:11:24,630 --> 00:11:26,146
Isto não deve acontecer

257
00:11:26,140 --> 00:11:28,337
e se é "null", então é definitivamente

258
00:11:28,330 --> 00:11:30,151
um erro do programador,

259
00:11:30,150 --> 00:11:32,528
com isso, nós facilitamos a nosso vida um bocado.

260
00:11:34,520 --> 00:11:38,017
Assim, pegamos o "number of parameters" desde

261
00:11:38,017 --> 00:11:40,010
daqui de baixo até em cima

262
00:11:40,010 --> 00:11:42,675
e então precisamos que o nosso statement "contains"

263
00:11:42,670 --> 00:11:44,493
seja levemente ajustado

264
00:11:44,490 --> 00:11:47,417
e também adicionado do "number of parameters".

265
00:12:00,271 --> 00:12:02,888
Agora precisamos implementar na nossa FunctionList,

266
00:12:02,880 --> 00:12:06,031
naturalmente, as funções que faltam, ainda por aqui.

267
00:12:06,240 --> 00:12:09,484
Nós criamos ainda, primeiramente uma pequena classe de ajuda

268
00:12:09,480 --> 00:12:11,617
nomeada de "function name"

269
00:12:11,610 --> 00:12:13,888
e salvamos o "parameter count".

270
00:12:14,328 --> 00:12:16,160
A classe também é muito simples,

271
00:12:16,160 --> 00:12:19,120
jogamos ela como se fosse uma "struct" em C

272
00:12:19,120 --> 00:12:21,484
ou uma "record" em Pascal,

273
00:12:21,480 --> 00:12:25,502
é uma classe com dois campos, simplesmente,

274
00:12:25,500 --> 00:12:27,911
com isso, podemos salvar logo 

275
00:12:27,910 --> 00:12:30,364
numa lista dois campos de vez.

276
00:12:30,360 --> 00:12:32,546
Então criamos para nós aqui uma Collection

277
00:12:32,540 --> 00:12:34,897
com nossas "FunctionDefintion"s

278
00:12:34,890 --> 00:12:36,786
e ali fazemos isto de maneira bem simples

279
00:12:36,780 --> 00:12:39,240
e pegamos apenas uma simples ArrayList.

280
00:12:39,693 --> 00:12:41,040
Para a checagem

281
00:12:41,040 --> 00:12:44,080
se uma função corresponde com um

282
00:12:44,080 --> 00:12:45,920
nome de função apropriada e

283
00:12:45,920 --> 00:12:48,471
um contador de parâmetros já definido

284
00:12:48,470 --> 00:12:51,377
iteramos por meio da nossa "Definitions" 

285
00:12:52,124 --> 00:12:53,982
e mostramos cada uma para ver 

286
00:12:53,980 --> 00:12:57,008
se "function name" e "parameter count" combinam.

287
00:13:01,422 --> 00:13:03,497
Se é o caso, então

288
00:13:03,490 --> 00:13:05,382
o resultado foi obviamente verdadeiro,

289
00:13:05,380 --> 00:13:06,604
assim, dizemos apenas "return true".

290
00:13:06,600 --> 00:13:07,400
podemos parar aqui,

291
00:13:07,400 --> 00:13:09,182
precisamos também que o loop não continue incrementando.

292
00:13:09,180 --> 00:13:11,302
Se nós alcançamos o fim da função

293
00:13:11,300 --> 00:13:12,697
sem ao menos ter encontrado algo

294
00:13:12,697 --> 00:13:14,690
o resultado claramente é false.

295
00:13:15,506 --> 00:13:17,728
Então precisamos ainda da função "add".

296
00:13:17,720 --> 00:13:19,702
Dizemos aqui debaixo no "FunctionDefinition"

297
00:13:19,700 --> 00:13:22,604
que declaramos nosso parâmetro como "final"

298
00:13:22,955 --> 00:13:25,391
então temos uma classe "immutable"

299
00:13:25,390 --> 00:13:28,400
e definimos um constructor,

300
00:13:28,400 --> 00:13:30,657
que estabelece o parâmetro.

301
00:13:31,413 --> 00:13:33,253
Ele pode tranquilamente ser "private",

302
00:13:33,250 --> 00:13:34,831
ele é apenas uma classe privada,

303
00:13:34,830 --> 00:13:36,995
que se tornou uma classe reconhecida.

304
00:13:37,386 --> 00:13:40,364
E agora quando é chamado o método "add"

305
00:13:40,360 --> 00:13:42,515
simplesmente criamos uma nova "FunctionDefinition"

306
00:13:42,510 --> 00:13:44,400
com o nome da função correspondente

307
00:13:44,400 --> 00:13:46,400
e o número de parâmetros.

308
00:13:49,648 --> 00:13:51,546
Agora executamos mais uma vez nossos testes

309
00:13:51,540 --> 00:13:53,555
e olhamos se eles já foram suficientes,

310
00:13:53,550 --> 00:13:55,302
para assegurar que deu certo.

311
00:13:55,300 --> 00:13:56,920
E sim: Ele funcionou,

312
00:13:56,920 --> 00:13:58,920
todos os nossos testes passaram,

313
00:13:58,920 --> 00:14:01,524
assim podemos agora

314
00:14:01,520 --> 00:14:03,862
jogar exceções simples

315
00:14:03,860 --> 00:14:06,880
se o programador fez besteira

316
00:14:06,880 --> 00:14:11,924
e definiu duas funções com assinaturas iguais.

317
00:14:12,684 --> 00:14:14,315
Neste episódio nós aprendemos

318
00:14:14,310 --> 00:14:16,408
como acertar em cheio para o programador uma

319
00:14:16,400 --> 00:14:17,911
mensagem de erro que tenha sentido

320
00:14:17,910 --> 00:14:20,253
quando ele busca uma função com o mesmo nome

321
00:14:20,250 --> 00:14:23,248
e com dois parâmetros iguais para definir.

322
00:14:23,240 --> 00:14:24,542
Além disso, nós aprendemos

323
00:14:24,540 --> 00:14:26,680
como os parâmetros se envolvem junto a uma 

324
00:14:26,680 --> 00:14:28,826
checagem de funções idênticas.

325
00:14:29,844 --> 00:14:31,568
Com isto, nós cobrimos por inteiro

326
00:14:31,560 --> 00:14:34,337
os últimos episódios com controle de erros. 

327
00:14:34,330 --> 00:14:36,324
Em conjunto com muitas funcionalidades

328
00:14:36,320 --> 00:14:37,631
faltando na nossa linguagem.

329
00:14:37,630 --> 00:14:39,568
Por exemplo, condicionais e laços de repetição.

330
00:14:39,560 --> 00:14:42,604
Como nós iremos implementar isso diremos no próximo episódio.

331
00:14:42,600 --> 00:14:44,288
Você gostou do vídeo?

332
00:14:44,280 --> 00:14:46,017
Você tem alguma pergunta ou sugestão?

333
00:14:46,010 --> 00:14:47,062
Deixe uma curtida no vídeo

334
00:14:47,060 --> 00:14:48,355
e escreva comentários.

335
00:14:48,350 --> 00:14:49,533
inscreva-se no canal,

336
00:14:49,530 --> 00:14:51,804
com isso você não perde nenhum episódio.

337
00:14:51,800 --> 00:14:53,035
Muito obrigado ao Gadarol

338
00:14:53,030 --> 00:14:55,471
que permitiu usar o seu estúdio para as gravações

339
00:14:55,470 --> 00:14:57,937
e muito obrigado a vocês pela atenção.

340
00:14:57,930 --> 00:14:59,168
Até a próxima vez,

341
00:14:59,160 --> 00:15:00,173
com um episódio de:

342
00:15:00,173 --> 00:15:02,170
"Let's build a compiler".

