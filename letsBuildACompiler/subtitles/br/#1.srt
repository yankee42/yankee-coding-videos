1
00:00:00,000 --> 00:00:03,690
Olá e bem-vindo ao "Let's build a compiler"

2
00:00:03,690 --> 00:00:05,970
Você quer projetar a sua própria linguagem de programação

3
00:00:05,970 --> 00:00:10,690
mas não sabe como compilar seu código em um programa executável?

4
00:00:10,690 --> 00:00:14,340
Ou você apenas está interessado na magia dos compiladores?

5
00:00:14,340 --> 00:00:16,620
Então você encontrou a fonte certa.

6
00:00:16,620 --> 00:00:19,700
Eu vou te mostrar como escrever seu próprio compilador.

7
00:00:19,710 --> 00:00:21,900
Na prática e fazendo juntos.

8
00:00:21,900 --> 00:00:26,090
Meu nome é Yankee. Espero que divirta-se bastante e junte-se comigo

9
00:00:26,090 --> 00:00:28,280
Nós escreveremos nosso compilador em Java

10
00:00:28,280 --> 00:00:31,510
portanto, você deve ter um conhecimento básico em Java.

11
00:00:31,510 --> 00:00:33,690
Se Java não é a sua linguagem favorita:

12
00:00:33,690 --> 00:00:37,970
não há o que temer. As lições aprendidas aqui podem ser aplicadas em outras linguagens.

13
00:00:38,080 --> 00:00:41,510
Inicialmente, mostrarei como um simples processador funciona.

14
00:00:41,580 --> 00:00:45,910
Esta é uma simulação de um desses processadores simples.

15
00:00:46,200 --> 00:00:50,950
O processador tem apenas alguns elementos: a sua pilha

16
00:00:51,330 --> 00:00:52,610
vista no lado direito

17
00:00:52,820 --> 00:00:57,720
e no lado esquerdo existem algumas instruções prontas para o processador executar.

18
00:00:57,870 --> 00:00:59,480
e... isso...

19
00:00:59,480 --> 00:01:00,890
é tudo aqui.

20
00:01:01,280 --> 00:01:03,500
LDC significa "load constant",

21
00:01:03,500 --> 00:01:06,020
"iadd" significa "integer addition".

22
00:01:06,020 --> 00:01:08,730
"load constant" insere um número na pilha.

23
00:01:08,730 --> 00:01:11,290
aquele fornecido como parâmetro

24
00:01:11,290 --> 00:01:15,100
Primeiramente, temos o número 3. Executamos esta linha

25
00:01:15,100 --> 00:01:18,600
e o 3 aparece na pilha.

26
00:01:18,600 --> 00:01:21,930
Então... a mesma coisa com o 2

27
00:01:21,930 --> 00:01:25,670
e "iadd" recebe os dois números do topo da pilha

28
00:01:25,670 --> 00:01:27,290
soma eles

29
00:01:27,290 --> 00:01:30,290
e insere o resultado de volta na pilha.

30
00:01:30,320 --> 00:01:32,700
Aqui temos um exemplo um pouco mais complicado:

31
00:01:32,700 --> 00:01:36,220
Temos o cálculo "3+2*5"

32
00:01:36,220 --> 00:01:39,790
Neste caso, queremos calcular 2*5 primeiro

33
00:01:39,790 --> 00:01:44,710
e então calcular primeiro o 3 + o resultado de 2*5.

34
00:01:44,840 --> 00:01:47,940
Aqui temos uma possibilidade de como fazer isso:

35
00:01:48,030 --> 00:01:50,870
Primeiro, inserimos o 3 na pilha.

36
00:01:51,120 --> 00:01:53,520
Então inserimos o 2 na pilha.

37
00:01:53,530 --> 00:01:58,540
Agora, no entanto, nós não somaremos 3 e 2 juntos com iadd,

38
00:01:58,540 --> 00:02:01,870
ao invés, primeiro inseriremos o cinco na pilha.

39
00:02:02,210 --> 00:02:05,850
Então podemos somar 5 e 2

40
00:02:05,850 --> 00:02:08,860
a pilha recebe o 10 no topo e o 3 abaixo

41
00:02:08,860 --> 00:02:11,020
e quando somamos os dois

42
00:02:11,020 --> 00:02:14,850
então temos o resultado esperado, o 13.

43
00:02:14,850 --> 00:02:18,580
Como nós também chegamos ao nosso cálculo, 3+2

44
00:02:18,580 --> 00:02:21,450
para a instrução que a recém vimos?

45
00:02:21,450 --> 00:02:25,220
Para isso, dividimos nosso cálculo em seus componentes:

46
00:02:25,220 --> 00:02:28,040
O 3, o + e o 1

47
00:02:28,120 --> 00:02:31,010
e então construímos uma árvore para eles.

48
00:02:31,710 --> 00:02:34,340
Podemos ainda ler nesta árvore

49
00:02:34,340 --> 00:02:37,870
o que acontece aqui: 3+2.

50
00:02:37,870 --> 00:02:41,220
No entanto, também podemos encontrar as instruções que precisamos

51
00:02:41,220 --> 00:02:42,640
lendo facilmente no início.

52
00:02:42,640 --> 00:02:47,870
Fazemos isso ao percorrer a árvore em pós-ordem. Pós-ordem é chamado

53
00:02:47,870 --> 00:02:52,760
quando pegamos cada nó a partir o primeiro filho à esquerda e depois o filho à direita

54
00:02:52,760 --> 00:02:57,040
e então o de cima, o nó raiz.

55
00:02:57,040 --> 00:03:01,470
No nosso caso isso significa pegar primeiro o filho à esquerda, o 3,

56
00:03:01,470 --> 00:03:06,100
então o filho à direita, o 2, e então à raiz, o "+"

57
00:03:06,100 --> 00:03:11,300
Nossas instruções são denominadas "load constant 3", "load constant 2"

58
00:03:11,300 --> 00:03:12,870
e então "iadd".

59
00:03:12,870 --> 00:03:16,170
Isto sempre funciona mesmo quando o exemplo se torna um pouco mais complexo.

60
00:03:16,170 --> 00:03:19,020
Por exemplo:

61
00:03:19,020 --> 00:03:22,740
Aqui também desmontamos um cálculo em seus componentes

62
00:03:22,790 --> 00:03:24,790
e então construímos uma árvore.

63
00:03:24,790 --> 00:03:28,120
Como você pode ver: a construção agora já tem um nível acima,

64
00:03:28,120 --> 00:03:31,030
mas o princípio continua funcional.

65
00:03:31,030 --> 00:03:34,480
Primeiro o nó à esquerda, aqui o 3,

66
00:03:34,480 --> 00:03:36,200
então o nó à direita,

67
00:03:36,200 --> 00:03:37,950
este é um nó que contém um filho,

68
00:03:37,950 --> 00:03:40,860
o que significa que precisamos continuar a descer,

69
00:03:40,860 --> 00:03:43,120
novamente ao primeiro da esquerda, para o 3,

70
00:03:43,120 --> 00:03:44,810
então à direita, o 5,

71
00:03:44,810 --> 00:03:47,080
e então "*" e então "+".

72
00:03:47,080 --> 00:03:49,370
Assim são nossas instruções

73
00:03:49,370 --> 00:03:52,670
load constant 3, load constant 2,

74
00:03:52,670 --> 00:03:55,250
load constant 5,

75
00:03:55,250 --> 00:03:56,560
multiplicação,

76
00:03:56,560 --> 00:03:58,900
e soma.

77
00:03:58,900 --> 00:04:02,930
e as instruções estão completas

78
00:04:02,930 --> 00:04:06,430
na construção a ser feita nós temos nosso operador "+" e "*"

79
00:04:06,430 --> 00:04:10,060
chamados nó raiz e o operador de sub-nós anexados.

80
00:04:10,140 --> 00:04:13,030
Ainda, um operando pode novamente ser um cálculo

81
00:04:13,030 --> 00:04:16,520
No caso, o sub-nó carrega novamente um operador

82
00:04:16,520 --> 00:04:19,650
e ele tem seus operandos novamente como nós filhos.

83
00:04:20,050 --> 00:04:22,600
se nós humanos quisermos calcular o resultado

84
00:04:22,600 --> 00:04:24,680
precisamos realizar o processo de baixo para cima.

85
00:04:24,680 --> 00:04:25,630
Ou seja:

86
00:04:25,630 --> 00:04:29,500
Quebramos primeiro 2*5,

87
00:04:29,500 --> 00:04:33,470
então sobre o cálculo 3+10 em cima

88
00:04:33,470 --> 00:04:37,150
que resulta em 13.

89
00:04:39,340 --> 00:04:42,460
Até agora nossas árvores foram pequenas

90
00:04:42,460 --> 00:04:45,870
mas imagine o tamanho da nossa árvore uma vez que tenhamos milhares

91
00:04:45,870 --> 00:04:47,900
de linhas de código que queremos compilar,

92
00:04:47,900 --> 00:04:51,940
que não contém cálculos simples de mais e vezes mas, ao invés, na adição contenha

93
00:04:51,940 --> 00:04:54,870
variáveis, laços de repetições e mais.

94
00:04:54,870 --> 00:04:57,310
para estas entradas precisamos de um método claro

95
00:04:57,310 --> 00:04:59,180
para a construção de nossas árvores.

96
00:04:59,180 --> 00:05:01,380
Uma ferramenta para esta tarefa é o ANTLR

97
00:05:01,380 --> 00:05:06,120
A seguir, vou mostrar como usar o ANTLR para gerar árvores.

98
00:05:06,120 --> 00:05:09,270
Primeiro você precisa baixar o ANTLR.

99
00:05:09,270 --> 00:05:16,270
Você pode fazê-lo em antlr.org.

100
00:05:17,020 --> 00:05:21,970
Na página inicial você pode encontrar diretamente o link para baixar.

101
00:05:21,970 --> 00:05:23,430
Ou,

102
00:05:23,430 --> 00:05:27,570
na página de início rápido para Windows (aliás, isto aqui abaixo supostamente eram para ser abas)

103
00:05:28,490 --> 00:05:31,090
você até pode encontrar um link clicável.

104
00:05:31,090 --> 00:05:35,430
Além disso existem uma página de download aqui onde você também pode encontrar um link.

105
00:05:35,430 --> 00:05:36,870
Você irá conseguir de alguma forma.

106
00:05:36,870 --> 00:05:41,400
Além disso você precisará do JDK, que é mais fácil de encontrar

107
00:05:41,400 --> 00:05:46,550
ao pesquisar por "JDK" no Google

108
00:05:46,550 --> 00:05:50,750
onde ele é o primeiro resultado da pesquisa.

109
00:05:50,750 --> 00:05:53,400
vá em "Download"

110
00:05:53,400 --> 00:05:57,390
e encontrará todos os sistemas possíveis, no qual você use

111
00:05:57,390 --> 00:05:59,160
seu JDK

112
00:05:59,160 --> 00:06:03,590
Se você desenvolve em Java frequentemente, você irá obviamente ter o JDK instalado.

113
00:06:03,590 --> 00:06:06,550
Na verdade, eu espero que este seja o caso.

114
00:06:06,550 --> 00:06:11,520
Se não for, não importa, então você precisa aprender rápido agora.

115
00:06:11,520 --> 00:06:14,940
Eu já instalei o ANTLR para vocês

116
00:06:14,940 --> 00:06:17,450
e salvei o JAR

117
00:06:17,450 --> 00:06:20,020
dentro da pasta "lib".

118
00:06:20,020 --> 00:06:22,490
E agora mostrarei como usá-lo.

119
00:06:22,490 --> 00:06:27,050
Primeiro eu renomeio o jar ANTLR, porque na minha opinião o nome é muito longo.

120
00:06:27,690 --> 00:06:33,360
Apenas "antlr.jar" é bom para mim.

121
00:06:34,400 --> 00:06:39,130
Então nós criamos o arquivo do parser (analisador de gramática)

122
00:06:39,130 --> 00:06:43,790
Vou chamá-la de "code.demo".

123
00:06:46,300 --> 00:06:50,240
No arquivo nós iremos simplesmente escrever "3+2".

124
00:06:50,240 --> 00:06:53,620
Este deve ser o nosso primeiro programa.

125
00:06:54,680 --> 00:06:59,990
Então nós devemos ter uma gramática que descreva a nossa linguagem.

126
00:06:59,990 --> 00:07:02,470
é claro que nós temos que dar a nossa um nome

127
00:07:02,470 --> 00:07:04,780
e o nome do nosso arquivo de gramática deve ter

128
00:07:04,780 --> 00:07:07,430
o mesmo nome da gramática

129
00:07:07,430 --> 00:07:10,180
mais a extensão ".g4".

130
00:07:10,180 --> 00:07:15,180
Logo, é recomendado que o nome comece com uma letra maiúscula.

131
00:07:15,180 --> 00:07:20,210
Assim eu irei chamar o arquivo, agora com o "D" maiúsculo: "Demo.g4".

132
00:07:21,080 --> 00:07:25,120
Neste arquivo nós iniciamos com o nome da nossa gramática

133
00:07:25,120 --> 00:07:27,460
prefixada com "grammar".

134
00:07:31,310 --> 00:07:33,130
E então iniciamos

135
00:07:33,130 --> 00:07:35,210
a definir regras.

136
00:07:35,210 --> 00:07:37,810
Para começar uma regra única já está de bom tamanho.

137
00:07:37,810 --> 00:07:42,740
Será a nossa regra de adições, então chamaremos-lá de "adição".

138
00:07:42,740 --> 00:07:50,050
Esta regra reconhece inicialmente 3 + 2.

139
00:07:50,050 --> 00:07:52,330
Nada mais.

140
00:07:52,330 --> 00:07:55,830
Por hora, isso é o suficiente.

141
00:07:55,830 --> 00:08:00,020
Agora nós jogamos para o ANTLR usar a gramática para

142
00:08:00,020 --> 00:08:03,360
gerar um analisador de gramática (parser).

143
00:08:03,360 --> 00:08:10,270
Nós fazemos isso simplesmente chamando "java -jar" com o jar do ANTLR e

144
00:08:10,270 --> 00:08:14,770
passando o arquivo da nossa gramática.

145
00:08:14,770 --> 00:08:16,080
Você pode ver então

146
00:08:16,080 --> 00:08:21,740
que múltiplos arquivos Java apareceram. Este foram gerados pelo ANTLR para nós.

147
00:08:21,740 --> 00:08:24,800
Em seguida iremos compilar estes arquivos.

148
00:08:24,800 --> 00:08:26,890
Para compilá-los você precisa se lembrar

149
00:08:26,890 --> 00:08:31,420
que existem dependências para o jar do ANTLR.

150
00:08:31,420 --> 00:08:35,310
Por causa disso, você precisa passar o antlr.jar para o compilador.

151
00:08:35,310 --> 00:08:39,250
Você pode fazê-lo com a opção classpath "-cp"

152
00:08:39,310 --> 00:08:44,380
"lib" e então "antlr.jar".

153
00:08:45,800 --> 00:08:47,790
Então nós podemos compilar todos os arquivos java

154
00:08:47,790 --> 00:08:52,690
desse modo nós escrevemos "*.java".

155
00:08:52,690 --> 00:08:56,490
O compilador Java foi criado com um número de arquivos .class.

156
00:08:56,490 --> 00:09:00,760
Estes representam o analisador da gramática do executável.

157
00:09:00,760 --> 00:09:02,970
A partir do ANTLR, temos uma ferramenta legal

158
00:09:02,970 --> 00:09:06,180
que pode nos mostrar uma árvore.

159
00:09:06,180 --> 00:09:08,470
Nós chamamos agora esta ferramenta

160
00:09:08,470 --> 00:09:11,170
ao

161
00:09:11,170 --> 00:09:13,690
usar o ponto classpath,

162
00:09:13,690 --> 00:09:16,450
porque o ponto é o diretório de trabalho atual e

163
00:09:16,450 --> 00:09:18,720
isto é onde o analisador de gramática que precisamos está.

164
00:09:18,720 --> 00:09:21,380
com delimitação por dois pontos no Linux

165
00:09:21,380 --> 00:09:24,790
no Windows delimitado com ponto e vírgula

166
00:09:25,270 --> 00:09:28,410
o jar do ANTLR

167
00:09:30,510 --> 00:09:31,850
e então

168
00:09:31,850 --> 00:09:34,850
a classe a se chamar que é a classe

169
00:09:34,850 --> 00:09:37,340
que poderá mostrar a árvore para nós:

170
00:09:37,420 --> 00:09:49,070
org.antlr.v4.runtime.misc.TestRig.

171
00:09:49,480 --> 00:09:53,110
Se nós executarmos este comando sem nenhum argumento

172
00:09:53,110 --> 00:09:54,800
surge uma pequena página de ajuda

173
00:09:54,800 --> 00:09:58,370
que explica o que podemos fazer com o programa.

174
00:09:58,370 --> 00:10:01,880
Primeiro ele poderá ter o nome da gramática

175
00:10:02,160 --> 00:10:04,360
que é "Demo",

176
00:10:04,360 --> 00:10:06,360
então o nome da regra inicial

177
00:10:06,360 --> 00:10:08,710
temos uma regra, apenas.

178
00:10:08,710 --> 00:10:11,460
Passaremos o nome da regra inicial aqui

179
00:10:11,460 --> 00:10:14,800
e então nós temos um punhado de opções, com coisas das quais podemos escolher.

180
00:10:14,800 --> 00:10:18,000
Comecemos com a opção "-gui",

181
00:10:18,000 --> 00:10:22,080
porque ela mostra a árvore

182
00:10:22,080 --> 00:10:23,930
e os arquivos de entrada

183
00:10:23,930 --> 00:10:27,160
é o nome do arquivo a se compilar.

184
00:10:27,160 --> 00:10:28,360
Se você não especificar depois

185
00:10:28,360 --> 00:10:31,990
o programa lerá do stdin.

186
00:10:31,990 --> 00:10:35,400
Mas nós deliberativamente criamos um arquivo

187
00:10:35,400 --> 00:10:39,340
com o nome "code.demo".

188
00:10:39,340 --> 00:10:41,840
Aqui podemos ver uma árvore genérica.

189
00:10:41,840 --> 00:10:43,300
E porque é muito pequena

190
00:10:43,300 --> 00:10:46,210
e eu não sei se você consegue ver

191
00:10:46,210 --> 00:10:48,390
completamente no vídeo

192
00:10:48,390 --> 00:10:52,780
é possível dar um pouco de zoom, mas não muito

193
00:10:52,780 --> 00:10:55,880
Eu usarei um método diferente para a geração da árvore:

194
00:10:55,880 --> 00:10:58,880
Em vez da opção "-gui"

195
00:10:58,880 --> 00:11:01,700
Eu uso "-ps"

196
00:11:01,700 --> 00:11:05,770
para salvar nossa árvore para um arquivo PostScript

197
00:11:08,690 --> 00:11:14,090
porque agora eu posso facilmente abrir aquele arquivo

198
00:11:18,810 --> 00:11:22,400
e mostrar em tela cheia.

199
00:11:22,400 --> 00:11:24,520
aqui você pode ver a árvore criada.

200
00:11:24,520 --> 00:11:26,420
com a primeira coisa a se notar:

201
00:11:26,420 --> 00:11:29,300
O mais aparece duas vezes

202
00:11:29,300 --> 00:11:33,470
Uma vez que esconde a palavra "addition"

203
00:11:33,470 --> 00:11:35,990
mesmo se não for tão óbvio

204
00:11:35,990 --> 00:11:39,110
e uma segunda vez o mais está aqui abaixo.

205
00:11:39,110 --> 00:11:42,880
Nós queremos fazer que nossos operadores

206
00:11:42,880 --> 00:11:44,870
sempre estejam no nó raiz,

207
00:11:44,870 --> 00:11:48,010
assim nós apenas nos importamos

208
00:11:48,010 --> 00:11:49,500
no "addition" lá encima.

209
00:11:49,500 --> 00:11:52,530
Não precisamos nos importar com o mais lá embaixo,

210
00:11:52,530 --> 00:11:55,760
pode se sentir livre para ignorá-lo.

211
00:11:55,760 --> 00:11:57,860
Com isso, nós já completamos

212
00:11:57,860 --> 00:12:00,330
a primeira tarefa com ANTLR:

213
00:12:00,330 --> 00:12:02,890
Nós construímos uma árvore simples.

214
00:12:02,890 --> 00:12:04,990
Nos próximos vídeos eu mostrarei

215
00:12:04,990 --> 00:12:09,170
como aceitar números arbitrários que não sejam apenas 3 e 2,

216
00:12:09,170 --> 00:12:13,050
como aceitar uma expressão encadeada como "1+2+3+4",

217
00:12:13,050 --> 00:12:15,210
como adicionar outros operadores,

218
00:12:15,210 --> 00:12:18,700
como criar uma aplicação executável e muito mais.

219
00:12:18,700 --> 00:12:20,990
Se você está interessado em um livro sobre ANTLR

220
00:12:20,990 --> 00:12:25,050
Eu posso recomendar "The definitive ANTLR4 Reference".

221
00:12:25,050 --> 00:12:28,180
Eu adiciono um link afiliado na descrição do vídeo.

222
00:12:28,180 --> 00:12:31,650
Se você comprar o livro, ou sua nova máquina de lavar, usando o link

223
00:12:31,650 --> 00:12:34,290
Eu recebo uma pequena porcentagem e ficarei feliz com isso.

224
00:12:34,290 --> 00:12:36,880
Além disso eu aprecio seus comentários e curtidas.

225
00:12:36,880 --> 00:12:39,420
Você gostou do vídeo? Tem dúvidas?

226
00:12:39,420 --> 00:12:41,920
Um grande obrigado para Gadarol

227
00:12:41,920 --> 00:12:45,000
que me permite usar seu estúdio para as gravações.

228
00:12:45,000 --> 00:12:48,490
Obrigado pela sua atenção, eu espero que tenha gostado de assistir,

229
00:12:48,490 --> 00:12:51,790
junte-se comigo novamente no novo vídeo de "Let's build a compiler".

230
00:12:51,790 --> 00:12:56,310
Meu nome é yankee, adeus e até o próximo episódio.

