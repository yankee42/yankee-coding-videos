1
00:00:00,000 --> 00:00:03,262
Welcome back to "Let's build a compiler".

2
00:00:03,260 --> 00:00:05,897
In this episode we will for the first time

3
00:00:05,890 --> 00:00:08,524
introduce functions to our programming language.

4
00:00:08,520 --> 00:00:10,715
At first, we want:

5
00:00:10,710 --> 00:00:12,595
Without parameter and as a content

6
00:00:12,590 --> 00:00:14,800
only a single return statement. 

7
00:00:15,964 --> 00:00:19,520
So we begin with expanding our specification,

8
00:00:19,520 --> 00:00:20,724
you know how already.

9
00:00:20,720 --> 00:00:22,808
Then we think this time on an example

10
00:00:22,808 --> 00:00:24,800
for a function call.

11
00:00:25,271 --> 00:00:26,662
And here I say now:

12
00:00:26,660 --> 00:00:29,115
We define first a function

13
00:00:29,110 --> 00:00:31,786
and call it "randomNumber",

14
00:00:34,062 --> 00:00:37,417
That should return a random number

15
00:00:37,410 --> 00:00:39,773
for this we need now a random number,

16
00:00:39,770 --> 00:00:41,053
I have a dice here,

17
00:00:41,050 --> 00:00:42,804
this dice has now...

18
00:00:43,555 --> 00:00:45,360
Aha... A four.

19
00:00:47,315 --> 00:00:50,235
and then we want naturally this function to

20
00:00:50,230 --> 00:00:51,737
call again

21
00:00:51,730 --> 00:00:53,595
and give us the result.

22
00:00:53,590 --> 00:00:55,840
I also write behind:

23
00:00:56,453 --> 00:00:58,306
"Println"

24
00:01:00,635 --> 00:01:02,306
"randomNumber".

25
00:01:03,577 --> 00:01:05,960
In total it should now...

26
00:01:05,960 --> 00:01:07,000
...four...

27
00:01:08,302 --> 00:01:10,764
and giving our "lineSeparator".

28
00:01:12,560 --> 00:01:14,795
We let the test run and control

29
00:01:14,790 --> 00:01:16,826
what, in fact, does not work in it 

30
00:01:18,071 --> 00:01:20,195
and wonderful, doesn't make anything.

31
00:01:20,360 --> 00:01:21,968
Now we start also to

32
00:01:21,960 --> 00:01:24,080
expand our grammar.

33
00:01:24,284 --> 00:01:25,888
I copy once what we have here

34
00:01:25,880 --> 00:01:27,484
with what soon looks to be

35
00:01:27,480 --> 00:01:29,626
the same with our grammar.

36
00:01:29,620 --> 00:01:32,186
Then we go over our grammar

37
00:01:32,180 --> 00:01:34,635
and add for our... ah...

38
00:01:34,630 --> 00:01:37,035
for our function call

39
00:01:37,030 --> 00:01:40,177
and the new rules in the function definition.

40
00:01:40,170 --> 00:01:41,955
Also we observe again

41
00:01:41,955 --> 00:01:43,950
what we have here.

42
00:01:43,950 --> 00:01:45,977
This is namely

43
00:01:45,970 --> 00:01:47,902
the function definition,

44
00:01:47,900 --> 00:01:49,093
this part here

45
00:01:49,090 --> 00:01:51,977
and the function call is this part here,

46
00:01:51,970 --> 00:01:53,840
We begin with a rule

47
00:01:53,840 --> 00:01:56,515
for the function definition.

48
00:01:57,360 --> 00:02:00,844
Called: ..."function",,, is...

49
00:02:00,840 --> 00:02:02,573
ahhh... first comes an "int",

50
00:02:03,182 --> 00:02:05,853
then comes one "IDENTIFIER" here

51
00:02:05,850 --> 00:02:07,960
for the function name,

52
00:02:11,026 --> 00:02:12,906
then comes a parentheses

53
00:02:12,900 --> 00:02:14,937
which initiates the argument list,

54
00:02:14,930 --> 00:02:16,635
that currently stills empty,

55
00:02:16,933 --> 00:02:19,248
then comes the argument,

56               
00:02:19,240 --> 00:02:20,480
we haven't yet any

57
00:02:20,480 --> 00:02:22,373
because of this, at first, I leave this out,

58
00:02:22,370 --> 00:02:24,586
also comes a close parenthesis,

59
00:02:24,580 --> 00:02:28,133
then comes the "return" here,

60
00:02:28,130 --> 00:02:31,520
also first an opening curly braces,

61
00:02:31,520 --> 00:02:33,520
then a "return",

62
00:02:34,306 --> 00:02:37,662
then comes here something that can be "returnt",

63
00:02:37,660 --> 00:02:42,417
this in our case is any "expression",

64
00:02:46,946 --> 00:02:49,760
then comes the semicolon

65
00:02:49,760 --> 00:02:53,275
and then comes a closing curly braces.

66
00:02:55,293 --> 00:02:58,102
Then that was the function definition

67
00:02:58,100 --> 00:03:00,884
and then still comes the function call.

68
00:03:00,880 --> 00:03:02,782
Now we have here in the println,

69
00:03:02,780 --> 00:03:05,408
also we need to have that at this rule.

70
00:03:05,400 --> 00:03:08,031
This argument can be an "expression"

71
00:03:08,195 --> 00:03:10,377
and here logically is,

72
00:03:10,370 --> 00:03:12,115
that we can write anywhere one of

73
00:03:12,110 --> 00:03:14,306
this function call where we

74
00:03:14,300 --> 00:03:15,733
simply just have a variable name

75
00:03:15,730 --> 00:03:17,297
or could have only a number

76
00:03:17,290 --> 00:03:19,097
which has an "expression" part in itself.

77
00:03:19,090 --> 00:03:22,937
This means that we write now the function call

78
00:03:22,930 --> 00:03:25,128
same here above to a pure expression, but

79
00:03:25,120 --> 00:03:29,177
first we create a rule for a "Functioncall".

80
00:03:33,071 --> 00:03:35,595
"functioncall" looks quite simple:

81
00:03:35,590 --> 00:03:38,342
We have first an "IDENTIFIER", namely,

82
00:03:38,340 --> 00:03:39,964
with a function,

83
00:03:39,960 --> 00:03:42,240
on this part we have already with

84
00:03:42,240 --> 00:03:43,746
both parenthesis

85
00:03:43,740 --> 00:03:46,635
and then was it already.

86
00:03:48,000 --> 00:03:50,217
So, we are... as said,

87
00:03:50,210 --> 00:03:52,946
we have this in the "println" now,

88
00:03:52,940 --> 00:03:54,462
called "expression",

89
00:03:54,586 --> 00:03:56,564
then we write this.

90
00:04:02,915 --> 00:04:04,955
and then we need, of couse...

91
00:04:04,950 --> 00:04:06,724
Have also the part we completely checked

92
00:04:06,720 --> 00:04:09,675
and then we need, naturally, to see

93
00:04:09,670 --> 00:04:12,933
the part, still in "functiondefinition",

94
00:04:12,930 --> 00:04:15,484
I probably call it "functiondefinition" again

95
00:04:16,982 --> 00:04:18,693
also must stay in a place.

96
00:04:18,690 --> 00:04:21,968
So this is now with us anywhere in any source,

97
00:04:23,946 --> 00:04:26,786
that would be in our "program",

98
00:04:26,780 --> 00:04:30,680
we don't need just to put statements there,

99
00:04:30,680 --> 00:04:33,746
those called completed by semicolon,

100
00:04:33,740 --> 00:04:36,457
but there we must then...

101
00:04:36,893 --> 00:04:38,450
...also...

102
00:04:40,986 --> 00:04:43,208
define "functiondefinitions".

103
00:04:43,200 --> 00:04:46,786
So. We save all

104
00:04:46,780 --> 00:04:50,551
and generate our parser anew.

105
00:04:52,888 --> 00:04:54,506
F5 here.

106
00:04:55,088 --> 00:04:58,204
And we let our tests run again.

107
00:05:00,320 --> 00:05:01,417
As you see:

108
00:05:01,410 --> 00:05:05,933
It doesn't give us any errors anymore from our ANTLR parser,

109
00:05:05,930 --> 00:05:07,462
but still yet another error,

110
00:05:07,460 --> 00:05:09,257
namely from the Jasmin,

111
00:05:09,250 --> 00:05:11,546
that now in our Jasmin file obviously 

112
00:05:11,540 --> 00:05:13,942
it doesn't make sense, no wonder,

113
00:05:13,940 --> 00:05:16,377
then we don't have there meaningful yet done.

114
00:05:17,320 --> 00:05:20,204
Now we also continue making our visitor,

115
00:05:20,871 --> 00:05:23,066
open our visitor

116
00:05:23,060 --> 00:05:24,502
and with it

117
00:05:24,500 --> 00:05:27,248
we'll implement our new "visit" method.

118
00:05:27,453 --> 00:05:30,506
So, we go then

119
00:05:30,500 --> 00:05:32,097
...to somewhere down here

120
00:05:33,906 --> 00:05:36,293
and begin with:

121
00:05:36,290 --> 00:05:39,920
visit...FunctionCall.

122
00:05:40,822 --> 00:05:43,493
If we have now a function call,

123
00:05:43,490 --> 00:05:46,848
then we have also in our context:

124
00:05:47,191 --> 00:05:49,120
The function name from the function

125
00:05:49,120 --> 00:05:50,831
that we want to call

126
00:05:51,031 --> 00:05:53,173
and then was it already.

127
00:05:53,170 --> 00:05:54,684
This is enough for the beginning,

128
00:05:54,680 --> 00:05:56,044
no more parameters,

129
00:05:56,040 --> 00:05:57,484
all this will come later.

130
00:05:57,960 --> 00:06:01,422
Now we must generate an instruction,

131
00:06:01,420 --> 00:06:03,537
which calls this function.

132
00:06:04,031 --> 00:06:05,520
This is quite simple

133
00:06:05,520 --> 00:06:07,724
then we give it there a...

134
00:06:07,995 --> 00:06:10,675
"invokestatic" instruction,

135
00:06:11,177 --> 00:06:13,426
that calls a "static" method

136
00:06:13,420 --> 00:06:16,040
and after we'll generate

137
00:06:16,040 --> 00:06:17,893
from the "functionDefinition"

138
00:06:17,890 --> 00:06:20,386
as static method.

139
00:06:20,380 --> 00:06:21,906
Also "invokestatic"

140
00:06:22,280 --> 00:06:24,542
and then we still need

141
00:06:24,540 --> 00:06:26,884
the name from the classe

142
00:06:26,880 --> 00:06:29,986
that contains this static method.

143
00:06:30,644 --> 00:06:35,151
We have this name given to us from the Main

144
00:06:35,150 --> 00:06:37,391
and indeed up here, that it's here,

145
00:06:37,390 --> 00:06:38,591
we call it "HelloWorld",

146
00:06:38,590 --> 00:06:39,897
if you named it differently

147
00:06:39,890 --> 00:06:41,902
then you have to give other name

148
00:06:41,900 --> 00:06:44,097
but for us is accordingly:

149
00:06:44,604 --> 00:06:46,142
"HelloWorld"

150
00:06:47,555 --> 00:06:49,688
and then a slash

151
00:06:49,680 --> 00:06:52,724
and then the function name

152
00:06:52,720 --> 00:06:55,257
".getText()".

153
00:06:56,035 --> 00:06:59,111
So, we need yet now, of course, the "functionDefinition",

154
00:07:03,262 --> 00:07:05,844
Thus, we need to now how to define

155
00:07:05,840 --> 00:07:07,364
a method in Jasmin

156
00:07:07,360 --> 00:07:08,648
this we have already done once,

157
00:07:08,640 --> 00:07:10,235
namely here in the "main" too

158
00:07:11,013 --> 00:07:12,635
and you see this here:

159
00:07:12,630 --> 00:07:15,924
This "method public static main" means:

160
00:07:15,920 --> 00:07:18,164
We create a "public static" method

161
00:07:18,160 --> 00:07:19,160
with the main name,

162
00:07:19,160 --> 00:07:20,617
with these arguments,

163
00:07:20,610 --> 00:07:22,146
without return value

164
00:07:22,342 --> 00:07:23,506
and so on.

165
00:07:23,500 --> 00:07:25,431
We do something quite similar here again

166
00:07:25,430 --> 00:07:27,768
and then we say:

167
00:07:27,760 --> 00:07:29,524
".method"

168
00:07:29,520 --> 00:07:30,640
"public"

169
00:07:32,013 --> 00:07:33,386
"static main",

170
00:07:33,380 --> 00:07:35,173
gets no arguments,

171
00:07:35,170 --> 00:07:37,791
has as return value an integer,

172
00:07:37,790 --> 00:07:39,648
because what we have different still not stop.

173
00:07:41,560 --> 00:07:44,400
Thus, comes the "Limits"

174
00:07:46,320 --> 00:07:48,404
with it we still can't employ more details

175
00:07:48,400 --> 00:07:50,502
as we after will calculate correctly,

176
00:07:50,500 --> 00:07:52,053
now I take just a value here

177
00:07:52,053 --> 00:07:54,050
that is big enough.

178
00:07:56,466 --> 00:07:58,364
The same for the stack.

179
00:08:01,542 --> 00:08:05,164
And with ".end method"

180
00:08:05,160 --> 00:08:07,648
we create the method end.

181
00:08:07,964 --> 00:08:09,915
Here in between we need

182
00:08:09,910 --> 00:08:13,844
place the instructions, that ahm...

183
00:08:13,840 --> 00:08:16,626
must be executed in this method.

184
00:08:16,620 --> 00:08:18,697
Oh yes: And our method still needs to,

185
00:08:18,690 --> 00:08:20,351
of course, not be called "main".

186
00:08:20,746 --> 00:08:23,186
We take here also:

187
00:08:23,180 --> 00:08:24,871
"ctx."

188
00:08:25,897 --> 00:08:27,297
"funcName".

189
00:08:28,355 --> 00:08:31,440
for the instructions to have one more time

190
00:08:31,440 --> 00:08:35,204
the return value in our context,

191
00:08:35,200 --> 00:08:37,288
this is again something like an "expression",

192
00:08:37,280 --> 00:08:39,942
the class behind value on the stack,

193
00:08:39,940 --> 00:08:42,288
that then we want to return,

194
00:08:42,280 --> 00:08:44,697
we also execute it again:

195
00:08:44,991 --> 00:08:46,600
Also leaving with the "visit"

196
00:08:46,600 --> 00:08:48,737
the construction of corresponding instructions

197
00:08:48,730 --> 00:08:51,333
and now we have a value standing in the stack,

198
00:08:51,330 --> 00:08:53,084
that should return

199
00:08:53,080 --> 00:08:57,066
and then we'll return now with the "ireturn".

200
00:09:04,360 --> 00:09:07,613
So, we have a little problem standing:

201
00:09:07,610 --> 00:09:10,457
namely the method is somewhere now

202
00:09:10,450 --> 00:09:12,835
in the middle of our injected source code.

203
00:09:12,830 --> 00:09:16,017
We can observe this again

204
00:09:16,010 --> 00:09:19,408
inside our Compilertest

205
00:09:19,400 --> 00:09:21,791
we let as output the Jasmin code,

206
00:09:21,790 --> 00:09:26,026
we see also in the method "compileAndRun"

207
00:09:26,386 --> 00:09:28,020
here by our code

208
00:09:28,020 --> 00:09:30,115
that we wish this as our output

209
00:09:32,533 --> 00:09:34,760
and we let our test execute.

210
00:09:36,502 --> 00:09:37,817
It will always here

211
00:09:37,810 --> 00:09:39,773
give as product a Jasmin code output

212
00:09:39,770 --> 00:09:42,488
and in the last output it will

213
00:09:42,480 --> 00:09:44,573
be our actual example

214
00:09:45,831 --> 00:09:48,386
and that begins here.

215
00:09:49,755 --> 00:09:52,351
Here we already have our "main" method

216
00:09:52,350 --> 00:09:54,471
and in this "main" method

217
00:09:54,470 --> 00:09:56,302
still exists another method.

218
00:09:56,300 --> 00:09:57,373
There, one can see, at first:

219
00:09:57,370 --> 00:09:59,875
I have this "getText()", that execution is the same again

220
00:10:00,191 --> 00:10:03,293
but, first of all, this "randomNumber" is necessary

221
00:10:03,290 --> 00:10:05,475
that will still not generate here in the "main"

222
00:10:05,470 --> 00:10:07,786
the definition, it must do it after ou before

223
00:10:07,780 --> 00:10:09,982
be defined. Is indifferent if it will

224
00:10:09,980 --> 00:10:11,502
be before or after, but

225
00:10:11,500 --> 00:10:13,586
it doesn't work here in the middle.

226
00:10:13,580 --> 00:10:16,311
NOw we execute one more time the "getText()" down there

227
00:10:16,310 --> 00:10:17,791
that it'll be correct,

228
00:10:18,275 --> 00:10:21,111
Therefore, we go to our visitor and

229
00:10:22,035 --> 00:10:24,048
add the "getText()" here

230
00:10:24,542 --> 00:10:26,546
and we can now once more briefly

231
00:10:26,540 --> 00:10:28,644
take a look at our grammar

232
00:10:28,640 --> 00:10:32,133
and here in the "program" we have to expand here

233
00:10:32,130 --> 00:10:35,173
"functionDefinitions" or "statements".

234
00:10:35,170 --> 00:10:36,911
Is it's a "Statement",

235
00:10:36,910 --> 00:10:39,364
then we want to pack everything in the "main" method

236
00:10:39,360 --> 00:10:41,417
and if it's a "functionDefinition" 

237
00:10:41,410 --> 00:10:43,622
then it's before or after the "main" method.

238
00:10:43,620 --> 00:10:44,991
We must also in both these cases

239
00:10:44,990 --> 00:10:46,435
somehow hold them apart.

240
00:10:46,430 --> 00:10:49,946
Because of that, I refactor this in a single rule,

241
00:10:49,940 --> 00:10:52,177
also in this part,

242
00:10:53,426 --> 00:10:57,195
I name it, creatively, "programPart",

243
00:10:57,190 --> 00:10:59,626
we can leave the parenthesis out

244
00:11:01,506 --> 00:11:03,991
and so as the "programPart"

245
00:11:04,742 --> 00:11:07,311
consist now of

246
00:11:08,320 --> 00:11:10,271
a "Statement"

247
00:11:11,795 --> 00:11:14,097
or a "functionDefinition".

248
00:11:15,315 --> 00:11:18,417
Now I can write beside here a label again

249
00:11:18,410 --> 00:11:19,897
and then I say here:

250
00:11:20,195 --> 00:11:22,302
"mainStatement", because

251
00:11:22,702 --> 00:11:24,008
a Statement which belongs 

252
00:11:24,008 --> 00:11:26,000
to our "main" method

253
00:11:26,244 --> 00:11:30,466
and here just a "functionDefinition"

254
00:11:30,460 --> 00:11:32,106
that we don't need to name precisely as

255
00:11:32,100 --> 00:11:33,862
this rule then therefore would yet

256
00:11:33,860 --> 00:11:36,008
generate a "visit" method,

257
00:11:36,000 --> 00:11:40,302
I name it

258
00:11:40,300 --> 00:11:43,293
"Program part function definition".

259
00:11:43,591 --> 00:11:45,742
Thus, we save that,

260
00:11:45,740 --> 00:11:50,191
we generate our new parser,

261
00:11:52,120 --> 00:11:55,244
we go on the parser, press "F5",

262
00:11:55,240 --> 00:11:57,164
we go again in our visitor,

263
00:11:57,160 --> 00:11:59,488
so, then we go one more time down there

264
00:11:59,924 --> 00:12:02,884
and then we go implement the "visit" method now

265
00:12:02,880 --> 00:12:06,964
from this "program" here.

266
00:12:10,080 --> 00:12:12,906
This "Program" has children already

267
00:12:12,900 --> 00:12:16,337
and these children are each one either

268
00:12:16,330 --> 00:12:20,866
from "mainStatement" or "ProgPartFunctionDefinition" type.

269
00:12:22,257 --> 00:12:24,782
We just iterate them through.

270
00:12:42,640 --> 00:12:44,644
Now we know the code

271
00:12:44,640 --> 00:12:46,711
from our actual "child",

272
00:12:46,710 --> 00:12:48,351
then we catch it

273
00:12:48,350 --> 00:12:50,626
when traversing this child,

274
00:12:50,620 --> 00:12:53,902
we do this with the "visitChild" too

275
00:12:58,960 --> 00:13:00,155
and now comes the clue

276
00:13:00,150 --> 00:13:02,964
Because these "Instructions" include either

277
00:13:02,960 --> 00:13:05,662
a definition function or

278
00:13:05,660 --> 00:13:07,915
Statements for our "main" method".

279
00:13:07,910 --> 00:13:10,235
And this we can find out now

280
00:13:10,230 --> 00:13:13,564
by looking inside the type from this Child.

281
00:13:13,560 --> 00:13:15,173
Then we say here:

282
00:13:15,170 --> 00:13:18,760
"if child is instance of",

283
00:13:18,760 --> 00:13:20,297
we look again in out grammar:

284
00:13:20,297 --> 00:13:22,760
Either it's a "MainStatement",

285
00:13:25,524 --> 00:13:27,008
then we have now found

286
00:13:27,000 --> 00:13:29,088
code for our "main" method.

287
00:13:29,080 --> 00:13:32,608
This means that we save once all the code

288
00:13:32,600 --> 00:13:34,724
for our main method here

289
00:13:41,595 --> 00:13:45,088
and here we execute the instructions on.

290
00:13:49,502 --> 00:13:52,337
Or if it's not the case,

291
00:13:52,330 --> 00:13:53,982
then we have functions.

292
00:13:55,151 --> 00:13:58,573
Also we say: we take

293
00:13:58,570 --> 00:14:01,422
functions, also beginning with an empty string on

294
00:14:01,420 --> 00:14:03,315
and then say here:

295
00:14:03,310 --> 00:14:05,733
Functions are the same thing.

296
00:14:08,955 --> 00:14:12,506
And as result we can then just

297
00:14:12,500 --> 00:14:14,648
return the functions

298
00:14:14,640 --> 00:14:17,768
plus our "main" method definition.

299
00:14:17,760 --> 00:14:19,528
And for the method "main" definition

300
00:14:19,520 --> 00:14:21,288
we take what until now

301
00:14:21,280 --> 00:14:22,800
what was in the "main",

302
00:14:22,800 --> 00:14:24,813
namely this whole part here

303
00:14:26,915 --> 00:14:27,928
until here.

304
00:14:28,697 --> 00:14:30,773
And here then come just the instructions

305
00:14:30,770 --> 00:14:34,573
which already are included in the "main" definition.

306
00:14:39,960 --> 00:14:42,942
We make here yet a new line between this

307
00:14:42,940 --> 00:14:45,080
with this, one can make improvements in readability

308
00:14:45,080 --> 00:14:46,626
and with it also works

309
00:14:47,177 --> 00:14:50,608
and our instructions for the "main" method

310
00:14:50,600 --> 00:14:52,671
don't call "instructions" anymore,

311
00:14:52,671 --> 00:14:54,670
but "mainCode".

312
00:14:55,186 --> 00:14:57,093
So, then we go

313
00:14:57,737 --> 00:15:00,151
call our test again

314
00:15:00,426 --> 00:15:03,311
and first observe our result because

315
00:15:03,310 --> 00:15:04,475
our other tests

316
00:15:04,470 --> 00:15:06,640
we shouldn't have broken anything with what we've done.

317
00:15:06,640 --> 00:15:07,653
And really:

318
00:15:07,650 --> 00:15:09,391
Our tests still working,

319
00:15:09,390 --> 00:15:10,968
this means we haven't broken anything,

320
00:15:10,960 --> 00:15:12,497
this is good.

321
00:15:12,490 --> 00:15:15,124
Our newer test continues, however,

322
00:15:15,120 --> 00:15:15,977
not working yet.

323
00:15:15,970 --> 00:15:16,871
This we need look to look again:

324
00:15:16,870 --> 00:15:18,115
Have we done something wrong?

325
00:15:18,391 --> 00:15:21,528
"malformed signature".

326
00:15:21,520 --> 00:15:23,404
Yes, it's right.

327
00:15:23,400 --> 00:15:24,577
Eh also means:

328
00:15:24,570 --> 00:15:25,826
I just done something wrong

329
00:15:25,820 --> 00:15:27,382
in utter confusion

330
00:15:27,380 --> 00:15:31,248
and by our "visitFunctionCall"

331
00:15:31,240 --> 00:15:34,004
I only have the class name until know

332
00:15:34,000 --> 00:15:35,471
and the given function name,

333
00:15:35,470 --> 00:15:36,831
it makes no sense, we need to

334
00:15:36,830 --> 00:15:38,515
give the whole signature.

335
00:15:39,093 --> 00:15:40,782
This means that after this comes also

336
00:15:40,780 --> 00:15:42,257
the list with arguments,

337
00:15:42,250 --> 00:15:43,435
so we know until now

338
00:15:43,430 --> 00:15:45,048
we have no argument yet

339
00:15:45,040 --> 00:15:46,697
and the return type,

340
00:15:46,690 --> 00:15:49,013
it's namely an integer.

341
00:15:50,373 --> 00:15:53,693
Then we execute our test again

342
00:15:55,800 --> 00:15:57,915
and huraa: It worked:

343
00:15:57,910 --> 00:15:59,706
Everything in our test runs,

344
00:15:59,700 --> 00:16:01,711
our randomNumber test too,

345
00:16:01,710 --> 00:16:04,017
it gives us namely a four as return

346
00:16:04,010 --> 00:16:06,168
and the "println"

347
00:16:06,160 --> 00:16:09,066
prints a four on our console.

348
00:16:09,680 --> 00:16:11,360
In this episode we learned

349
00:16:11,360 --> 00:16:13,346
how we can generate simple 

350
00:16:13,340 --> 00:16:14,893
function definitions and function calls

351
00:16:14,890 --> 00:16:17,168
in Jasmin on our code.

352
00:16:17,160 --> 00:16:18,640
In addition, we learned

353
00:16:18,640 --> 00:16:20,586
how we can separate "Statements" of our "main" method

354
00:16:20,580 --> 00:16:23,360
from our function definitions.

355
00:16:23,360 --> 00:16:25,555
We are still not ready with it.

356
00:16:25,550 --> 00:16:28,004
We want to add parameters to functions,

357
00:16:28,000 --> 00:16:30,311
allow more complex codes in our functions,

358
00:16:30,310 --> 00:16:32,706
support functions without return values

359
00:16:32,700 --> 00:16:34,386
and recognize if the programmer

360
00:16:34,380 --> 00:16:37,475
calls an undefined function.

361
00:16:37,751 --> 00:16:39,342
We will learn how to implement

362
00:16:39,342 --> 00:16:41,340
all this in the next episodes.

363
00:16:41,604 --> 00:16:43,960
Let me your comments with questions,

364
00:16:43,960 --> 00:16:45,440
Feedback and requests.

365
00:16:45,440 --> 00:16:46,444
Give me a thumb up

366
00:16:46,440 --> 00:16:48,160
if you liked my video

367
00:16:48,160 --> 00:16:49,413
and subscribe in the channel,

368
00:16:49,410 --> 00:16:51,706
for that you never loose an episode.

369
00:16:52,290 --> 00:16:53,866
Thanks a lot to Gadarol that

370
00:16:53,860 --> 00:16:56,302
permitted to use his studio for the recordings.

371
00:16:56,300 --> 00:16:58,462
Thank you very much for your attention,

372
00:16:58,460 --> 00:16:59,977
I hope that you have enjoyed,

373
00:16:59,970 --> 00:17:02,208
until next time, for the next:

374
00:17:02,208 --> 00:17:04,200
"Let's build a compiler."

