1
00:00:00,000 --> 00:00:02,790
Welcome back to "Let's build a compiler".

2
00:00:02,790 --> 00:00:05,450
In this episode we want to expand our programing

3
00:00:05,450 --> 00:00:07,610
language with simple variables.

4
00:00:07,610 --> 00:00:10,140
We will learn what is the variable table in Java

5
00:00:10,140 --> 00:00:14,580
and how to use the instructions "iload" and "istore" to work with them.

6
00:00:14,580 --> 00:00:18,070
My name is Yankee and I wish you a lot of fun!

7
00:00:18,650 --> 00:00:21,400
In this #8 episode I sadly was a little dumb,

8
00:00:21,400 --> 00:00:25,220
in these I hadn't already wrote an additional test case

9
00:00:25,220 --> 00:00:30,630
and then I, in confusion, have rewritten it once again.

10
00:00:30,630 --> 00:00:33,180
I was curious to know if one of you noticed,

11
00:00:33,180 --> 00:00:35,430
the episode 8 still not totally out yet,	

12
00:00:35,430 --> 00:00:37,790
I record forward a little to have on stock,

13
00:00:37,790 --> 00:00:39,150
because so I come out well,

14
00:00:39,150 --> 00:00:40,490
it is necessary, because next week

15
00:00:40,490 --> 00:00:43,080
I will probably not have time to record something.

16
00:00:43,810 --> 00:00:47,280
And this test case I executo here once again now:

17
00:00:47,280 --> 00:00:53,160
This, namely, the test "8-2+5",

18
00:00:53,820 --> 00:00:56,640
that should be 11.

19
00:00:56,640 --> 00:00:59,880
Also "8-2" are 6, "+5" are 11

20
00:00:59,880 --> 00:01:04,250
and not firstly "2+5" that would be 7

21
00:01:04,250 --> 00:01:07,010
and then "8-7" that would be 1.

22
00:01:07,010 --> 00:01:09,080
Then I execute the test one more time

23
00:01:10,690 --> 00:01:13,820
and like we see: everything OK, all tests had worked

24
00:01:13,820 --> 00:01:15,680
as the new down here too.

25
00:01:15,680 --> 00:01:21,870
Then we expand now our test for the actual episode goal.

26
00:01:24,230 --> 00:01:27,070
We want also to insert variables,

27
00:01:27,070 --> 00:01:32,860
that means, I say here: we can first declare a variable,

28
00:01:32,860 --> 00:01:35,790
we'll call it "foo"

29
00:01:35,790 --> 00:01:38,660
and then assign a value,

30
00:01:39,230 --> 00:01:41,900
we take the 42

31
00:01:41,900 --> 00:01:45,980
and then we want the output value.

32
00:01:48,080 --> 00:01:53,010
Here we logically, have then 42 output,

33
00:01:53,900 --> 00:01:58,630
I want also be able to use a variable in our calculation,

34
00:01:58,630 --> 00:02:03,970
thus in this example, it would have 44 as output

35
00:02:03,970 --> 00:02:08,960
and should have also the existence possibility of more variables.

36
00:02:08,960 --> 00:02:13,000
So I name "int a", "int b"

37
00:02:14,050 --> 00:02:18,160
and a need to be 2

38
00:02:18,160 --> 00:02:22,970
and b... need to be 5

39
00:02:24,160 --> 00:02:31,600
and so the "a+b" should be 7.

40
00:02:35,490 --> 00:02:38,000
Then we run the test one more time,

41
00:02:40,050 --> 00:02:42,580
hold on: Huraah, this gives us each types of error,

42
00:02:42,580 --> 00:02:47,410
our tests still not working, all the three new.

43
00:02:48,040 --> 00:02:51,530
This is naturally connected, because we haven't yet made them

44
00:02:51,530 --> 00:02:53,780
and this will come next.

45
00:02:54,270 --> 00:02:58,310
We go on our grammar to expand it

46
00:02:59,800 --> 00:03:02,890
and then I'll execute a new rule here

47
00:03:02,890 --> 00:03:05,790
to join the variable's declarations.

48
00:03:05,790 --> 00:03:08,090
This looks like:

49
00:03:09,690 --> 00:03:16,810
We create a new rule, then we'll call it "varDeclartion"

50
00:03:18,140 --> 00:03:22,350
And with a variable declaration comes first our type,

51
00:03:22,350 --> 00:03:25,060
which is until now just an Integer,

52
00:03:25,780 --> 00:03:29,600
then comes a variable name,

53
00:03:29,600 --> 00:03:33,920
typically soon next to any "identifier"

54
00:03:36,210 --> 00:03:38,710
and it's it.

55
00:03:39,660 --> 00:03:42,820
Thus, we still need to expand our "program",

56
00:03:42,820 --> 00:03:46,420
this can not only turn into a println,

57
00:03:46,420 --> 00:03:49,630
but also a variable's declaration,

58
00:03:49,630 --> 00:03:54,990
therefore, I handle the "println" from here to an "statement" rule.

59
00:03:57,400 --> 00:04:02,360
This could in a "statement" become a println

60
00:04:02,360 --> 00:04:07,700
or a variables declaration

61
00:04:14,150 --> 00:04:20,140
and the "program" is now consisted about many statements

62
00:04:20,140 --> 00:04:23,100
followed by a semicolon.

63
00:04:24,140 --> 00:04:25,960
Now, we need to declare

64
00:04:25,960 --> 00:04:28,680
what's an "IDENTIFIER",

65
00:04:28,680 --> 00:04:32,210
we make this down here with our lexer rules

66
00:04:34,880 --> 00:04:40,780
and an "IDENTIFIER" begins with a letter,

67
00:04:42,170 --> 00:04:45,830
either a lowercase or an uppercase

68
00:04:46,400 --> 00:04:52,230
and after that, follows with more an uppercase letter,

69
00:04:52,230 --> 00:04:56,220
next a uppercase or a number

70
00:04:56,220 --> 00:04:59,140
and henceforth any number.

71
00:05:00,460 --> 00:05:03,820
Now, our variable can naturally

72
00:05:03,820 --> 00:05:06,200
occur here as part of an "expression",

73
00:05:06,200 --> 00:05:10,030
also, until now we have the possibility to make the calculations

74
00:05:10,030 --> 00:05:11,630
or we can simply have a "Number",

75
00:05:11,630 --> 00:05:16,610
but in place of the number, we can also make one variable occur

76
00:05:16,610 --> 00:05:21,180
So, we take yet as possibility:

77
00:05:21,180 --> 00:05:27,040
"varName=IDENTIFIER"

78
00:05:27,460 --> 00:05:31,910
and we give it the name "Variable".

79
00:05:33,100 --> 00:05:35,790
We show shortly, our test once more:

80
00:05:35,790 --> 00:05:38,450
We have the declaration here.

81
00:05:38,450 --> 00:05:40,880
We don't have here no allocation.

82
00:05:40,880 --> 00:05:44,330
We have the "foo" access as expression.

83
00:05:44,330 --> 00:05:49,180
and the part where the "foo" can be an "expression" part,

84
00:05:49,180 --> 00:05:51,180
we have an another plus.

85
00:05:51,790 --> 00:05:54,810
Later, comes also: the allocation here

86
00:05:54,810 --> 00:05:57,000
'int' and then an IDENTIFIER.

87
00:05:57,750 --> 00:05:59,700
The "println", the "expression":

88
00:05:59,700 --> 00:06:04,140
An "expression" can later be a simple Identifier/Variable

89
00:06:04,140 --> 00:06:07,140
or a part from a calculation,

90
00:06:07,140 --> 00:06:09,820
also as example with the plus, what I took as example

91
00:06:09,820 --> 00:06:13,980
the left part or the right part also can only be an "expression"

92
00:06:13,980 --> 00:06:17,000
and with this too, again, just a variable name.

93
00:06:17,000 --> 00:06:21,730
Now we miss allocation in here, like mentioned before.

94
00:06:22,280 --> 00:06:28,000
Then we create here another "assignment" rule

95
00:06:29,630 --> 00:06:35,100
and with it one allocation so that firstly comes an "IDENTIFIER",

96
00:06:35,100 --> 00:06:37,180
namely, our variable's name

97
00:06:37,180 --> 00:06:43,110
and then comes one to show immediately

98
00:06:44,120 --> 00:06:46,620
and then comes an attribution value

99
00:06:46,620 --> 00:06:49,410
and then an "expression" again.

100
00:06:51,500 --> 00:06:55,820
In such a case we want after to access the "IDENTIFIER",

101
00:06:55,820 --> 00:07:00,140
we note that here exists a label.

102
00:07:00,140 --> 00:07:05,130
The same is true for the "variable declaration".

103
00:07:06,140 --> 00:07:10,060
And about the "expression" we maybe want to access it,

104
00:07:10,630 --> 00:07:12,880
we notice it here too.

105
00:07:13,570 --> 00:07:16,460
Then we need to create another

106
00:07:16,460 --> 00:07:20,860
for the "assignment" to be called here,

107
00:07:21,410 --> 00:07:25,490
and can be overall a "statement", an allocation,

108
00:07:25,490 --> 00:07:29,320
we also write "assignment" within the statement.

109
00:07:30,170 --> 00:07:34,400
Then we save this, generate our new parser,

110
00:07:35,180 --> 00:07:38,220
press "F5" on the parser,

111
00:07:38,220 --> 00:07:42,020
and execute our test once more

112
00:07:42,020 --> 00:07:44,950
and, for now, what we have as output.

113
00:07:44,950 --> 00:07:47,720
We can see here the errors that will come afterwards,

114
00:07:47,720 --> 00:07:51,530
because our visitor generated invalid Jasmin code

115
00:07:51,530 --> 00:07:53,570
and then if the Jasmin tries these

116
00:07:53,570 --> 00:07:57,450
invalid codes, the errors over the parsing are thrown here.

117
00:07:57,450 --> 00:07:59,830
We want to fix this next,

118
00:07:59,830 --> 00:08:03,030
therefore we go on our visitor

119
00:08:03,030 --> 00:08:07,260
and then we add here our new visit method.

120
00:08:07,260 --> 00:08:09,870
We begin with visitVarDeclaration

121
00:08:12,870 --> 00:08:17,310
and if we stumble now with a "declaration",

122
00:08:17,310 --> 00:08:18,650
what will we do then?

123
00:08:18,650 --> 00:08:20,280
Therefore, we need at first know,

124
00:08:20,280 --> 00:08:23,580
how a Java variable table works.

125
00:08:23,980 --> 00:08:26,850
We had here in our Main class,

126
00:08:26,850 --> 00:08:29,340
in the Jasmin skeleton

127
00:08:29,340 --> 00:08:34,270
once ". limit locals 100".

128
00:08:34,270 --> 00:08:38,820
This means that we have now a variable table of size "100",

129
00:08:38,820 --> 00:08:42,000
the variable table in Java works with 4-Bytes write,

130
00:08:42,000 --> 00:08:46,680
that means to say this variable table has now 100 inputs of 4 bytes each

131
00:08:46,680 --> 00:08:50,470
and so we can store in out 400 bytes table.

132
00:08:50,470 --> 00:08:52,360
Until the moment we did use just integers

133
00:08:52,360 --> 00:08:56,160
and while integers have 4 bytes

134
00:08:56,160 --> 00:09:02,790
we can thought store 100 integers in our variable table.

135
00:09:02,790 --> 00:09:05,330
Now we can, however, just put numbers with an index,

136
00:09:05,330 --> 00:09:08,000
we can also say "give me the variable at position 17"

137
00:09:08,000 --> 00:09:09,160
or at "21",

138
00:09:09,160 --> 00:09:12,960
but not "give me the variable a" or "the variable foo".

139
00:09:12,960 --> 00:09:15,230
Because of this, we need that

140
00:09:15,230 --> 00:09:19,550
the variable name have a mapping for the index in table.

141
00:09:20,180 --> 00:09:23,480
Thus, we need at first a variable

142
00:09:23,480 --> 00:09:25,800
that could save this assignment,

143
00:09:25,800 --> 00:09:30,160
in this direction, I create here in visitor a simple Map

144
00:09:31,750 --> 00:09:35,700
the Strings, variable names to integers,

145
00:09:35,700 --> 00:09:39,280
namely, positions mapped to variables table.

146
00:09:50,990 --> 00:09:52,450
and here then,

147
00:09:52,450 --> 00:09:56,560
we always stumble over the variables' declaration,

148
00:09:56,560 --> 00:10:02,660
let's declare these to store in our variable map.

149
00:10:03,440 --> 00:10:06,690
We do this were we say:

150
00:10:06,690 --> 00:10:10,190
"variables.put"

151
00:10:10,660 --> 00:10:14,900
and as key we call our variable's name

152
00:10:17,430 --> 00:10:24,290
and as value we call the size of the variable table updated.

153                                          
00:10:26,330 --> 00:10:30,100
And we do not need to make anything else in the declaration method,

154
00:10:30,100 --> 00:10:34,470
it can just read the String to return the result,

155
00:10:34,470 --> 00:10:36,690
because it can't generate instructions.

156
00:10:37,780 --> 00:10:42,710
Now for next, in the visit methods: namely "visitAssignment".

157
00:10:42,710 --> 00:10:45,170
We need to attribute something to the variable

158
00:10:45,170 --> 00:10:47,850
at first, naturally, a value,

159
00:10:47,850 --> 00:10:49,850
because we can allocate the variable. 

160
00:10:49,850 --> 00:10:52,370
The instructions, which generate these values,

161
00:10:52,370 --> 00:10:59,460
become by calling in the "visit" on "ctx.expression".

162
00:11:01,110 --> 00:11:03,540
Now there is the question: What to do because 

163
00:11:03,540 --> 00:11:07,330
with the value, that returned together?

164
00:11:07,330 --> 00:11:10,990
There is, in Java, an "istore" instruction

165
00:11:10,990 --> 00:11:17,160
and the instruction "istore" takes the integer from the top of Stack

166
00:11:17,160 --> 00:11:19,600
and saves in the variable table

167
00:11:19,600 --> 00:11:22,020
and in the position to be specified.

168
00:11:22,020 --> 00:11:24,180
I can write "istore 17" too

169
00:11:24,180 --> 00:11:28,480
and then the stack value, the one that stays on top,

170
00:11:28,480 --> 00:11:31,500
in the variables table is saved at position 17

171
00:11:31,500 --> 00:11:33,910
and therefore I can call it new.

172
00:11:34,680 --> 00:11:38,170
Now it is at position 17, naturally, 

173
00:11:38,170 --> 00:11:43,080
but we get the position from our variable map,

174
00:11:43,080 --> 00:11:45,550
we ask inside:

175
00:11:47,230 --> 00:11:53,170
Which is the position to our variable's name?

176
00:11:57,070 --> 00:11:59,790
Then we need also join them here,

177
00:11:59,790 --> 00:12:03,810
not forgetting the line break between the two instructions

178
00:12:07,830 --> 00:12:12,550
and then returns the result of this.

179
00:12:15,640 --> 00:12:19,630
Oh, I have worked here to join a comic character.

180
00:12:21,210 --> 00:12:22,460
This is correct.

181
00:12:23,140 --> 00:12:27,830
The same happens in reverse when still calling a variable

182
00:12:27,830 --> 00:12:29,340
in "visitVariable".

183
00:12:29,340 --> 00:12:31,890
If we want to call a variable,

184
00:12:31,890 --> 00:12:36,510
then we make similarly to the "istore" with "iload".

185
00:12:40,150 --> 00:12:43,280
"iload" now makes the reverse what the "istore" does:

186
00:12:43,280 --> 00:12:46,940
He calls the variable on the defined position

187
00:12:46,940 --> 00:12:49,460
and stores again in the top of the stack.

188
00:12:49,730 --> 00:12:52,150
Then we want to prove what happened now,

189
00:12:52,150 --> 00:12:54,750
when we perform our tests.

190
00:12:55,610 --> 00:12:58,930
And like it says: Every tests are working,

191
00:12:58,930 --> 00:13:02,140
14 tests executed, no fail,

192
00:13:02,140 --> 00:13:04,880
this was really a success.

193
00:13:04,880 --> 00:13:07,530
For conclusion, I want to one more time 

194
00:13:07,530 --> 00:13:11,780
generate the tree and then generate the Jasmin code

195
00:13:11,780 --> 00:13:15,420
from the last example here to show.

196
00:13:15,420 --> 00:13:20,310
For that, we get this test example that was generated,

197
00:13:21,540 --> 00:13:23,460
copy this,

198
00:13:24,770 --> 00:13:28,520
join it with our code.demo,

199
00:13:31,610 --> 00:13:34,450
then we take our TestRig,

200
00:13:35,550 --> 00:13:39,510
with our code.demo file,

201
00:13:39,510 --> 00:13:43,130
in which the compiler directory is

202
00:13:44,800 --> 00:13:48,220
and let show the tree.

203
00:13:49,010 --> 00:13:51,560
As you see: the tree is much bigger.

204
00:13:51,560 --> 00:13:54,080
Our program here consists now

205
00:13:54,080 --> 00:13:56,920
from a joined statements series.

206
00:13:56,920 --> 00:14:00,330
Our variables declarations are always

207
00:14:00,330 --> 00:14:03,670
here on the "int" and a variable name,

208
00:14:03,670 --> 00:14:06,690
to be allocated with an operator,

209
00:14:06,690 --> 00:14:09,180
with an attribution operator in between

210
00:14:09,180 --> 00:14:12,940
and any expression

211
00:14:12,940 --> 00:14:15,290
and yet a value seen:

212
00:14:15,290 --> 00:14:17,680
Here on the right of the statement with the "println",

213
00:14:17,680 --> 00:14:21,360
the most complex statement of our code,

214
00:14:21,650 --> 00:14:24,090
where there is only the "println" over the definition,

215
00:14:24,090 --> 00:14:25,820
consisting of the println and an "expression"

216
00:14:25,820 --> 00:14:28,710
and the "expression" over an addition

217
00:14:28,710 --> 00:14:34,130
and the two "expression"s again respectively one variable.

218
00:14:34,670 --> 00:14:36,240
So, in the code for:

219
00:14:36,240 --> 00:14:39,720
For this, we turn back to Eclipse, on our compiler project

220
00:14:39,720 --> 00:14:43,360
and execute our Main method again.

221
00:14:44,250 --> 00:14:46,990
Then we see it generate the code

222
00:14:47,530 --> 00:14:50,940
And here we have our next, 2,

223
00:14:51,490 --> 00:14:53,210
which is over the stack

224
00:14:53,210 --> 00:14:58,910
and then will be saved at position 0 of the variables table.

225
00:15:00,130 --> 00:15:03,990
Because of this it would be cool if we had more code beside,

226
00:15:03,990 --> 00:15:06,820
so I make one more time.

227
00:15:09,370 --> 00:15:13,000
Thus, it can see simultaneously.

228
00:15:14,750 --> 00:15:16,270
Looks like this:

229
00:15:17,130 --> 00:15:20,150
Here is the 2, which is at position 0,

230
00:15:20,150 --> 00:15:23,070
this is the position for our variable a to be saved,

231
00:15:23,070 --> 00:15:25,620
and then the 5 at position 1,

232
00:15:25,620 --> 00:15:27,950
then comes the "println",

233
00:15:27,950 --> 00:15:31,200
we place the PrintStream over the stack,

234
00:15:31,200 --> 00:15:34,380
then store the variables a and b on the stack,

235
00:15:34,380 --> 00:15:36,510
now having three values on the stack,

236
00:15:37,080 --> 00:15:39,340
then we add the two top values together,

237
00:15:39,340 --> 00:15:41,320
having now only two values in the stack,

238
00:15:41,320 --> 00:15:46,790
namely "System.out" and the addition calculation of 2 and 5, the 7

239
00:15:46,790 --> 00:15:49,260
and then we can give a println

240
00:15:49,260 --> 00:15:51,080
and we're finished.

241
00:15:51,620 --> 00:15:53,600
In this episode we learned how we can

242
00:15:53,600 --> 00:15:57,840
map the variables' names to position  in a variable table.

243
00:15:57,840 --> 00:15:59,100
Furthermore, we learned

244
00:15:59,100 --> 00:16:02,030
how we can use the instructions "iload" and "istore"

245
00:16:02,030 --> 00:16:06,550
over two values in the stack and copy here and there in the variable table

246
00:16:06,550 --> 00:16:09,090
On the way it still permits many errors occur,

247
00:16:09,090 --> 00:16:10,710
that are difficult to find.

248
00:16:10,710 --> 00:16:12,190
This is also because

249
00:16:12,190 --> 00:16:16,240
until this moment, we haven't worked with helpful output error messages.

250
00:16:16,240 --> 00:16:18,730
This will be the next episode's theme.

