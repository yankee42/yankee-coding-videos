1
00:00:00,000 --> 00:00:03,070
Welcome back to "Let's build a compiler".

2
00:00:03,070 --> 00:00:05,100
In the last episode we had successfully build

3
00:00:05,100 --> 00:00:09,050
the minus, times, anda division for our language.

4
00:00:09,050 --> 00:00:10,640
Sadly, we still have problems

5
00:00:10,640 --> 00:00:13,510
like the operators having links one to another.

6
00:00:13,510 --> 00:00:19,570
For example, the result from "2+3*3" was 15, instead of the expected 11.

7
00:00:19,570 --> 00:00:22,590
In this episode we will show why this is so

8
00:00:22,590 --> 00:00:26,740
and then expand our compiler, so it also solves this problem.

9
00:00:26,740 --> 00:00:30,390
My name is Yankee and I wish you a lot of fun.

10
00:00:31,490 --> 00:00:33,840
And now for understanding what the problem is

11
00:00:33,840 --> 00:00:36,840
we want generate once the tree from ANTLR

12
00:00:36,840 --> 00:00:39,900
to allow us to see "2+3*3".

13
00:00:39,900 --> 00:00:41,830
For this we go over the console,

14
00:00:41,830 --> 00:00:44,630
go to our parser's directory,

15
00:00:44,630 --> 00:00:49,590
we take for us again the TestRig command from the last time

16
00:00:49,940 --> 00:00:59,950
and then we'll execute println(2+3*3);",

17
00:00:59,950 --> 00:01:03,760
then Ctrl+D on Linux, Ctrl+Z on Windows

18
00:01:03,760 --> 00:01:07,430
and then the tree is shown to us.

19
00:01:08,900 --> 00:01:11,100
So, here you see our program now:

20
00:01:11,100 --> 00:01:14,530
It has a "println" with an "expression"

21
00:01:14,530 --> 00:01:20,690
and that "expression" from here consists of a multiplication and an addition.

22
00:01:20,690 --> 00:01:24,550
You can se, that the addition stays down on our tree,

23
00:01:24,550 --> 00:01:26,790
have gained priority.

24
00:01:26,790 --> 00:01:29,880
That means, if we traverse here in Post-Order,

25
00:01:29,880 --> 00:01:35,900
then we'd have 2, 3, plus, 3,  times.

26
00:01:35,900 --> 00:01:40,080
Unfortunately, this is namely not what we wanted.

27
00:01:40,080 --> 00:01:42,360
Can we fix this problem now?

28
00:01:42,360 --> 00:01:46,790
Therefore, firstly, we'll observe again inside our grammar

29
00:01:46,790 --> 00:01:49,750
and wonder us what should really happen.

30
00:01:49,750 --> 00:01:53,620
We have here the expression "2+3*3".

31
00:01:53,620 --> 00:01:58,060
And we want that this gonna be treated as it was "2+9".

32
00:01:58,060 --> 00:02:04,070
This means we have first the 2, it is a "NUMBER"

33
00:02:04,070 --> 00:02:09,060
and then we have one plus, also it's in the top rule here

34
00:02:09,060 --> 00:02:12,970
and then comes of the right side from the plus calculation,

35
00:02:12,970 --> 00:02:15,500
again, with an "times" expression.

36
00:02:15,500 --> 00:02:17,780
Damn it, we unfortunately are not allowed,

37
00:02:17,780 --> 00:02:20,940
the right part here can only, at this moment, be a "NUMBER".

38
00:02:20,940 --> 00:02:22,620
What we do then?

39
00:02:22,620 --> 00:02:26,690
Instead of "NUMBER" we always use he "expression",

40
00:02:26,690 --> 00:02:29,080
within the right part from our plus

41
00:02:29,080 --> 00:02:33,960
can be an "expression" and be also another "times".

42
00:02:33,960 --> 00:02:37,440
This is naturally not the only thing that changed

43
00:02:37,440 --> 00:02:38,810
this allow us a "times",

44
00:02:38,810 --> 00:02:42,910
if I change this grammar part of "expression" for the right part,

45
00:02:42,910 --> 00:02:45,690
then we have now by here, not simply

46
00:02:45,690 --> 00:02:47,760
just a Token inside our label "right",

47
00:02:47,760 --> 00:02:50,750
but also another "expression".

48
00:02:50,750 --> 00:02:52,230
This naturally continues OK,

49
00:02:52,230 --> 00:02:55,950
because our right part can also again be simply just a "NUMBER",

50
00:02:55,950 --> 00:02:59,430
but our visitor must, in this way, adapt to our visitor.

51
00:02:59,430 --> 00:03:02,820
We call now again to generate on the next time

52
00:03:02,820 --> 00:03:05,840
from our "grammar" directory

53
00:03:05,840 --> 00:03:08,670
our parser anew,

54
00:03:10,930 --> 00:03:14,500
then, we go inside the parser in Eclipse with "F5",

55
00:03:15,220 --> 00:03:17,770
thus, we open our visitor

56
00:03:17,770 --> 00:03:19,740
and henceforth we adjust it.

57
00:03:19,740 --> 00:03:23,010
Now he is like this, together with our other

58
00:03:23,010 --> 00:03:24,670
visit methods we have here,

59
00:03:24,670 --> 00:03:27,360
also as example with "visitPlus"

60
00:03:27,360 --> 00:03:31,190
the "visitChildren" can can also return a "ldc".

61
00:03:31,190 --> 00:03:34,710
Because we have down here a "visitNumber" method

62
00:03:34,710 --> 00:03:37,190
and it already gives us the "ldc".

63
00:03:37,190 --> 00:03:39,140
That's really elegant, because it means

64
00:03:39,140 --> 00:03:42,350
we don't have to give the "ldc" in here anymore.

65
00:03:42,350 --> 00:03:46,980
This yet comes from the "visitChildren" here to our under next.

66
00:03:46,980 --> 00:03:50,680
We remove also the "ldc" from everywhere

67
00:03:59,750 --> 00:04:03,350
and then we execute our test one more time.

68
00:04:05,880 --> 00:04:08,790
And it has not changed anything in itself:

69
00:04:08,790 --> 00:04:10,370
All the old test are still functional,

70
00:04:10,370 --> 00:04:12,680
the new ones don't work until now.

71
00:04:13,060 --> 00:04:14,650
Where are they?

72
00:04:15,660 --> 00:04:18,710
We'll see our grammar once again:

73
00:04:18,710 --> 00:04:24,890
We want here to continue the 2+3 for evaluation now

74
00:04:24,890 --> 00:04:30,400
the plus that returns and the right part of the multiplication.

75
00:04:30,400 --> 00:04:35,060
Yes, with a goofy execution, the ANTLR accepted the namely reverse:

76
00:04:35,060 --> 00:04:37,150
ANTLR begins with a fact saying:

77
00:04:37,150 --> 00:04:40,080
I have here a multiplication first

78
00:04:40,080 --> 00:04:44,460
and this multiplication has a "2+3" child on the left

79
00:04:44,460 --> 00:04:48,630
and then on the right only the 3.

80
00:04:48,630 --> 00:04:50,570
And when we look straight inward the grammar,

81
00:04:50,570 --> 00:04:53,290
we also see: in fact, it's ambiguous,

82
00:04:53,290 --> 00:04:55,290
that can be seen as so or so.

83
00:04:55,290 --> 00:04:58,460
How does ANTLR handle such a case?

84
00:04:58,460 --> 00:05:02,570
It always takes the first rule above.

85
00:05:02,570 --> 00:05:06,430
The rule above also have the biggest priority.

86
00:05:06,430 --> 00:05:08,280
And we have with us at the moment:

87
00:05:08,280 --> 00:05:10,600
The plus has highest priority.

88
00:05:10,600 --> 00:05:12,360
That is naturally stupid,

89
00:05:12,360 --> 00:05:15,110
because we want the opposite.

90
00:05:15,110 --> 00:05:17,640
The multiplication operator must

91
00:05:17,640 --> 00:05:20,190
have higher priority than the plus.

92
00:05:20,190 --> 00:05:23,750
Also, we have to change these both rules.

93
00:05:29,700 --> 00:05:34,500
Therefore, we generate again our parser anew,

94
00:05:36,620 --> 00:05:39,250
going here with "F5"

95
00:05:39,250 --> 00:05:42,310
and our tests execute.

96
00:05:43,830 --> 00:05:45,120
So, what do the tests say?

97
00:05:45,120 --> 00:05:46,770
In fact, it didn't work.

98
00:05:46,770 --> 00:05:49,280
it suggests now that only a test remains,

99
00:05:49,280 --> 00:05:53,470
namely, the "8/2*4" test.

100
00:05:53,470 --> 00:05:55,810
One thing that you could have payed attention,

101
00:05:55,810 --> 00:05:58,550
is natural to the division to have

102
00:05:58,550 --> 00:06:03,420
a higher priority than the subtraction.

103
00:06:03,900 --> 00:06:06,430
But this isn't everything.

104
00:06:06,430 --> 00:06:09,490
Because here down in the Test, the error suggestion

105
00:06:09,490 --> 00:06:11,930
doesn't return any subtraction.

106
00:06:11,930 --> 00:06:16,150
This also can't be a problem for the test represented here.

107
00:06:16,150 --> 00:06:19,900
The true problem for our test comes next,

108
00:06:19,900 --> 00:06:22,550
because the multiplication and division are

109
00:06:22,550 --> 00:06:27,230
seen on the same level of our operators ranking.

110
00:06:27,230 --> 00:06:29,100
We can write here now:

111
00:06:29,100 --> 00:06:32,640
"Times or Division",

112
00:06:32,640 --> 00:06:35,870
and with the operators stablish the same height

113
00:06:35,870 --> 00:06:38,470
and truly, the ANTLR would be in this case

114
00:06:38,470 --> 00:06:41,640
solve the operators from the left to the right

115
00:06:41,640 --> 00:06:43,220
and make it right.

116
00:06:43,220 --> 00:06:46,490
But we can't work anymore as well as we want with our labels.

117
00:06:46,490 --> 00:06:48,810
When we want to step forward the labels in which we are working,

118
00:06:48,810 --> 00:06:51,480
we should think in another way.

119
00:06:52,470 --> 00:06:55,480
One possible way would be:

120
00:06:55,480 --> 00:07:01,270
Put the division before the multiplier in priority.

121
00:07:01,270 --> 00:07:03,390
Then you see the general look.

122
00:07:05,090 --> 00:07:09,980
And now we respectively evaluate the division before de multiplication

123
00:07:09,980 --> 00:07:13,300
and the subtraction before the addition.

124
00:07:13,300 --> 00:07:14,900
Does this also work?

125
00:07:14,900 --> 00:07:17,540
Here is an example for it:

126
00:07:17,540 --> 00:07:23,130
Let say: we want "2*8/4" as refractive.

127
00:07:23,130 --> 00:07:28,020
So, this is will independent, if we want to calculate in this way:

128
00:07:28,020 --> 00:07:31,160
"2*8" are 16, divided by 4 are 4.

129
00:07:31,160 --> 00:07:35,720
Or let's say: "2*(8/4)"

130
00:07:35,720 --> 00:07:38,360
and we'll calculate first the "8/4",

131
00:07:38,360 --> 00:07:43,260
because in this case, "8/4" would be 2 and "2*2", still, 4.

132
00:07:43,260 --> 00:07:46,520
Furthermore, the multiplication operator holds,

133
00:07:46,520 --> 00:07:51,150
in contrast with the division operator, the commutative property.

134
00:07:53,580 --> 00:07:55,400
We'll prove one more time

135
00:07:55,400 --> 00:08:01,010
if the test operators order now goes through.

136
00:08:01,010 --> 00:08:04,670
We'll generate also our new parser,

137
00:08:05,950 --> 00:08:08,220
we go here with "F5"

138
00:08:08,220 --> 00:08:11,570
and we let our test run.

139
00:08:14,960 --> 00:08:17,390
And Hurra, it says that everything is fine,

140
00:08:17,390 --> 00:08:20,760
all our tests worked.

141
00:08:20,760 --> 00:08:23,720
Just, one more time for demonstration, I want now

142
00:08:23,720 --> 00:08:27,610
show you the tree, how it looks.

143
00:08:28,140 --> 00:08:31,970
Also, we take our TestRig again,

144
00:08:31,970 --> 00:08:35,780
go to the first folder with our parser

145
00:08:35,780 --> 00:08:39,260
and extract the TestRig out,

146
00:08:39,730 --> 00:08:41,660
giving now another:

147
00:08:41,660 --> 00:08:46,850
"println(2+3*3)"

148
00:08:49,130 --> 00:08:51,690
and it shows the tree.

149
00:08:53,190 --> 00:08:54,500
As you see:

150
00:08:54,500 --> 00:08:57,930
Now is the "plus" that stays on top, and the times down there

151
00:08:57,930 --> 00:09:01,510
and the things even more in the bottom are those we first calculate,

152
00:09:01,510 --> 00:09:03,680
because we solve the tree from bottom to the top,

153
00:09:03,680 --> 00:09:08,250
we also calculate "3*3" and then "+2".

154
00:09:09,170 --> 00:09:10,800
In this episode we have learned,

155
00:09:10,800 --> 00:09:13,750
how we can write our parser rules for calculations,

156
00:09:13,750 --> 00:09:16,340
that also, in the chain calculations, can detect

157
00:09:16,340 --> 00:09:19,140
any complex expression with more operators.

158
00:09:19,140 --> 00:09:20,810
We learned also, that through

159
00:09:20,810 --> 00:09:22,330
the order of sub-rules

160
00:09:22,330 --> 00:09:25,400
can change the operators precedence ranking.

161
00:09:25,400 --> 00:09:28,220
Which features do you want to see next?

162
00:09:28,220 --> 00:09:30,210
What are your questions and requests?

163
00:09:30,210 --> 00:09:32,850
About which problems and solutions have you stumbled,

164
00:09:32,850 --> 00:09:35,210
working with a compiler?

165
00:09:35,210 --> 00:09:37,240
Write me in the comments!

166
00:09:37,240 --> 00:09:39,770
Leave me a thumb up here, if you liked this video

167
00:09:39,770 --> 00:09:43,750
and sign my channel, with it you don't loose any episode.

168
00:09:43,750 --> 00:09:45,030
Thanks a lot to Gadarol,

169
00:09:45,030 --> 00:09:47,850
that allowed me to make the recordings in his studio.

170
00:09:47,850 --> 00:09:50,280
Thank you very much for you attention,

171
00:09:50,280 --> 00:09:52,590
goodbye and until the next time,

172
00:09:52,590 --> 00:09:56,020
for the next episode of: "Let's build a compiler".

